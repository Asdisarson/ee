/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.SubscriptionApi();
  });

  describe('(package)', function() {
    describe('SubscriptionApi', function() {
      describe('subscriptionCreateSubscription', function() {
        it('should call subscriptionCreateSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionCreateSubscription call and complete the assertions
          /*
          var subscription = new DkPlusApi.DkPlusAPIModelsSubscriptionSubscriptionHead();
          subscription.id = 0;
          subscription._number = "";
          subscription.customer = new DkPlusApi.DkPlusAPIModelsInvoiceCustomer();
          subscription.customer._number = "";
          subscription.customer.name = "";
          subscription.customer.SSN = "";
          subscription.customer.phone = "";
          subscription.customer.address1 = "";
          subscription.customer.address2 = "";
          subscription.customer.address3 = "";
          subscription.customer.address4 = "";
          subscription.customer.zipCode = "";
          subscription.customer.country = "";
          subscription.customer.orderDate = new Date();
          subscription.customer.orderNumber = "";
          subscription.customer.email = "";
          subscription.reference = "";
          subscription.text1 = "";
          subscription.text2 = "";
          subscription.group = "";
          subscription.term = "";
          subscription.mode = "";
          subscription._date = new Date();
          subscription.currency = "";
          subscription.salesPerson = "";
          subscription.exchange = 0.0;
          subscription.lines = [new DkPlusApi.DkPlusAPIModelsSubscriptionSubscriptionLine()];
          subscription.lines[0].itemCode = "";
          subscription.lines[0].warehouse = "";
          subscription.lines[0].text = "";
          subscription.lines[0].text2 = "";
          subscription.lines[0].quantity = 0.0;
          subscription.lines[0].reference = "";
          subscription.lines[0].includingVAT = false;
          subscription.lines[0].price = 0.0;
          subscription.lines[0].discount = 0.0;
          subscription.lines[0].discountAmount = 0.0;
          subscription.lines[0].total = 0.0;
          subscription.lines[0].dim1 = "";
          subscription.lines[0].memo = "";
          subscription.lines[0].variations = [new DkPlusApi.DkPlusAPIModelsInvoiceVariation()];
          subscription.lines[0].variations[0].code = "";
          subscription.lines[0].variations[0].code2 = "";
          subscription.lines[0].variations[0].description = "";
          subscription.lines[0].variations[0].quantity = 0.0;
          subscription.lines[0].properties = {key: ""};
          subscription.properties = {key: ""};
          var opts = {};
          opts.source = "source_example";

          instance.subscriptionCreateSubscription(subscription, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsSubscriptionSubscriptionHead);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.customer).to.be.a(DkPlusApi.DkPlusAPIModelsInvoiceCustomer);
                  expect(data.customer._number).to.be.a('string');
              expect(data.customer._number).to.be("");
              expect(data.customer.name).to.be.a('string');
              expect(data.customer.name).to.be("");
              expect(data.customer.SSN).to.be.a('string');
              expect(data.customer.SSN).to.be("");
              expect(data.customer.phone).to.be.a('string');
              expect(data.customer.phone).to.be("");
              expect(data.customer.address1).to.be.a('string');
              expect(data.customer.address1).to.be("");
              expect(data.customer.address2).to.be.a('string');
              expect(data.customer.address2).to.be("");
              expect(data.customer.address3).to.be.a('string');
              expect(data.customer.address3).to.be("");
              expect(data.customer.address4).to.be.a('string');
              expect(data.customer.address4).to.be("");
              expect(data.customer.zipCode).to.be.a('string');
              expect(data.customer.zipCode).to.be("");
              expect(data.customer.country).to.be.a('string');
              expect(data.customer.country).to.be("");
              expect(data.customer.orderDate).to.be.a(Date);
              expect(data.customer.orderDate).to.be(new Date());
              expect(data.customer.orderNumber).to.be.a('string');
              expect(data.customer.orderNumber).to.be("");
              expect(data.customer.email).to.be.a('string');
              expect(data.customer.email).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.text1).to.be.a('string');
            expect(data.text1).to.be("");
            expect(data.text2).to.be.a('string');
            expect(data.text2).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.term).to.be.a('string');
            expect(data.term).to.be("");
            expect(data.mode).to.be.a('string');
            expect(data.mode).to.be("");
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(new Date());
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.salesPerson).to.be.a('string');
            expect(data.salesPerson).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsSubscriptionSubscriptionLine);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.text2).to.be.a('string');
                expect(data.text2).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.includingVAT).to.be.a('boolean');
                expect(data.includingVAT).to.be(false);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);
                expect(data.discount).to.be.a('number');
                expect(data.discount).to.be(0.0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.total).to.be.a('number');
                expect(data.total).to.be(0.0);
                expect(data.dim1).to.be.a('string');
                expect(data.dim1).to.be("");
                expect(data.memo).to.be.a('string');
                expect(data.memo).to.be("");
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsInvoiceVariation);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
    
                          }
                }
                {
                  let dataCtr = data.properties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subscriptionGetSubscription', function() {
        it('should call subscriptionGetSubscription successfully', function(done) {
          // TODO: uncomment, update parameter values for subscriptionGetSubscription call and complete the assertions
          /*
          var opts = {};
          opts.id = 56;
          opts.customer = "customer_example";
          opts.itemcode = "itemcode_example";
          opts.modified = new Date("2013-10-20T19:20:30+01:00");
          opts.group = "group_example";
          opts._date = new Date("2013-10-20T19:20:30+01:00");
          opts.includelines = true;
          opts.properties = "properties_example";
          opts.lineproperties = "lineproperties_example";

          instance.subscriptionGetSubscription(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsSubscriptionSubscriptionHead);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.customer).to.be.a(DkPlusApi.DkPlusAPIModelsInvoiceCustomer);
                    expect(data.customer._number).to.be.a('string');
                expect(data.customer._number).to.be("");
                expect(data.customer.name).to.be.a('string');
                expect(data.customer.name).to.be("");
                expect(data.customer.SSN).to.be.a('string');
                expect(data.customer.SSN).to.be("");
                expect(data.customer.phone).to.be.a('string');
                expect(data.customer.phone).to.be("");
                expect(data.customer.address1).to.be.a('string');
                expect(data.customer.address1).to.be("");
                expect(data.customer.address2).to.be.a('string');
                expect(data.customer.address2).to.be("");
                expect(data.customer.address3).to.be.a('string');
                expect(data.customer.address3).to.be("");
                expect(data.customer.address4).to.be.a('string');
                expect(data.customer.address4).to.be("");
                expect(data.customer.zipCode).to.be.a('string');
                expect(data.customer.zipCode).to.be("");
                expect(data.customer.country).to.be.a('string');
                expect(data.customer.country).to.be("");
                expect(data.customer.orderDate).to.be.a(Date);
                expect(data.customer.orderDate).to.be(new Date());
                expect(data.customer.orderNumber).to.be.a('string');
                expect(data.customer.orderNumber).to.be("");
                expect(data.customer.email).to.be.a('string');
                expect(data.customer.email).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.term).to.be.a('string');
              expect(data.term).to.be("");
              expect(data.mode).to.be.a('string');
              expect(data.mode).to.be("");
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.salesPerson).to.be.a('string');
              expect(data.salesPerson).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsSubscriptionSubscriptionLine);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.includingVAT).to.be.a('boolean');
                  expect(data.includingVAT).to.be(false);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.total).to.be.a('number');
                  expect(data.total).to.be(0.0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.memo).to.be.a('string');
                  expect(data.memo).to.be("");
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsInvoiceVariation);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
      
                            }
                  }
                  {
                    let dataCtr = data.properties;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
  
                        }
              }
              {
                let dataCtr = data.properties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
