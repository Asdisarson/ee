/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.PaymentApi();
  });

  describe('(package)', function() {
    describe('PaymentApi', function() {
      describe('paymentModeGetPaymentMode', function() {
        it('should call paymentModeGetPaymentMode successfully', function(done) {
          // TODO: uncomment, update parameter values for paymentModeGetPaymentMode call and complete the assertions
          /*
          var _number = "_number_example";

          instance.paymentModeGetPaymentMode(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersPaymentModeModel);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('paymentModeGetPaymentModes', function() {
        it('should call paymentModeGetPaymentModes successfully', function(done) {
          // TODO: uncomment paymentModeGetPaymentModes call and complete the assertions
          /*

          instance.paymentModeGetPaymentModes(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersPaymentModeModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('paymentTermGet', function() {
        it('should call paymentTermGet successfully', function(done) {
          // TODO: uncomment paymentTermGet call and complete the assertions
          /*

          instance.paymentTermGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersPaymentTermModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('paymentTermGetInstance', function() {
        it('should call paymentTermGetInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for paymentTermGetInstance call and complete the assertions
          /*
          var _number = "_number_example";

          instance.paymentTermGetInstance(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersPaymentTermModel);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('paymentTypeGet', function() {
        it('should call paymentTypeGet successfully', function(done) {
          // TODO: uncomment paymentTypeGet call and complete the assertions
          /*

          instance.paymentTypeGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesPaymentMode);
              expect(data.paymentId).to.be.a('number');
              expect(data.paymentId).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.type).to.be.a('number');
              expect(data.type).to.be(0);
              expect(data.gLAccountNumber).to.be.a('string');
              expect(data.gLAccountNumber).to.be("");
              expect(data.active).to.be.a('boolean');
              expect(data.active).to.be(false);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('paymentTypeGetInstance', function() {
        it('should call paymentTypeGetInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for paymentTypeGetInstance call and complete the assertions
          /*
          var id = 56;

          instance.paymentTypeGetInstance(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesPaymentMode);
            expect(data.paymentId).to.be.a('number');
            expect(data.paymentId).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.type).to.be.a('number');
            expect(data.type).to.be(0);
            expect(data.gLAccountNumber).to.be.a('string');
            expect(data.gLAccountNumber).to.be("");
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
