/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.ProductApi();
  });

  describe('(package)', function() {
    describe('ProductApi', function() {
      describe('barcodeCreateBarCode', function() {
        it('should call barcodeCreateBarCode successfully', function(done) {
          // TODO: uncomment, update parameter values for barcodeCreateBarCode call
          /*
          var model = new DkPlusApi.DkPlusAPIModelsProductInventoryBarcode();
          model.code = "";
          model.itemCode = "";
          model.quantity = 0.0;

          instance.barcodeCreateBarCode(model, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('barcodeGetBarcode', function() {
        it('should call barcodeGetBarcode successfully', function(done) {
          // TODO: uncomment, update parameter values for barcodeGetBarcode call and complete the assertions
          /*
          var id = "id_example";

          instance.barcodeGetBarcode(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.itemCode).to.be.a('string');
            expect(data.itemCode).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.description2).to.be.a('string');
            expect(data.description2).to.be("");
            expect(data.inactive).to.be.a('boolean');
            expect(data.inactive).to.be(false);
            expect(data.recordCreated).to.be.a(Date);
            expect(data.recordCreated).to.be(new Date());
            expect(data.recordModified).to.be.a(Date);
            expect(data.recordModified).to.be(new Date());
            expect(data.objectDate).to.be.a(Date);
            expect(data.objectDate).to.be(new Date());
            expect(data.aliasItemCode).to.be.a('string');
            expect(data.aliasItemCode).to.be("");
            expect(data.itemClass).to.be.a('number');
            expect(data.itemClass).to.be(0);
            expect(data.unitCode).to.be.a('string');
            expect(data.unitCode).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.unitQuantity).to.be.a('number');
            expect(data.unitQuantity).to.be(0.0);
            expect(data.netWeight).to.be.a('number');
            expect(data.netWeight).to.be(0.0);
            expect(data.unitVolume).to.be.a('number');
            expect(data.unitVolume).to.be(0.0);
            expect(data.totalQuantityInWarehouse).to.be.a('number');
            expect(data.totalQuantityInWarehouse).to.be(0.0);
            expect(data.purchasePrice).to.be.a('number');
            expect(data.purchasePrice).to.be(0.0);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.unitPrice1).to.be.a('number');
            expect(data.unitPrice1).to.be(0.0);
            expect(data.purchasefactor).to.be.a('number');
            expect(data.purchasefactor).to.be(0.0);
            expect(data.costPrice).to.be.a('number');
            expect(data.costPrice).to.be(0.0);
            expect(data.profitRatio1).to.be.a('number');
            expect(data.profitRatio1).to.be(0.0);
            expect(data.unitPrice1WithTax).to.be.a('number');
            expect(data.unitPrice1WithTax).to.be(0.0);
            expect(data.unitPrice2).to.be.a('number');
            expect(data.unitPrice2).to.be(0.0);
            expect(data.unitPrice3WithTax).to.be.a('number');
            expect(data.unitPrice3WithTax).to.be(0.0);
            expect(data.showItemInWebShop).to.be.a('boolean');
            expect(data.showItemInWebShop).to.be(false);
            expect(data.allowDiscount).to.be.a('boolean');
            expect(data.allowDiscount).to.be(false);
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.unitPrice2WithTax).to.be.a('number');
            expect(data.unitPrice2WithTax).to.be(0.0);
            expect(data.unitPrice3).to.be.a('number');
            expect(data.unitPrice3).to.be(0.0);
            expect(data.propositionPrice).to.be.a('number');
            expect(data.propositionPrice).to.be(0.0);
            expect(data.propositionDateTo).to.be.a(Date);
            expect(data.propositionDateTo).to.be(new Date());
            expect(data.extraDesc1).to.be.a('string');
            expect(data.extraDesc1).to.be("");
            expect(data.extraDesc2).to.be.a('string');
            expect(data.extraDesc2).to.be("");
            expect(data.isVariation).to.be.a('boolean');
            expect(data.isVariation).to.be(false);
            expect(data.variation).to.be.a('string');
            expect(data.variation).to.be("");
            expect(data.taxPercent).to.be.a('number');
            expect(data.taxPercent).to.be(0.0);
            expect(data.salesTaxCode).to.be.a('string');
            expect(data.salesTaxCode).to.be("");
            expect(data.salesLedgerCode).to.be.a('string');
            expect(data.salesLedgerCode).to.be("");
            expect(data.purchaseTaxCode).to.be.a('string');
            expect(data.purchaseTaxCode).to.be("");
            expect(data.purchaseLedgerCode).to.be.a('string');
            expect(data.purchaseLedgerCode).to.be("");
            expect(data.allowNegativeInventiry).to.be.a('boolean');
            expect(data.allowNegativeInventiry).to.be(false);
            expect(data.discountQuantity).to.be.a('number');
            expect(data.discountQuantity).to.be(0.0);
            expect(data.maxDiscountAllowed).to.be.a('number');
            expect(data.maxDiscountAllowed).to.be(0.0);
            expect(data.defaultSaleQuantity).to.be.a('number');
            expect(data.defaultSaleQuantity).to.be(0.0);
            expect(data.extraFeeItemCode).to.be.a('string');
            expect(data.extraFeeItemCode).to.be("");
            expect(data.costMethod).to.be.a('string');
            expect(data.costMethod).to.be("None");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.hasAttachments).to.be.a('boolean');
            expect(data.hasAttachments).to.be(false);
            expect(data.hasBarcodes).to.be.a('boolean');
            expect(data.hasBarcodes).to.be(false);
            expect(data.hasCurrencyPrices).to.be.a('boolean');
            expect(data.hasCurrencyPrices).to.be(false);
            expect(data.hasUnits).to.be.a('boolean');
            expect(data.hasUnits).to.be(false);
            expect(data.hasAlternative).to.be.a('boolean');
            expect(data.hasAlternative).to.be(false);
            {
              let dataCtr = data.barcodes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                expect(data.barcode).to.be.a('string');
                expect(data.barcode).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.isExtraBarcode).to.be.a('boolean');
                expect(data.isExtraBarcode).to.be(false);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.attachments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                expect(data.ID).to.be.a('number');
                expect(data.ID).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.linked).to.be.a(Date);
                expect(data.linked).to.be(new Date());
                expect(data.mD5Hash).to.be.a('string');
                expect(data.mD5Hash).to.be("");
                expect(data.showOnWeb).to.be.a('boolean');
                expect(data.showOnWeb).to.be(false);

                      }
            }
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                expect(data.ID).to.be.a('string');
                expect(data.ID).to.be("");
                {
                  let dataCtr = data.subCategories;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                    expect(data.ID).to.be.a('string');
                    expect(data.ID).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);

                      }
            }
            {
              let dataCtr = data.warehouses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.subGroup3).to.be.a('string');
                expect(data.subGroup3).to.be("");
                expect(data.subGroup4).to.be.a('string');
                expect(data.subGroup4).to.be("");
                expect(data.quantityInStock).to.be.a('number');
                expect(data.quantityInStock).to.be(0.0);
                expect(data.minimumStock).to.be.a('number');
                expect(data.minimumStock).to.be(0.0);
                expect(data.maximumStock).to.be.a('number');
                expect(data.maximumStock).to.be(0.0);
                expect(data.locationInWarehouse).to.be.a('string');
                expect(data.locationInWarehouse).to.be("");
                expect(data.quantityOnBackOrders).to.be.a('number');
                expect(data.quantityOnBackOrders).to.be(0.0);
                expect(data.quantityPoOrders).to.be.a('number');
                expect(data.quantityPoOrders).to.be(0.0);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.description2).to.be.a('string');
                    expect(data.description2).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
                    expect(data.quantityOnBackOrders).to.be.a('number');
                    expect(data.quantityOnBackOrders).to.be(0.0);
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.currencyPrices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                expect(data.currencyCode).to.be.a('string');
                expect(data.currencyCode).to.be("");
                expect(data.price1).to.be.a('number');
                expect(data.price1).to.be(0.0);
                expect(data.price2).to.be.a('number');
                expect(data.price2).to.be(0.0);
                expect(data.price3).to.be.a('number');
                expect(data.price3).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.units;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.unitQuantity).to.be.a('number');
                expect(data.unitQuantity).to.be(0.0);
                expect(data.defaultSaleQuantity).to.be.a('number');
                expect(data.defaultSaleQuantity).to.be(0.0);
                expect(data.unitPriceRatio).to.be.a('number');
                expect(data.unitPriceRatio).to.be(0.0);
                expect(data.netWeight).to.be.a('number');
                expect(data.netWeight).to.be(0.0);
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.quantityOnHand).to.be.a('number');
                expect(data.quantityOnHand).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.alternative;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");

                      }
            }
            {
              let dataCtr = data.changes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.by).to.be.a('string');
                expect(data.by).to.be("");
                {
                  let dataCtr = data.fields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.memos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                expect(data.pageName).to.be.a('string');
                expect(data.pageName).to.be("");
                expect(data.plainText).to.be.a('string');
                expect(data.plainText).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.recordID).to.be.a('number');
                expect(data.recordID).to.be("0");

                      }
            }
            {
              let dataCtr = data.vendors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.vendor).to.be.a('string');
                expect(data.vendor).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.primarySupplier).to.be.a('boolean');
                expect(data.primarySupplier).to.be(false);
                expect(data.lastPurchasedDate).to.be.a(Date);
                expect(data.lastPurchasedDate).to.be(new Date());
                expect(data.lastPurchasedPrice).to.be.a('number');
                expect(data.lastPurchasedPrice).to.be(0.0);
                expect(data.lastPurchasedQuantity).to.be.a('number');
                expect(data.lastPurchasedQuantity).to.be(0.0);
                expect(data.purchasedDiscount).to.be.a('number');
                expect(data.purchasedDiscount).to.be(0.0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productCreateProduct', function() {
        it('should call productCreateProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for productCreateProduct call and complete the assertions
          /*
          var value = new DkPlusApi.DkCloudDataModelProductsProductModel();
          value.recordID = 0;
          value.itemCode = "";
          value.description = "";
          value.description2 = "";
          value.inactive = false;
          value.recordCreated = new Date();
          value.recordModified = new Date();
          value.objectDate = new Date();
          value.aliasItemCode = "";
          value.itemClass = 0;
          value.unitCode = "";
          value.group = "";
          value.unitQuantity = 0.0;
          value.netWeight = 0.0;
          value.unitVolume = 0.0;
          value.totalQuantityInWarehouse = 0.0;
          value.purchasePrice = 0.0;
          value.currencyCode = "";
          value.exchange = 0.0;
          value.unitPrice1 = 0.0;
          value.purchasefactor = 0.0;
          value.costPrice = 0.0;
          value.profitRatio1 = 0.0;
          value.unitPrice1WithTax = 0.0;
          value.unitPrice2 = 0.0;
          value.unitPrice3WithTax = 0.0;
          value.showItemInWebShop = false;
          value.allowDiscount = false;
          value.discount = 0.0;
          value.unitPrice2WithTax = 0.0;
          value.unitPrice3 = 0.0;
          value.propositionPrice = 0.0;
          value.propositionDateTo = new Date();
          value.extraDesc1 = "";
          value.extraDesc2 = "";
          value.isVariation = false;
          value.variation = "";
          value.taxPercent = 0.0;
          value.salesTaxCode = "";
          value.salesLedgerCode = "";
          value.purchaseTaxCode = "";
          value.purchaseLedgerCode = "";
          value.allowNegativeInventiry = false;
          value.discountQuantity = 0.0;
          value.maxDiscountAllowed = 0.0;
          value.defaultSaleQuantity = 0.0;
          value.extraFeeItemCode = "";
          value.costMethod = "None";
          value.dim1 = "";
          value.dim2 = "";
          value.dim3 = "";
          value.deleted = false;
          value.barcodes = [new DkPlusApi.DkCloudDataModelProductsBarcodesModel()];
          value.barcodes[0].barcode = "";
          value.barcodes[0].quantity = 0.0;
          value.barcodes[0].subGroup1 = "";
          value.barcodes[0].subGroup2 = "";
          value.barcodes[0].unitCode = "";
          value.barcodes[0].isExtraBarcode = false;
          value.barcodes[0].modified = new Date();
          value.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          value.attachments[0].ID = 0;
          value.attachments[0].name = "";
          value.attachments[0].size = 0;
          value.attachments[0].linked = new Date();
          value.attachments[0].mD5Hash = "";
          value.attachments[0].showOnWeb = false;
          value.categories = [new DkPlusApi.DkCloudDataModelProductsCategoriesModel()];
          value.categories[0].ID = "";
          value.categories[0].subCategories = [new DkPlusApi.DkCloudDataModelProductsSubCategoryModel()];
          value.categories[0].subCategories[0].ID = "";
          value.categories[0].subCategories[0].description = "";
          value.categories[0].description = "";
          value.categories[0].isActive = false;
          value.warehouses = [new DkPlusApi.DkCloudDataModelProductsProductWarehouseModel()];
          value.warehouses[0].warehouse = "";
          value.warehouses[0].subGroup1 = "";
          value.warehouses[0].subGroup2 = "";
          value.warehouses[0].subGroup3 = "";
          value.warehouses[0].subGroup4 = "";
          value.warehouses[0].quantityInStock = 0.0;
          value.warehouses[0].minimumStock = 0.0;
          value.warehouses[0].maximumStock = 0.0;
          value.warehouses[0].locationInWarehouse = "";
          value.warehouses[0].quantityOnBackOrders = 0.0;
          value.warehouses[0].quantityPoOrders = 0.0;
          value.warehouses[0].modified = new Date();
          value.warehouses[0].variations = [new DkPlusApi.DkCloudDataModelProductsVariationModel()];
          value.warehouses[0].variations[0].code = "";
          value.warehouses[0].variations[0].code2 = "";
          value.warehouses[0].variations[0].description = "";
          value.warehouses[0].variations[0].description2 = "";
          value.warehouses[0].variations[0].quantity = 0.0;
          value.warehouses[0].variations[0].quantityOnBackOrders = 0.0;
          value.currencyPrices = [new DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel()];
          value.currencyPrices[0].currencyCode = "";
          value.currencyPrices[0].price1 = 0.0;
          value.currencyPrices[0].price2 = 0.0;
          value.currencyPrices[0].price3 = 0.0;
          value.units = [new DkPlusApi.DkCloudDataModelProductsProductUnitModel()];
          value.units[0].unitCode = "";
          value.units[0].unitQuantity = 0.0;
          value.units[0].defaultSaleQuantity = 0.0;
          value.units[0].unitPriceRatio = 0.0;
          value.units[0].netWeight = 0.0;
          value.units[0].unitPrice = 0.0;
          value.units[0].unitPriceWithTax = 0.0;
          value.units[0].quantityOnHand = 0.0;
          value.alternative = [new DkPlusApi.DkCloudDataModelProductsAlternativeProductModel()];
          value.alternative[0].itemCode = "";
          value.changes = [new DkPlusApi.DkCloudDataModelGeneralChangesModel()];
          value.changes[0].modified = new Date();
          value.changes[0].by = "";
          value.changes[0].fields = [new DkPlusApi.DkCloudDataModelGeneralFieldChangeModel()];
          value.changes[0].fields[0].name = "";
          value.changes[0].fields[0].value = "";
          value.memos = [new DkPlusApi.DkCloudDataModelProductsProductMemo()];
          value.memos[0].pageName = "";
          value.memos[0].plainText = "";
          value.memos[0].modified = new Date();
          value.memos[0].recordID = "0";
          value.vendors = [new DkPlusApi.DkCloudDataModelProductsProductVendor()];
          value.vendors[0].itemCode = "";
          value.vendors[0].vendor = "";
          value.vendors[0].description = "";
          value.vendors[0].primarySupplier = false;
          value.vendors[0].lastPurchasedDate = new Date();
          value.vendors[0].lastPurchasedPrice = 0.0;
          value.vendors[0].lastPurchasedQuantity = 0.0;
          value.vendors[0].purchasedDiscount = 0.0;
          value.vendors[0].price = 0.0;

          instance.productCreateProduct(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.itemCode).to.be.a('string');
            expect(data.itemCode).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.description2).to.be.a('string');
            expect(data.description2).to.be("");
            expect(data.inactive).to.be.a('boolean');
            expect(data.inactive).to.be(false);
            expect(data.recordCreated).to.be.a(Date);
            expect(data.recordCreated).to.be(new Date());
            expect(data.recordModified).to.be.a(Date);
            expect(data.recordModified).to.be(new Date());
            expect(data.objectDate).to.be.a(Date);
            expect(data.objectDate).to.be(new Date());
            expect(data.aliasItemCode).to.be.a('string');
            expect(data.aliasItemCode).to.be("");
            expect(data.itemClass).to.be.a('number');
            expect(data.itemClass).to.be(0);
            expect(data.unitCode).to.be.a('string');
            expect(data.unitCode).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.unitQuantity).to.be.a('number');
            expect(data.unitQuantity).to.be(0.0);
            expect(data.netWeight).to.be.a('number');
            expect(data.netWeight).to.be(0.0);
            expect(data.unitVolume).to.be.a('number');
            expect(data.unitVolume).to.be(0.0);
            expect(data.totalQuantityInWarehouse).to.be.a('number');
            expect(data.totalQuantityInWarehouse).to.be(0.0);
            expect(data.purchasePrice).to.be.a('number');
            expect(data.purchasePrice).to.be(0.0);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.unitPrice1).to.be.a('number');
            expect(data.unitPrice1).to.be(0.0);
            expect(data.purchasefactor).to.be.a('number');
            expect(data.purchasefactor).to.be(0.0);
            expect(data.costPrice).to.be.a('number');
            expect(data.costPrice).to.be(0.0);
            expect(data.profitRatio1).to.be.a('number');
            expect(data.profitRatio1).to.be(0.0);
            expect(data.unitPrice1WithTax).to.be.a('number');
            expect(data.unitPrice1WithTax).to.be(0.0);
            expect(data.unitPrice2).to.be.a('number');
            expect(data.unitPrice2).to.be(0.0);
            expect(data.unitPrice3WithTax).to.be.a('number');
            expect(data.unitPrice3WithTax).to.be(0.0);
            expect(data.showItemInWebShop).to.be.a('boolean');
            expect(data.showItemInWebShop).to.be(false);
            expect(data.allowDiscount).to.be.a('boolean');
            expect(data.allowDiscount).to.be(false);
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.unitPrice2WithTax).to.be.a('number');
            expect(data.unitPrice2WithTax).to.be(0.0);
            expect(data.unitPrice3).to.be.a('number');
            expect(data.unitPrice3).to.be(0.0);
            expect(data.propositionPrice).to.be.a('number');
            expect(data.propositionPrice).to.be(0.0);
            expect(data.propositionDateTo).to.be.a(Date);
            expect(data.propositionDateTo).to.be(new Date());
            expect(data.extraDesc1).to.be.a('string');
            expect(data.extraDesc1).to.be("");
            expect(data.extraDesc2).to.be.a('string');
            expect(data.extraDesc2).to.be("");
            expect(data.isVariation).to.be.a('boolean');
            expect(data.isVariation).to.be(false);
            expect(data.variation).to.be.a('string');
            expect(data.variation).to.be("");
            expect(data.taxPercent).to.be.a('number');
            expect(data.taxPercent).to.be(0.0);
            expect(data.salesTaxCode).to.be.a('string');
            expect(data.salesTaxCode).to.be("");
            expect(data.salesLedgerCode).to.be.a('string');
            expect(data.salesLedgerCode).to.be("");
            expect(data.purchaseTaxCode).to.be.a('string');
            expect(data.purchaseTaxCode).to.be("");
            expect(data.purchaseLedgerCode).to.be.a('string');
            expect(data.purchaseLedgerCode).to.be("");
            expect(data.allowNegativeInventiry).to.be.a('boolean');
            expect(data.allowNegativeInventiry).to.be(false);
            expect(data.discountQuantity).to.be.a('number');
            expect(data.discountQuantity).to.be(0.0);
            expect(data.maxDiscountAllowed).to.be.a('number');
            expect(data.maxDiscountAllowed).to.be(0.0);
            expect(data.defaultSaleQuantity).to.be.a('number');
            expect(data.defaultSaleQuantity).to.be(0.0);
            expect(data.extraFeeItemCode).to.be.a('string');
            expect(data.extraFeeItemCode).to.be("");
            expect(data.costMethod).to.be.a('string');
            expect(data.costMethod).to.be("None");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.hasAttachments).to.be.a('boolean');
            expect(data.hasAttachments).to.be(false);
            expect(data.hasBarcodes).to.be.a('boolean');
            expect(data.hasBarcodes).to.be(false);
            expect(data.hasCurrencyPrices).to.be.a('boolean');
            expect(data.hasCurrencyPrices).to.be(false);
            expect(data.hasUnits).to.be.a('boolean');
            expect(data.hasUnits).to.be(false);
            expect(data.hasAlternative).to.be.a('boolean');
            expect(data.hasAlternative).to.be(false);
            {
              let dataCtr = data.barcodes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                expect(data.barcode).to.be.a('string');
                expect(data.barcode).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.isExtraBarcode).to.be.a('boolean');
                expect(data.isExtraBarcode).to.be(false);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.attachments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                expect(data.ID).to.be.a('number');
                expect(data.ID).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.linked).to.be.a(Date);
                expect(data.linked).to.be(new Date());
                expect(data.mD5Hash).to.be.a('string');
                expect(data.mD5Hash).to.be("");
                expect(data.showOnWeb).to.be.a('boolean');
                expect(data.showOnWeb).to.be(false);

                      }
            }
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                expect(data.ID).to.be.a('string');
                expect(data.ID).to.be("");
                {
                  let dataCtr = data.subCategories;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                    expect(data.ID).to.be.a('string');
                    expect(data.ID).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);

                      }
            }
            {
              let dataCtr = data.warehouses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.subGroup3).to.be.a('string');
                expect(data.subGroup3).to.be("");
                expect(data.subGroup4).to.be.a('string');
                expect(data.subGroup4).to.be("");
                expect(data.quantityInStock).to.be.a('number');
                expect(data.quantityInStock).to.be(0.0);
                expect(data.minimumStock).to.be.a('number');
                expect(data.minimumStock).to.be(0.0);
                expect(data.maximumStock).to.be.a('number');
                expect(data.maximumStock).to.be(0.0);
                expect(data.locationInWarehouse).to.be.a('string');
                expect(data.locationInWarehouse).to.be("");
                expect(data.quantityOnBackOrders).to.be.a('number');
                expect(data.quantityOnBackOrders).to.be(0.0);
                expect(data.quantityPoOrders).to.be.a('number');
                expect(data.quantityPoOrders).to.be(0.0);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.description2).to.be.a('string');
                    expect(data.description2).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
                    expect(data.quantityOnBackOrders).to.be.a('number');
                    expect(data.quantityOnBackOrders).to.be(0.0);
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.currencyPrices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                expect(data.currencyCode).to.be.a('string');
                expect(data.currencyCode).to.be("");
                expect(data.price1).to.be.a('number');
                expect(data.price1).to.be(0.0);
                expect(data.price2).to.be.a('number');
                expect(data.price2).to.be(0.0);
                expect(data.price3).to.be.a('number');
                expect(data.price3).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.units;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.unitQuantity).to.be.a('number');
                expect(data.unitQuantity).to.be(0.0);
                expect(data.defaultSaleQuantity).to.be.a('number');
                expect(data.defaultSaleQuantity).to.be(0.0);
                expect(data.unitPriceRatio).to.be.a('number');
                expect(data.unitPriceRatio).to.be(0.0);
                expect(data.netWeight).to.be.a('number');
                expect(data.netWeight).to.be(0.0);
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.quantityOnHand).to.be.a('number');
                expect(data.quantityOnHand).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.alternative;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");

                      }
            }
            {
              let dataCtr = data.changes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.by).to.be.a('string');
                expect(data.by).to.be("");
                {
                  let dataCtr = data.fields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.memos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                expect(data.pageName).to.be.a('string');
                expect(data.pageName).to.be("");
                expect(data.plainText).to.be.a('string');
                expect(data.plainText).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.recordID).to.be.a('number');
                expect(data.recordID).to.be("0");

                      }
            }
            {
              let dataCtr = data.vendors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.vendor).to.be.a('string');
                expect(data.vendor).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.primarySupplier).to.be.a('boolean');
                expect(data.primarySupplier).to.be(false);
                expect(data.lastPurchasedDate).to.be.a(Date);
                expect(data.lastPurchasedDate).to.be(new Date());
                expect(data.lastPurchasedPrice).to.be.a('number');
                expect(data.lastPurchasedPrice).to.be(0.0);
                expect(data.lastPurchasedQuantity).to.be.a('number');
                expect(data.lastPurchasedQuantity).to.be(0.0);
                expect(data.purchasedDiscount).to.be.a('number');
                expect(data.purchasedDiscount).to.be(0.0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productDeleteProduct', function() {
        it('should call productDeleteProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for productDeleteProduct call
          /*
          var id = "id_example";
          var opts = {};
          opts.isBase64 = true;

          instance.productDeleteProduct(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetModified', function() {
        it('should call productGetModified successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetModified call and complete the assertions
          /*
          var modified = new Date("2013-10-20T19:20:30+01:00");
          var page = 56;
          var count = 56;
          var opts = {};
          opts.detailed = new Date("2013-10-20T19:20:30+01:00");
          opts.inactive = true;
          opts.onweb = true;
          opts.group = "group_example";
          opts.warehouse = "warehouse_example";
          opts.include = "include_example";

          instance.productGetModified(modified, page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.description2).to.be.a('string');
              expect(data.description2).to.be("");
              expect(data.inactive).to.be.a('boolean');
              expect(data.inactive).to.be(false);
              expect(data.recordCreated).to.be.a(Date);
              expect(data.recordCreated).to.be(new Date());
              expect(data.recordModified).to.be.a(Date);
              expect(data.recordModified).to.be(new Date());
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.aliasItemCode).to.be.a('string');
              expect(data.aliasItemCode).to.be("");
              expect(data.itemClass).to.be.a('number');
              expect(data.itemClass).to.be(0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.unitQuantity).to.be.a('number');
              expect(data.unitQuantity).to.be(0.0);
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.totalQuantityInWarehouse).to.be.a('number');
              expect(data.totalQuantityInWarehouse).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.unitPrice1).to.be.a('number');
              expect(data.unitPrice1).to.be(0.0);
              expect(data.purchasefactor).to.be.a('number');
              expect(data.purchasefactor).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.profitRatio1).to.be.a('number');
              expect(data.profitRatio1).to.be(0.0);
              expect(data.unitPrice1WithTax).to.be.a('number');
              expect(data.unitPrice1WithTax).to.be(0.0);
              expect(data.unitPrice2).to.be.a('number');
              expect(data.unitPrice2).to.be(0.0);
              expect(data.unitPrice3WithTax).to.be.a('number');
              expect(data.unitPrice3WithTax).to.be(0.0);
              expect(data.showItemInWebShop).to.be.a('boolean');
              expect(data.showItemInWebShop).to.be(false);
              expect(data.allowDiscount).to.be.a('boolean');
              expect(data.allowDiscount).to.be(false);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.unitPrice2WithTax).to.be.a('number');
              expect(data.unitPrice2WithTax).to.be(0.0);
              expect(data.unitPrice3).to.be.a('number');
              expect(data.unitPrice3).to.be(0.0);
              expect(data.propositionPrice).to.be.a('number');
              expect(data.propositionPrice).to.be(0.0);
              expect(data.propositionDateTo).to.be.a(Date);
              expect(data.propositionDateTo).to.be(new Date());
              expect(data.extraDesc1).to.be.a('string');
              expect(data.extraDesc1).to.be("");
              expect(data.extraDesc2).to.be.a('string');
              expect(data.extraDesc2).to.be("");
              expect(data.isVariation).to.be.a('boolean');
              expect(data.isVariation).to.be(false);
              expect(data.variation).to.be.a('string');
              expect(data.variation).to.be("");
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.salesTaxCode).to.be.a('string');
              expect(data.salesTaxCode).to.be("");
              expect(data.salesLedgerCode).to.be.a('string');
              expect(data.salesLedgerCode).to.be("");
              expect(data.purchaseTaxCode).to.be.a('string');
              expect(data.purchaseTaxCode).to.be("");
              expect(data.purchaseLedgerCode).to.be.a('string');
              expect(data.purchaseLedgerCode).to.be("");
              expect(data.allowNegativeInventiry).to.be.a('boolean');
              expect(data.allowNegativeInventiry).to.be(false);
              expect(data.discountQuantity).to.be.a('number');
              expect(data.discountQuantity).to.be(0.0);
              expect(data.maxDiscountAllowed).to.be.a('number');
              expect(data.maxDiscountAllowed).to.be(0.0);
              expect(data.defaultSaleQuantity).to.be.a('number');
              expect(data.defaultSaleQuantity).to.be(0.0);
              expect(data.extraFeeItemCode).to.be.a('string');
              expect(data.extraFeeItemCode).to.be("");
              expect(data.costMethod).to.be.a('string');
              expect(data.costMethod).to.be("None");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.hasAttachments).to.be.a('boolean');
              expect(data.hasAttachments).to.be(false);
              expect(data.hasBarcodes).to.be.a('boolean');
              expect(data.hasBarcodes).to.be(false);
              expect(data.hasCurrencyPrices).to.be.a('boolean');
              expect(data.hasCurrencyPrices).to.be(false);
              expect(data.hasUnits).to.be.a('boolean');
              expect(data.hasUnits).to.be(false);
              expect(data.hasAlternative).to.be.a('boolean');
              expect(data.hasAlternative).to.be(false);
              {
                let dataCtr = data.barcodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                  expect(data.barcode).to.be.a('string');
                  expect(data.barcode).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.isExtraBarcode).to.be.a('boolean');
                  expect(data.isExtraBarcode).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.categories;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  {
                    let dataCtr = data.subCategories;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                      expect(data.ID).to.be.a('string');
                      expect(data.ID).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
      
                            }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.warehouses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.subGroup3).to.be.a('string');
                  expect(data.subGroup3).to.be("");
                  expect(data.subGroup4).to.be.a('string');
                  expect(data.subGroup4).to.be("");
                  expect(data.quantityInStock).to.be.a('number');
                  expect(data.quantityInStock).to.be(0.0);
                  expect(data.minimumStock).to.be.a('number');
                  expect(data.minimumStock).to.be(0.0);
                  expect(data.maximumStock).to.be.a('number');
                  expect(data.maximumStock).to.be(0.0);
                  expect(data.locationInWarehouse).to.be.a('string');
                  expect(data.locationInWarehouse).to.be("");
                  expect(data.quantityOnBackOrders).to.be.a('number');
                  expect(data.quantityOnBackOrders).to.be(0.0);
                  expect(data.quantityPoOrders).to.be.a('number');
                  expect(data.quantityPoOrders).to.be(0.0);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.currencyPrices;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                  expect(data.currencyCode).to.be.a('string');
                  expect(data.currencyCode).to.be("");
                  expect(data.price1).to.be.a('number');
                  expect(data.price1).to.be(0.0);
                  expect(data.price2).to.be.a('number');
                  expect(data.price2).to.be(0.0);
                  expect(data.price3).to.be.a('number');
                  expect(data.price3).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.units;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.defaultSaleQuantity).to.be.a('number');
                  expect(data.defaultSaleQuantity).to.be(0.0);
                  expect(data.unitPriceRatio).to.be.a('number');
                  expect(data.unitPriceRatio).to.be(0.0);
                  expect(data.netWeight).to.be.a('number');
                  expect(data.netWeight).to.be(0.0);
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.quantityOnHand).to.be.a('number');
                  expect(data.quantityOnHand).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.alternative;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.vendors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.vendor).to.be.a('string');
                  expect(data.vendor).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.primarySupplier).to.be.a('boolean');
                  expect(data.primarySupplier).to.be(false);
                  expect(data.lastPurchasedDate).to.be.a(Date);
                  expect(data.lastPurchasedDate).to.be(new Date());
                  expect(data.lastPurchasedPrice).to.be.a('number');
                  expect(data.lastPurchasedPrice).to.be(0.0);
                  expect(data.lastPurchasedQuantity).to.be.a('number');
                  expect(data.lastPurchasedQuantity).to.be(0.0);
                  expect(data.purchasedDiscount).to.be.a('number');
                  expect(data.purchasedDiscount).to.be(0.0);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductAttachment', function() {
        it('should call productGetProductAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductAttachment call and complete the assertions
          /*
          var itemcode = "itemcode_example";
          var id = 56;
          var opts = {};
          opts.isBase64 = true;

          instance.productGetProductAttachment(itemcode, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductBarCodes', function() {
        it('should call productGetProductBarCodes successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductBarCodes call and complete the assertions
          /*
          var id = "id_example";

          instance.productGetProductBarCodes(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
              expect(data.barcode).to.be.a('string');
              expect(data.barcode).to.be("");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.subGroup1).to.be.a('string');
              expect(data.subGroup1).to.be("");
              expect(data.subGroup2).to.be.a('string');
              expect(data.subGroup2).to.be("");
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.isExtraBarcode).to.be.a('boolean');
              expect(data.isExtraBarcode).to.be(false);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductBarcode', function() {
        it('should call productGetProductBarcode successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductBarcode call and complete the assertions
          /*
          var id = "id_example";
          var barcode = "barcode_example";
          var opts = {};
          opts.isBase64 = true;

          instance.productGetProductBarcode(id, barcode, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
            expect(data.barcode).to.be.a('string');
            expect(data.barcode).to.be("");
            expect(data.quantity).to.be.a('number');
            expect(data.quantity).to.be(0.0);
            expect(data.subGroup1).to.be.a('string');
            expect(data.subGroup1).to.be("");
            expect(data.subGroup2).to.be.a('string');
            expect(data.subGroup2).to.be("");
            expect(data.unitCode).to.be.a('string');
            expect(data.unitCode).to.be("");
            expect(data.isExtraBarcode).to.be.a('boolean');
            expect(data.isExtraBarcode).to.be(false);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductById', function() {
        it('should call productGetProductById successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductById call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.isBase64 = true;

          instance.productGetProductById(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.itemCode).to.be.a('string');
            expect(data.itemCode).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.description2).to.be.a('string');
            expect(data.description2).to.be("");
            expect(data.inactive).to.be.a('boolean');
            expect(data.inactive).to.be(false);
            expect(data.recordCreated).to.be.a(Date);
            expect(data.recordCreated).to.be(new Date());
            expect(data.recordModified).to.be.a(Date);
            expect(data.recordModified).to.be(new Date());
            expect(data.objectDate).to.be.a(Date);
            expect(data.objectDate).to.be(new Date());
            expect(data.aliasItemCode).to.be.a('string');
            expect(data.aliasItemCode).to.be("");
            expect(data.itemClass).to.be.a('number');
            expect(data.itemClass).to.be(0);
            expect(data.unitCode).to.be.a('string');
            expect(data.unitCode).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.unitQuantity).to.be.a('number');
            expect(data.unitQuantity).to.be(0.0);
            expect(data.netWeight).to.be.a('number');
            expect(data.netWeight).to.be(0.0);
            expect(data.unitVolume).to.be.a('number');
            expect(data.unitVolume).to.be(0.0);
            expect(data.totalQuantityInWarehouse).to.be.a('number');
            expect(data.totalQuantityInWarehouse).to.be(0.0);
            expect(data.purchasePrice).to.be.a('number');
            expect(data.purchasePrice).to.be(0.0);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.unitPrice1).to.be.a('number');
            expect(data.unitPrice1).to.be(0.0);
            expect(data.purchasefactor).to.be.a('number');
            expect(data.purchasefactor).to.be(0.0);
            expect(data.costPrice).to.be.a('number');
            expect(data.costPrice).to.be(0.0);
            expect(data.profitRatio1).to.be.a('number');
            expect(data.profitRatio1).to.be(0.0);
            expect(data.unitPrice1WithTax).to.be.a('number');
            expect(data.unitPrice1WithTax).to.be(0.0);
            expect(data.unitPrice2).to.be.a('number');
            expect(data.unitPrice2).to.be(0.0);
            expect(data.unitPrice3WithTax).to.be.a('number');
            expect(data.unitPrice3WithTax).to.be(0.0);
            expect(data.showItemInWebShop).to.be.a('boolean');
            expect(data.showItemInWebShop).to.be(false);
            expect(data.allowDiscount).to.be.a('boolean');
            expect(data.allowDiscount).to.be(false);
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.unitPrice2WithTax).to.be.a('number');
            expect(data.unitPrice2WithTax).to.be(0.0);
            expect(data.unitPrice3).to.be.a('number');
            expect(data.unitPrice3).to.be(0.0);
            expect(data.propositionPrice).to.be.a('number');
            expect(data.propositionPrice).to.be(0.0);
            expect(data.propositionDateTo).to.be.a(Date);
            expect(data.propositionDateTo).to.be(new Date());
            expect(data.extraDesc1).to.be.a('string');
            expect(data.extraDesc1).to.be("");
            expect(data.extraDesc2).to.be.a('string');
            expect(data.extraDesc2).to.be("");
            expect(data.isVariation).to.be.a('boolean');
            expect(data.isVariation).to.be(false);
            expect(data.variation).to.be.a('string');
            expect(data.variation).to.be("");
            expect(data.taxPercent).to.be.a('number');
            expect(data.taxPercent).to.be(0.0);
            expect(data.salesTaxCode).to.be.a('string');
            expect(data.salesTaxCode).to.be("");
            expect(data.salesLedgerCode).to.be.a('string');
            expect(data.salesLedgerCode).to.be("");
            expect(data.purchaseTaxCode).to.be.a('string');
            expect(data.purchaseTaxCode).to.be("");
            expect(data.purchaseLedgerCode).to.be.a('string');
            expect(data.purchaseLedgerCode).to.be("");
            expect(data.allowNegativeInventiry).to.be.a('boolean');
            expect(data.allowNegativeInventiry).to.be(false);
            expect(data.discountQuantity).to.be.a('number');
            expect(data.discountQuantity).to.be(0.0);
            expect(data.maxDiscountAllowed).to.be.a('number');
            expect(data.maxDiscountAllowed).to.be(0.0);
            expect(data.defaultSaleQuantity).to.be.a('number');
            expect(data.defaultSaleQuantity).to.be(0.0);
            expect(data.extraFeeItemCode).to.be.a('string');
            expect(data.extraFeeItemCode).to.be("");
            expect(data.costMethod).to.be.a('string');
            expect(data.costMethod).to.be("None");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.hasAttachments).to.be.a('boolean');
            expect(data.hasAttachments).to.be(false);
            expect(data.hasBarcodes).to.be.a('boolean');
            expect(data.hasBarcodes).to.be(false);
            expect(data.hasCurrencyPrices).to.be.a('boolean');
            expect(data.hasCurrencyPrices).to.be(false);
            expect(data.hasUnits).to.be.a('boolean');
            expect(data.hasUnits).to.be(false);
            expect(data.hasAlternative).to.be.a('boolean');
            expect(data.hasAlternative).to.be(false);
            {
              let dataCtr = data.barcodes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                expect(data.barcode).to.be.a('string');
                expect(data.barcode).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.isExtraBarcode).to.be.a('boolean');
                expect(data.isExtraBarcode).to.be(false);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.attachments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                expect(data.ID).to.be.a('number');
                expect(data.ID).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.linked).to.be.a(Date);
                expect(data.linked).to.be(new Date());
                expect(data.mD5Hash).to.be.a('string');
                expect(data.mD5Hash).to.be("");
                expect(data.showOnWeb).to.be.a('boolean');
                expect(data.showOnWeb).to.be(false);

                      }
            }
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                expect(data.ID).to.be.a('string');
                expect(data.ID).to.be("");
                {
                  let dataCtr = data.subCategories;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                    expect(data.ID).to.be.a('string');
                    expect(data.ID).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);

                      }
            }
            {
              let dataCtr = data.warehouses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.subGroup3).to.be.a('string');
                expect(data.subGroup3).to.be("");
                expect(data.subGroup4).to.be.a('string');
                expect(data.subGroup4).to.be("");
                expect(data.quantityInStock).to.be.a('number');
                expect(data.quantityInStock).to.be(0.0);
                expect(data.minimumStock).to.be.a('number');
                expect(data.minimumStock).to.be(0.0);
                expect(data.maximumStock).to.be.a('number');
                expect(data.maximumStock).to.be(0.0);
                expect(data.locationInWarehouse).to.be.a('string');
                expect(data.locationInWarehouse).to.be("");
                expect(data.quantityOnBackOrders).to.be.a('number');
                expect(data.quantityOnBackOrders).to.be(0.0);
                expect(data.quantityPoOrders).to.be.a('number');
                expect(data.quantityPoOrders).to.be(0.0);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.description2).to.be.a('string');
                    expect(data.description2).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
                    expect(data.quantityOnBackOrders).to.be.a('number');
                    expect(data.quantityOnBackOrders).to.be(0.0);
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.currencyPrices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                expect(data.currencyCode).to.be.a('string');
                expect(data.currencyCode).to.be("");
                expect(data.price1).to.be.a('number');
                expect(data.price1).to.be(0.0);
                expect(data.price2).to.be.a('number');
                expect(data.price2).to.be(0.0);
                expect(data.price3).to.be.a('number');
                expect(data.price3).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.units;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.unitQuantity).to.be.a('number');
                expect(data.unitQuantity).to.be(0.0);
                expect(data.defaultSaleQuantity).to.be.a('number');
                expect(data.defaultSaleQuantity).to.be(0.0);
                expect(data.unitPriceRatio).to.be.a('number');
                expect(data.unitPriceRatio).to.be(0.0);
                expect(data.netWeight).to.be.a('number');
                expect(data.netWeight).to.be(0.0);
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.quantityOnHand).to.be.a('number');
                expect(data.quantityOnHand).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.alternative;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");

                      }
            }
            {
              let dataCtr = data.changes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.by).to.be.a('string');
                expect(data.by).to.be("");
                {
                  let dataCtr = data.fields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.memos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                expect(data.pageName).to.be.a('string');
                expect(data.pageName).to.be("");
                expect(data.plainText).to.be.a('string');
                expect(data.plainText).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.recordID).to.be.a('number');
                expect(data.recordID).to.be("0");

                      }
            }
            {
              let dataCtr = data.vendors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.vendor).to.be.a('string');
                expect(data.vendor).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.primarySupplier).to.be.a('boolean');
                expect(data.primarySupplier).to.be(false);
                expect(data.lastPurchasedDate).to.be.a(Date);
                expect(data.lastPurchasedDate).to.be(new Date());
                expect(data.lastPurchasedPrice).to.be.a('number');
                expect(data.lastPurchasedPrice).to.be(0.0);
                expect(data.lastPurchasedQuantity).to.be.a('number');
                expect(data.lastPurchasedQuantity).to.be(0.0);
                expect(data.purchasedDiscount).to.be.a('number');
                expect(data.purchasedDiscount).to.be(0.0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductCount', function() {
        it('should call productGetProductCount successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductCount call and complete the assertions
          /*
          var opts = {};
          opts.inactive = true;
          opts.onweb = true;
          opts.group = "group_example";
          opts.warehouse = "warehouse_example";
          opts.modified = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");

          instance.productGetProductCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductSearch', function() {
        it('should call productGetProductSearch successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductSearch call and complete the assertions
          /*
          var value = "value_example";
          var max = 56;

          instance.productGetProductSearch(value, max, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.description2).to.be.a('string');
              expect(data.description2).to.be("");
              expect(data.inactive).to.be.a('boolean');
              expect(data.inactive).to.be(false);
              expect(data.recordCreated).to.be.a(Date);
              expect(data.recordCreated).to.be(new Date());
              expect(data.recordModified).to.be.a(Date);
              expect(data.recordModified).to.be(new Date());
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.aliasItemCode).to.be.a('string');
              expect(data.aliasItemCode).to.be("");
              expect(data.itemClass).to.be.a('number');
              expect(data.itemClass).to.be(0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.unitQuantity).to.be.a('number');
              expect(data.unitQuantity).to.be(0.0);
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.totalQuantityInWarehouse).to.be.a('number');
              expect(data.totalQuantityInWarehouse).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.unitPrice1).to.be.a('number');
              expect(data.unitPrice1).to.be(0.0);
              expect(data.purchasefactor).to.be.a('number');
              expect(data.purchasefactor).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.profitRatio1).to.be.a('number');
              expect(data.profitRatio1).to.be(0.0);
              expect(data.unitPrice1WithTax).to.be.a('number');
              expect(data.unitPrice1WithTax).to.be(0.0);
              expect(data.unitPrice2).to.be.a('number');
              expect(data.unitPrice2).to.be(0.0);
              expect(data.unitPrice3WithTax).to.be.a('number');
              expect(data.unitPrice3WithTax).to.be(0.0);
              expect(data.showItemInWebShop).to.be.a('boolean');
              expect(data.showItemInWebShop).to.be(false);
              expect(data.allowDiscount).to.be.a('boolean');
              expect(data.allowDiscount).to.be(false);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.unitPrice2WithTax).to.be.a('number');
              expect(data.unitPrice2WithTax).to.be(0.0);
              expect(data.unitPrice3).to.be.a('number');
              expect(data.unitPrice3).to.be(0.0);
              expect(data.propositionPrice).to.be.a('number');
              expect(data.propositionPrice).to.be(0.0);
              expect(data.propositionDateTo).to.be.a(Date);
              expect(data.propositionDateTo).to.be(new Date());
              expect(data.extraDesc1).to.be.a('string');
              expect(data.extraDesc1).to.be("");
              expect(data.extraDesc2).to.be.a('string');
              expect(data.extraDesc2).to.be("");
              expect(data.isVariation).to.be.a('boolean');
              expect(data.isVariation).to.be(false);
              expect(data.variation).to.be.a('string');
              expect(data.variation).to.be("");
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.salesTaxCode).to.be.a('string');
              expect(data.salesTaxCode).to.be("");
              expect(data.salesLedgerCode).to.be.a('string');
              expect(data.salesLedgerCode).to.be("");
              expect(data.purchaseTaxCode).to.be.a('string');
              expect(data.purchaseTaxCode).to.be("");
              expect(data.purchaseLedgerCode).to.be.a('string');
              expect(data.purchaseLedgerCode).to.be("");
              expect(data.allowNegativeInventiry).to.be.a('boolean');
              expect(data.allowNegativeInventiry).to.be(false);
              expect(data.discountQuantity).to.be.a('number');
              expect(data.discountQuantity).to.be(0.0);
              expect(data.maxDiscountAllowed).to.be.a('number');
              expect(data.maxDiscountAllowed).to.be(0.0);
              expect(data.defaultSaleQuantity).to.be.a('number');
              expect(data.defaultSaleQuantity).to.be(0.0);
              expect(data.extraFeeItemCode).to.be.a('string');
              expect(data.extraFeeItemCode).to.be("");
              expect(data.costMethod).to.be.a('string');
              expect(data.costMethod).to.be("None");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.hasAttachments).to.be.a('boolean');
              expect(data.hasAttachments).to.be(false);
              expect(data.hasBarcodes).to.be.a('boolean');
              expect(data.hasBarcodes).to.be(false);
              expect(data.hasCurrencyPrices).to.be.a('boolean');
              expect(data.hasCurrencyPrices).to.be(false);
              expect(data.hasUnits).to.be.a('boolean');
              expect(data.hasUnits).to.be(false);
              expect(data.hasAlternative).to.be.a('boolean');
              expect(data.hasAlternative).to.be(false);
              {
                let dataCtr = data.barcodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                  expect(data.barcode).to.be.a('string');
                  expect(data.barcode).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.isExtraBarcode).to.be.a('boolean');
                  expect(data.isExtraBarcode).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.categories;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  {
                    let dataCtr = data.subCategories;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                      expect(data.ID).to.be.a('string');
                      expect(data.ID).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
      
                            }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.warehouses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.subGroup3).to.be.a('string');
                  expect(data.subGroup3).to.be("");
                  expect(data.subGroup4).to.be.a('string');
                  expect(data.subGroup4).to.be("");
                  expect(data.quantityInStock).to.be.a('number');
                  expect(data.quantityInStock).to.be(0.0);
                  expect(data.minimumStock).to.be.a('number');
                  expect(data.minimumStock).to.be(0.0);
                  expect(data.maximumStock).to.be.a('number');
                  expect(data.maximumStock).to.be(0.0);
                  expect(data.locationInWarehouse).to.be.a('string');
                  expect(data.locationInWarehouse).to.be("");
                  expect(data.quantityOnBackOrders).to.be.a('number');
                  expect(data.quantityOnBackOrders).to.be(0.0);
                  expect(data.quantityPoOrders).to.be.a('number');
                  expect(data.quantityPoOrders).to.be(0.0);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.currencyPrices;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                  expect(data.currencyCode).to.be.a('string');
                  expect(data.currencyCode).to.be("");
                  expect(data.price1).to.be.a('number');
                  expect(data.price1).to.be(0.0);
                  expect(data.price2).to.be.a('number');
                  expect(data.price2).to.be(0.0);
                  expect(data.price3).to.be.a('number');
                  expect(data.price3).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.units;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.defaultSaleQuantity).to.be.a('number');
                  expect(data.defaultSaleQuantity).to.be(0.0);
                  expect(data.unitPriceRatio).to.be.a('number');
                  expect(data.unitPriceRatio).to.be(0.0);
                  expect(data.netWeight).to.be.a('number');
                  expect(data.netWeight).to.be(0.0);
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.quantityOnHand).to.be.a('number');
                  expect(data.quantityOnHand).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.alternative;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.vendors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.vendor).to.be.a('string');
                  expect(data.vendor).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.primarySupplier).to.be.a('boolean');
                  expect(data.primarySupplier).to.be(false);
                  expect(data.lastPurchasedDate).to.be.a(Date);
                  expect(data.lastPurchasedDate).to.be(new Date());
                  expect(data.lastPurchasedPrice).to.be.a('number');
                  expect(data.lastPurchasedPrice).to.be(0.0);
                  expect(data.lastPurchasedQuantity).to.be.a('number');
                  expect(data.lastPurchasedQuantity).to.be(0.0);
                  expect(data.purchasedDiscount).to.be.a('number');
                  expect(data.purchasedDiscount).to.be(0.0);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductTransactions', function() {
        it('should call productGetProductTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductTransactions call and complete the assertions
          /*
          var id = "id_example";
          var page = 56;
          var count = 56;
          var opts = {};
          opts.isBase64 = true;

          instance.productGetProductTransactions(id, page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsTransactionsModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.origin).to.be.a('string');
              expect(data.origin).to.be("GLJournal");
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be(0);
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.warehouse).to.be.a('string');
              expect(data.warehouse).to.be("");
              expect(data.subGroup1).to.be.a('string');
              expect(data.subGroup1).to.be("");
              expect(data.subGroup2).to.be.a('string');
              expect(data.subGroup2).to.be("");
              expect(data.subGroup3).to.be.a('string');
              expect(data.subGroup3).to.be("");
              expect(data.subGroup4).to.be.a('string');
              expect(data.subGroup4).to.be("");
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.transactionCode).to.be.a('string');
              expect(data.transactionCode).to.be("InTransactionJournal");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("Manual");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.costAmount).to.be.a('number');
              expect(data.costAmount).to.be(0.0);
              expect(data.salesAmount).to.be.a('number');
              expect(data.salesAmount).to.be(0.0);
              expect(data.inventOnHand).to.be.a('number');
              expect(data.inventOnHand).to.be(0.0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.numberOfPackages).to.be.a('number');
              expect(data.numberOfPackages).to.be(0.0);
              expect(data.countedQuantity).to.be.a('number');
              expect(data.countedQuantity).to.be(0.0);
              expect(data.jobNumber).to.be.a('string');
              expect(data.jobNumber).to.be("");
              expect(data.vendorPrice).to.be.a('number');
              expect(data.vendorPrice).to.be(0.0);
              expect(data.vendorDiscount).to.be.a('number');
              expect(data.vendorDiscount).to.be(0.0);
              expect(data.fabrication).to.be.a('number');
              expect(data.fabrication).to.be(0);
              expect(data.batch).to.be.a('string');
              expect(data.batch).to.be("");
              expect(data.batchExpiry).to.be.a(Date);
              expect(data.batchExpiry).to.be(new Date());
              expect(data._typeOf).to.be.a('string');
              expect(data._typeOf).to.be("NotDefined");
              expect(data.purchaseAmount).to.be.a('number');
              expect(data.purchaseAmount).to.be(0.0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.iNPUnitCode).to.be.a('string');
              expect(data.iNPUnitCode).to.be("");
              expect(data.poBatchId).to.be.a('number');
              expect(data.poBatchId).to.be(0);
              expect(data.jobRequestId).to.be.a('string');
              expect(data.jobRequestId).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProducts', function() {
        it('should call productGetProducts successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProducts call and complete the assertions
          /*
          var opts = {};
          opts.inactive = true;
          opts.onweb = true;
          opts.group = "group_example";
          opts.warehouse = "warehouse_example";
          opts.modified = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.include = "include_example";

          instance.productGetProducts(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.description2).to.be.a('string');
              expect(data.description2).to.be("");
              expect(data.inactive).to.be.a('boolean');
              expect(data.inactive).to.be(false);
              expect(data.recordCreated).to.be.a(Date);
              expect(data.recordCreated).to.be(new Date());
              expect(data.recordModified).to.be.a(Date);
              expect(data.recordModified).to.be(new Date());
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.aliasItemCode).to.be.a('string');
              expect(data.aliasItemCode).to.be("");
              expect(data.itemClass).to.be.a('number');
              expect(data.itemClass).to.be(0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.unitQuantity).to.be.a('number');
              expect(data.unitQuantity).to.be(0.0);
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.totalQuantityInWarehouse).to.be.a('number');
              expect(data.totalQuantityInWarehouse).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.unitPrice1).to.be.a('number');
              expect(data.unitPrice1).to.be(0.0);
              expect(data.purchasefactor).to.be.a('number');
              expect(data.purchasefactor).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.profitRatio1).to.be.a('number');
              expect(data.profitRatio1).to.be(0.0);
              expect(data.unitPrice1WithTax).to.be.a('number');
              expect(data.unitPrice1WithTax).to.be(0.0);
              expect(data.unitPrice2).to.be.a('number');
              expect(data.unitPrice2).to.be(0.0);
              expect(data.unitPrice3WithTax).to.be.a('number');
              expect(data.unitPrice3WithTax).to.be(0.0);
              expect(data.showItemInWebShop).to.be.a('boolean');
              expect(data.showItemInWebShop).to.be(false);
              expect(data.allowDiscount).to.be.a('boolean');
              expect(data.allowDiscount).to.be(false);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.unitPrice2WithTax).to.be.a('number');
              expect(data.unitPrice2WithTax).to.be(0.0);
              expect(data.unitPrice3).to.be.a('number');
              expect(data.unitPrice3).to.be(0.0);
              expect(data.propositionPrice).to.be.a('number');
              expect(data.propositionPrice).to.be(0.0);
              expect(data.propositionDateTo).to.be.a(Date);
              expect(data.propositionDateTo).to.be(new Date());
              expect(data.extraDesc1).to.be.a('string');
              expect(data.extraDesc1).to.be("");
              expect(data.extraDesc2).to.be.a('string');
              expect(data.extraDesc2).to.be("");
              expect(data.isVariation).to.be.a('boolean');
              expect(data.isVariation).to.be(false);
              expect(data.variation).to.be.a('string');
              expect(data.variation).to.be("");
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.salesTaxCode).to.be.a('string');
              expect(data.salesTaxCode).to.be("");
              expect(data.salesLedgerCode).to.be.a('string');
              expect(data.salesLedgerCode).to.be("");
              expect(data.purchaseTaxCode).to.be.a('string');
              expect(data.purchaseTaxCode).to.be("");
              expect(data.purchaseLedgerCode).to.be.a('string');
              expect(data.purchaseLedgerCode).to.be("");
              expect(data.allowNegativeInventiry).to.be.a('boolean');
              expect(data.allowNegativeInventiry).to.be(false);
              expect(data.discountQuantity).to.be.a('number');
              expect(data.discountQuantity).to.be(0.0);
              expect(data.maxDiscountAllowed).to.be.a('number');
              expect(data.maxDiscountAllowed).to.be(0.0);
              expect(data.defaultSaleQuantity).to.be.a('number');
              expect(data.defaultSaleQuantity).to.be(0.0);
              expect(data.extraFeeItemCode).to.be.a('string');
              expect(data.extraFeeItemCode).to.be("");
              expect(data.costMethod).to.be.a('string');
              expect(data.costMethod).to.be("None");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.hasAttachments).to.be.a('boolean');
              expect(data.hasAttachments).to.be(false);
              expect(data.hasBarcodes).to.be.a('boolean');
              expect(data.hasBarcodes).to.be(false);
              expect(data.hasCurrencyPrices).to.be.a('boolean');
              expect(data.hasCurrencyPrices).to.be(false);
              expect(data.hasUnits).to.be.a('boolean');
              expect(data.hasUnits).to.be(false);
              expect(data.hasAlternative).to.be.a('boolean');
              expect(data.hasAlternative).to.be(false);
              {
                let dataCtr = data.barcodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                  expect(data.barcode).to.be.a('string');
                  expect(data.barcode).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.isExtraBarcode).to.be.a('boolean');
                  expect(data.isExtraBarcode).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.categories;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  {
                    let dataCtr = data.subCategories;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                      expect(data.ID).to.be.a('string');
                      expect(data.ID).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
      
                            }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.warehouses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.subGroup3).to.be.a('string');
                  expect(data.subGroup3).to.be("");
                  expect(data.subGroup4).to.be.a('string');
                  expect(data.subGroup4).to.be("");
                  expect(data.quantityInStock).to.be.a('number');
                  expect(data.quantityInStock).to.be(0.0);
                  expect(data.minimumStock).to.be.a('number');
                  expect(data.minimumStock).to.be(0.0);
                  expect(data.maximumStock).to.be.a('number');
                  expect(data.maximumStock).to.be(0.0);
                  expect(data.locationInWarehouse).to.be.a('string');
                  expect(data.locationInWarehouse).to.be("");
                  expect(data.quantityOnBackOrders).to.be.a('number');
                  expect(data.quantityOnBackOrders).to.be(0.0);
                  expect(data.quantityPoOrders).to.be.a('number');
                  expect(data.quantityPoOrders).to.be(0.0);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.currencyPrices;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                  expect(data.currencyCode).to.be.a('string');
                  expect(data.currencyCode).to.be("");
                  expect(data.price1).to.be.a('number');
                  expect(data.price1).to.be(0.0);
                  expect(data.price2).to.be.a('number');
                  expect(data.price2).to.be(0.0);
                  expect(data.price3).to.be.a('number');
                  expect(data.price3).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.units;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.defaultSaleQuantity).to.be.a('number');
                  expect(data.defaultSaleQuantity).to.be(0.0);
                  expect(data.unitPriceRatio).to.be.a('number');
                  expect(data.unitPriceRatio).to.be(0.0);
                  expect(data.netWeight).to.be.a('number');
                  expect(data.netWeight).to.be(0.0);
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.quantityOnHand).to.be.a('number');
                  expect(data.quantityOnHand).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.alternative;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.vendors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.vendor).to.be.a('string');
                  expect(data.vendor).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.primarySupplier).to.be.a('boolean');
                  expect(data.primarySupplier).to.be(false);
                  expect(data.lastPurchasedDate).to.be.a(Date);
                  expect(data.lastPurchasedDate).to.be(new Date());
                  expect(data.lastPurchasedPrice).to.be.a('number');
                  expect(data.lastPurchasedPrice).to.be(0.0);
                  expect(data.lastPurchasedQuantity).to.be.a('number');
                  expect(data.lastPurchasedQuantity).to.be(0.0);
                  expect(data.purchasedDiscount).to.be.a('number');
                  expect(data.purchasedDiscount).to.be(0.0);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGetProductsPage', function() {
        it('should call productGetProductsPage successfully', function(done) {
          // TODO: uncomment, update parameter values for productGetProductsPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.inactive = true;
          opts.onweb = true;
          opts.group = "group_example";
          opts.warehouse = "warehouse_example";
          opts.modified = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.deleted = true;
          opts.include = "include_example";

          instance.productGetProductsPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.description2).to.be.a('string');
              expect(data.description2).to.be("");
              expect(data.inactive).to.be.a('boolean');
              expect(data.inactive).to.be(false);
              expect(data.recordCreated).to.be.a(Date);
              expect(data.recordCreated).to.be(new Date());
              expect(data.recordModified).to.be.a(Date);
              expect(data.recordModified).to.be(new Date());
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.aliasItemCode).to.be.a('string');
              expect(data.aliasItemCode).to.be("");
              expect(data.itemClass).to.be.a('number');
              expect(data.itemClass).to.be(0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.unitQuantity).to.be.a('number');
              expect(data.unitQuantity).to.be(0.0);
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.totalQuantityInWarehouse).to.be.a('number');
              expect(data.totalQuantityInWarehouse).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.unitPrice1).to.be.a('number');
              expect(data.unitPrice1).to.be(0.0);
              expect(data.purchasefactor).to.be.a('number');
              expect(data.purchasefactor).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.profitRatio1).to.be.a('number');
              expect(data.profitRatio1).to.be(0.0);
              expect(data.unitPrice1WithTax).to.be.a('number');
              expect(data.unitPrice1WithTax).to.be(0.0);
              expect(data.unitPrice2).to.be.a('number');
              expect(data.unitPrice2).to.be(0.0);
              expect(data.unitPrice3WithTax).to.be.a('number');
              expect(data.unitPrice3WithTax).to.be(0.0);
              expect(data.showItemInWebShop).to.be.a('boolean');
              expect(data.showItemInWebShop).to.be(false);
              expect(data.allowDiscount).to.be.a('boolean');
              expect(data.allowDiscount).to.be(false);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.unitPrice2WithTax).to.be.a('number');
              expect(data.unitPrice2WithTax).to.be(0.0);
              expect(data.unitPrice3).to.be.a('number');
              expect(data.unitPrice3).to.be(0.0);
              expect(data.propositionPrice).to.be.a('number');
              expect(data.propositionPrice).to.be(0.0);
              expect(data.propositionDateTo).to.be.a(Date);
              expect(data.propositionDateTo).to.be(new Date());
              expect(data.extraDesc1).to.be.a('string');
              expect(data.extraDesc1).to.be("");
              expect(data.extraDesc2).to.be.a('string');
              expect(data.extraDesc2).to.be("");
              expect(data.isVariation).to.be.a('boolean');
              expect(data.isVariation).to.be(false);
              expect(data.variation).to.be.a('string');
              expect(data.variation).to.be("");
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.salesTaxCode).to.be.a('string');
              expect(data.salesTaxCode).to.be("");
              expect(data.salesLedgerCode).to.be.a('string');
              expect(data.salesLedgerCode).to.be("");
              expect(data.purchaseTaxCode).to.be.a('string');
              expect(data.purchaseTaxCode).to.be("");
              expect(data.purchaseLedgerCode).to.be.a('string');
              expect(data.purchaseLedgerCode).to.be("");
              expect(data.allowNegativeInventiry).to.be.a('boolean');
              expect(data.allowNegativeInventiry).to.be(false);
              expect(data.discountQuantity).to.be.a('number');
              expect(data.discountQuantity).to.be(0.0);
              expect(data.maxDiscountAllowed).to.be.a('number');
              expect(data.maxDiscountAllowed).to.be(0.0);
              expect(data.defaultSaleQuantity).to.be.a('number');
              expect(data.defaultSaleQuantity).to.be(0.0);
              expect(data.extraFeeItemCode).to.be.a('string');
              expect(data.extraFeeItemCode).to.be("");
              expect(data.costMethod).to.be.a('string');
              expect(data.costMethod).to.be("None");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.hasAttachments).to.be.a('boolean');
              expect(data.hasAttachments).to.be(false);
              expect(data.hasBarcodes).to.be.a('boolean');
              expect(data.hasBarcodes).to.be(false);
              expect(data.hasCurrencyPrices).to.be.a('boolean');
              expect(data.hasCurrencyPrices).to.be(false);
              expect(data.hasUnits).to.be.a('boolean');
              expect(data.hasUnits).to.be(false);
              expect(data.hasAlternative).to.be.a('boolean');
              expect(data.hasAlternative).to.be(false);
              {
                let dataCtr = data.barcodes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                  expect(data.barcode).to.be.a('string');
                  expect(data.barcode).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.isExtraBarcode).to.be.a('boolean');
                  expect(data.isExtraBarcode).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.categories;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  {
                    let dataCtr = data.subCategories;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                      expect(data.ID).to.be.a('string');
                      expect(data.ID).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
      
                            }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.isActive).to.be.a('boolean');
                  expect(data.isActive).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.warehouses;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.subGroup1).to.be.a('string');
                  expect(data.subGroup1).to.be("");
                  expect(data.subGroup2).to.be.a('string');
                  expect(data.subGroup2).to.be("");
                  expect(data.subGroup3).to.be.a('string');
                  expect(data.subGroup3).to.be("");
                  expect(data.subGroup4).to.be.a('string');
                  expect(data.subGroup4).to.be("");
                  expect(data.quantityInStock).to.be.a('number');
                  expect(data.quantityInStock).to.be(0.0);
                  expect(data.minimumStock).to.be.a('number');
                  expect(data.minimumStock).to.be(0.0);
                  expect(data.maximumStock).to.be.a('number');
                  expect(data.maximumStock).to.be(0.0);
                  expect(data.locationInWarehouse).to.be.a('string');
                  expect(data.locationInWarehouse).to.be("");
                  expect(data.quantityOnBackOrders).to.be.a('number');
                  expect(data.quantityOnBackOrders).to.be(0.0);
                  expect(data.quantityPoOrders).to.be.a('number');
                  expect(data.quantityPoOrders).to.be(0.0);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.currencyPrices;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                  expect(data.currencyCode).to.be.a('string');
                  expect(data.currencyCode).to.be("");
                  expect(data.price1).to.be.a('number');
                  expect(data.price1).to.be(0.0);
                  expect(data.price2).to.be.a('number');
                  expect(data.price2).to.be(0.0);
                  expect(data.price3).to.be.a('number');
                  expect(data.price3).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.units;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.defaultSaleQuantity).to.be.a('number');
                  expect(data.defaultSaleQuantity).to.be(0.0);
                  expect(data.unitPriceRatio).to.be.a('number');
                  expect(data.unitPriceRatio).to.be(0.0);
                  expect(data.netWeight).to.be.a('number');
                  expect(data.netWeight).to.be(0.0);
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.quantityOnHand).to.be.a('number');
                  expect(data.quantityOnHand).to.be(0.0);
  
                        }
              }
              {
                let dataCtr = data.alternative;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.vendors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.vendor).to.be.a('string');
                  expect(data.vendor).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.primarySupplier).to.be.a('boolean');
                  expect(data.primarySupplier).to.be(false);
                  expect(data.lastPurchasedDate).to.be.a(Date);
                  expect(data.lastPurchasedDate).to.be(new Date());
                  expect(data.lastPurchasedPrice).to.be.a('number');
                  expect(data.lastPurchasedPrice).to.be(0.0);
                  expect(data.lastPurchasedQuantity).to.be.a('number');
                  expect(data.lastPurchasedQuantity).to.be(0.0);
                  expect(data.purchasedDiscount).to.be.a('number');
                  expect(data.purchasedDiscount).to.be(0.0);
                  expect(data.price).to.be.a('number');
                  expect(data.price).to.be(0.0);
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productGroupGet', function() {
        it('should call productGroupGet successfully', function(done) {
          // TODO: uncomment productGroupGet call and complete the assertions
          /*

          instance.productGroupGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductGroupModel);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.UNSPSC).to.be.a('string');
              expect(data.UNSPSC).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productTransactionGetInventoryTransactionsPage', function() {
        it('should call productTransactionGetInventoryTransactionsPage successfully', function(done) {
          // TODO: uncomment, update parameter values for productTransactionGetInventoryTransactionsPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.itemcode = "itemcode_example";
          opts.warehouse = "warehouse_example";
          opts.currency = "currency_example";
          opts.reference = "reference_example";
          opts.include = "include_example";

          instance.productTransactionGetInventoryTransactionsPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsTransactionsModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.origin).to.be.a('string');
              expect(data.origin).to.be("GLJournal");
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be(0);
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.warehouse).to.be.a('string');
              expect(data.warehouse).to.be("");
              expect(data.subGroup1).to.be.a('string');
              expect(data.subGroup1).to.be("");
              expect(data.subGroup2).to.be.a('string');
              expect(data.subGroup2).to.be("");
              expect(data.subGroup3).to.be.a('string');
              expect(data.subGroup3).to.be("");
              expect(data.subGroup4).to.be.a('string');
              expect(data.subGroup4).to.be("");
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.transactionCode).to.be.a('string');
              expect(data.transactionCode).to.be("InTransactionJournal");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("Manual");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.costAmount).to.be.a('number');
              expect(data.costAmount).to.be(0.0);
              expect(data.salesAmount).to.be.a('number');
              expect(data.salesAmount).to.be(0.0);
              expect(data.inventOnHand).to.be.a('number');
              expect(data.inventOnHand).to.be(0.0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.numberOfPackages).to.be.a('number');
              expect(data.numberOfPackages).to.be(0.0);
              expect(data.countedQuantity).to.be.a('number');
              expect(data.countedQuantity).to.be(0.0);
              expect(data.jobNumber).to.be.a('string');
              expect(data.jobNumber).to.be("");
              expect(data.vendorPrice).to.be.a('number');
              expect(data.vendorPrice).to.be(0.0);
              expect(data.vendorDiscount).to.be.a('number');
              expect(data.vendorDiscount).to.be(0.0);
              expect(data.fabrication).to.be.a('number');
              expect(data.fabrication).to.be(0);
              expect(data.batch).to.be.a('string');
              expect(data.batch).to.be("");
              expect(data.batchExpiry).to.be.a(Date);
              expect(data.batchExpiry).to.be(new Date());
              expect(data._typeOf).to.be.a('string');
              expect(data._typeOf).to.be("NotDefined");
              expect(data.purchaseAmount).to.be.a('number');
              expect(data.purchaseAmount).to.be(0.0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.iNPUnitCode).to.be.a('string');
              expect(data.iNPUnitCode).to.be("");
              expect(data.poBatchId).to.be.a('number');
              expect(data.poBatchId).to.be(0);
              expect(data.jobRequestId).to.be.a('string');
              expect(data.jobRequestId).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productUpdateProduct', function() {
        it('should call productUpdateProduct successfully', function(done) {
          // TODO: uncomment, update parameter values for productUpdateProduct call and complete the assertions
          /*
          var itemcode = "itemcode_example";
          var value = new DkPlusApi.DkCloudDataModelProductsProductModel();
          value.recordID = 0;
          value.itemCode = "";
          value.description = "";
          value.description2 = "";
          value.inactive = false;
          value.recordCreated = new Date();
          value.recordModified = new Date();
          value.objectDate = new Date();
          value.aliasItemCode = "";
          value.itemClass = 0;
          value.unitCode = "";
          value.group = "";
          value.unitQuantity = 0.0;
          value.netWeight = 0.0;
          value.unitVolume = 0.0;
          value.totalQuantityInWarehouse = 0.0;
          value.purchasePrice = 0.0;
          value.currencyCode = "";
          value.exchange = 0.0;
          value.unitPrice1 = 0.0;
          value.purchasefactor = 0.0;
          value.costPrice = 0.0;
          value.profitRatio1 = 0.0;
          value.unitPrice1WithTax = 0.0;
          value.unitPrice2 = 0.0;
          value.unitPrice3WithTax = 0.0;
          value.showItemInWebShop = false;
          value.allowDiscount = false;
          value.discount = 0.0;
          value.unitPrice2WithTax = 0.0;
          value.unitPrice3 = 0.0;
          value.propositionPrice = 0.0;
          value.propositionDateTo = new Date();
          value.extraDesc1 = "";
          value.extraDesc2 = "";
          value.isVariation = false;
          value.variation = "";
          value.taxPercent = 0.0;
          value.salesTaxCode = "";
          value.salesLedgerCode = "";
          value.purchaseTaxCode = "";
          value.purchaseLedgerCode = "";
          value.allowNegativeInventiry = false;
          value.discountQuantity = 0.0;
          value.maxDiscountAllowed = 0.0;
          value.defaultSaleQuantity = 0.0;
          value.extraFeeItemCode = "";
          value.costMethod = "None";
          value.dim1 = "";
          value.dim2 = "";
          value.dim3 = "";
          value.deleted = false;
          value.barcodes = [new DkPlusApi.DkCloudDataModelProductsBarcodesModel()];
          value.barcodes[0].barcode = "";
          value.barcodes[0].quantity = 0.0;
          value.barcodes[0].subGroup1 = "";
          value.barcodes[0].subGroup2 = "";
          value.barcodes[0].unitCode = "";
          value.barcodes[0].isExtraBarcode = false;
          value.barcodes[0].modified = new Date();
          value.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          value.attachments[0].ID = 0;
          value.attachments[0].name = "";
          value.attachments[0].size = 0;
          value.attachments[0].linked = new Date();
          value.attachments[0].mD5Hash = "";
          value.attachments[0].showOnWeb = false;
          value.categories = [new DkPlusApi.DkCloudDataModelProductsCategoriesModel()];
          value.categories[0].ID = "";
          value.categories[0].subCategories = [new DkPlusApi.DkCloudDataModelProductsSubCategoryModel()];
          value.categories[0].subCategories[0].ID = "";
          value.categories[0].subCategories[0].description = "";
          value.categories[0].description = "";
          value.categories[0].isActive = false;
          value.warehouses = [new DkPlusApi.DkCloudDataModelProductsProductWarehouseModel()];
          value.warehouses[0].warehouse = "";
          value.warehouses[0].subGroup1 = "";
          value.warehouses[0].subGroup2 = "";
          value.warehouses[0].subGroup3 = "";
          value.warehouses[0].subGroup4 = "";
          value.warehouses[0].quantityInStock = 0.0;
          value.warehouses[0].minimumStock = 0.0;
          value.warehouses[0].maximumStock = 0.0;
          value.warehouses[0].locationInWarehouse = "";
          value.warehouses[0].quantityOnBackOrders = 0.0;
          value.warehouses[0].quantityPoOrders = 0.0;
          value.warehouses[0].modified = new Date();
          value.warehouses[0].variations = [new DkPlusApi.DkCloudDataModelProductsVariationModel()];
          value.warehouses[0].variations[0].code = "";
          value.warehouses[0].variations[0].code2 = "";
          value.warehouses[0].variations[0].description = "";
          value.warehouses[0].variations[0].description2 = "";
          value.warehouses[0].variations[0].quantity = 0.0;
          value.warehouses[0].variations[0].quantityOnBackOrders = 0.0;
          value.currencyPrices = [new DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel()];
          value.currencyPrices[0].currencyCode = "";
          value.currencyPrices[0].price1 = 0.0;
          value.currencyPrices[0].price2 = 0.0;
          value.currencyPrices[0].price3 = 0.0;
          value.units = [new DkPlusApi.DkCloudDataModelProductsProductUnitModel()];
          value.units[0].unitCode = "";
          value.units[0].unitQuantity = 0.0;
          value.units[0].defaultSaleQuantity = 0.0;
          value.units[0].unitPriceRatio = 0.0;
          value.units[0].netWeight = 0.0;
          value.units[0].unitPrice = 0.0;
          value.units[0].unitPriceWithTax = 0.0;
          value.units[0].quantityOnHand = 0.0;
          value.alternative = [new DkPlusApi.DkCloudDataModelProductsAlternativeProductModel()];
          value.alternative[0].itemCode = "";
          value.changes = [new DkPlusApi.DkCloudDataModelGeneralChangesModel()];
          value.changes[0].modified = new Date();
          value.changes[0].by = "";
          value.changes[0].fields = [new DkPlusApi.DkCloudDataModelGeneralFieldChangeModel()];
          value.changes[0].fields[0].name = "";
          value.changes[0].fields[0].value = "";
          value.memos = [new DkPlusApi.DkCloudDataModelProductsProductMemo()];
          value.memos[0].pageName = "";
          value.memos[0].plainText = "";
          value.memos[0].modified = new Date();
          value.memos[0].recordID = "0";
          value.vendors = [new DkPlusApi.DkCloudDataModelProductsProductVendor()];
          value.vendors[0].itemCode = "";
          value.vendors[0].vendor = "";
          value.vendors[0].description = "";
          value.vendors[0].primarySupplier = false;
          value.vendors[0].lastPurchasedDate = new Date();
          value.vendors[0].lastPurchasedPrice = 0.0;
          value.vendors[0].lastPurchasedQuantity = 0.0;
          value.vendors[0].purchasedDiscount = 0.0;
          value.vendors[0].price = 0.0;
          var opts = {};
          opts.isBase64 = true;

          instance.productUpdateProduct(itemcode, value, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.itemCode).to.be.a('string');
            expect(data.itemCode).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.description2).to.be.a('string');
            expect(data.description2).to.be("");
            expect(data.inactive).to.be.a('boolean');
            expect(data.inactive).to.be(false);
            expect(data.recordCreated).to.be.a(Date);
            expect(data.recordCreated).to.be(new Date());
            expect(data.recordModified).to.be.a(Date);
            expect(data.recordModified).to.be(new Date());
            expect(data.objectDate).to.be.a(Date);
            expect(data.objectDate).to.be(new Date());
            expect(data.aliasItemCode).to.be.a('string');
            expect(data.aliasItemCode).to.be("");
            expect(data.itemClass).to.be.a('number');
            expect(data.itemClass).to.be(0);
            expect(data.unitCode).to.be.a('string');
            expect(data.unitCode).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.unitQuantity).to.be.a('number');
            expect(data.unitQuantity).to.be(0.0);
            expect(data.netWeight).to.be.a('number');
            expect(data.netWeight).to.be(0.0);
            expect(data.unitVolume).to.be.a('number');
            expect(data.unitVolume).to.be(0.0);
            expect(data.totalQuantityInWarehouse).to.be.a('number');
            expect(data.totalQuantityInWarehouse).to.be(0.0);
            expect(data.purchasePrice).to.be.a('number');
            expect(data.purchasePrice).to.be(0.0);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.unitPrice1).to.be.a('number');
            expect(data.unitPrice1).to.be(0.0);
            expect(data.purchasefactor).to.be.a('number');
            expect(data.purchasefactor).to.be(0.0);
            expect(data.costPrice).to.be.a('number');
            expect(data.costPrice).to.be(0.0);
            expect(data.profitRatio1).to.be.a('number');
            expect(data.profitRatio1).to.be(0.0);
            expect(data.unitPrice1WithTax).to.be.a('number');
            expect(data.unitPrice1WithTax).to.be(0.0);
            expect(data.unitPrice2).to.be.a('number');
            expect(data.unitPrice2).to.be(0.0);
            expect(data.unitPrice3WithTax).to.be.a('number');
            expect(data.unitPrice3WithTax).to.be(0.0);
            expect(data.showItemInWebShop).to.be.a('boolean');
            expect(data.showItemInWebShop).to.be(false);
            expect(data.allowDiscount).to.be.a('boolean');
            expect(data.allowDiscount).to.be(false);
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.unitPrice2WithTax).to.be.a('number');
            expect(data.unitPrice2WithTax).to.be(0.0);
            expect(data.unitPrice3).to.be.a('number');
            expect(data.unitPrice3).to.be(0.0);
            expect(data.propositionPrice).to.be.a('number');
            expect(data.propositionPrice).to.be(0.0);
            expect(data.propositionDateTo).to.be.a(Date);
            expect(data.propositionDateTo).to.be(new Date());
            expect(data.extraDesc1).to.be.a('string');
            expect(data.extraDesc1).to.be("");
            expect(data.extraDesc2).to.be.a('string');
            expect(data.extraDesc2).to.be("");
            expect(data.isVariation).to.be.a('boolean');
            expect(data.isVariation).to.be(false);
            expect(data.variation).to.be.a('string');
            expect(data.variation).to.be("");
            expect(data.taxPercent).to.be.a('number');
            expect(data.taxPercent).to.be(0.0);
            expect(data.salesTaxCode).to.be.a('string');
            expect(data.salesTaxCode).to.be("");
            expect(data.salesLedgerCode).to.be.a('string');
            expect(data.salesLedgerCode).to.be("");
            expect(data.purchaseTaxCode).to.be.a('string');
            expect(data.purchaseTaxCode).to.be("");
            expect(data.purchaseLedgerCode).to.be.a('string');
            expect(data.purchaseLedgerCode).to.be("");
            expect(data.allowNegativeInventiry).to.be.a('boolean');
            expect(data.allowNegativeInventiry).to.be(false);
            expect(data.discountQuantity).to.be.a('number');
            expect(data.discountQuantity).to.be(0.0);
            expect(data.maxDiscountAllowed).to.be.a('number');
            expect(data.maxDiscountAllowed).to.be(0.0);
            expect(data.defaultSaleQuantity).to.be.a('number');
            expect(data.defaultSaleQuantity).to.be(0.0);
            expect(data.extraFeeItemCode).to.be.a('string');
            expect(data.extraFeeItemCode).to.be("");
            expect(data.costMethod).to.be.a('string');
            expect(data.costMethod).to.be("None");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.hasAttachments).to.be.a('boolean');
            expect(data.hasAttachments).to.be(false);
            expect(data.hasBarcodes).to.be.a('boolean');
            expect(data.hasBarcodes).to.be(false);
            expect(data.hasCurrencyPrices).to.be.a('boolean');
            expect(data.hasCurrencyPrices).to.be(false);
            expect(data.hasUnits).to.be.a('boolean');
            expect(data.hasUnits).to.be(false);
            expect(data.hasAlternative).to.be.a('boolean');
            expect(data.hasAlternative).to.be(false);
            {
              let dataCtr = data.barcodes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsBarcodesModel);
                expect(data.barcode).to.be.a('string');
                expect(data.barcode).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.isExtraBarcode).to.be.a('boolean');
                expect(data.isExtraBarcode).to.be(false);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.attachments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                expect(data.ID).to.be.a('number');
                expect(data.ID).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.linked).to.be.a(Date);
                expect(data.linked).to.be(new Date());
                expect(data.mD5Hash).to.be.a('string');
                expect(data.mD5Hash).to.be("");
                expect(data.showOnWeb).to.be.a('boolean');
                expect(data.showOnWeb).to.be(false);

                      }
            }
            {
              let dataCtr = data.categories;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCategoriesModel);
                expect(data.ID).to.be.a('string');
                expect(data.ID).to.be("");
                {
                  let dataCtr = data.subCategories;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsSubCategoryModel);
                    expect(data.ID).to.be.a('string');
                    expect(data.ID).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(false);

                      }
            }
            {
              let dataCtr = data.warehouses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.subGroup1).to.be.a('string');
                expect(data.subGroup1).to.be("");
                expect(data.subGroup2).to.be.a('string');
                expect(data.subGroup2).to.be("");
                expect(data.subGroup3).to.be.a('string');
                expect(data.subGroup3).to.be("");
                expect(data.subGroup4).to.be.a('string');
                expect(data.subGroup4).to.be("");
                expect(data.quantityInStock).to.be.a('number');
                expect(data.quantityInStock).to.be(0.0);
                expect(data.minimumStock).to.be.a('number');
                expect(data.minimumStock).to.be(0.0);
                expect(data.maximumStock).to.be.a('number');
                expect(data.maximumStock).to.be(0.0);
                expect(data.locationInWarehouse).to.be.a('string');
                expect(data.locationInWarehouse).to.be("");
                expect(data.quantityOnBackOrders).to.be.a('number');
                expect(data.quantityOnBackOrders).to.be(0.0);
                expect(data.quantityPoOrders).to.be.a('number');
                expect(data.quantityPoOrders).to.be(0.0);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.description2).to.be.a('string');
                    expect(data.description2).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
                    expect(data.quantityOnBackOrders).to.be.a('number');
                    expect(data.quantityOnBackOrders).to.be(0.0);
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.currencyPrices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsCurrencyPriceModel);
                expect(data.currencyCode).to.be.a('string');
                expect(data.currencyCode).to.be("");
                expect(data.price1).to.be.a('number');
                expect(data.price1).to.be(0.0);
                expect(data.price2).to.be.a('number');
                expect(data.price2).to.be(0.0);
                expect(data.price3).to.be.a('number');
                expect(data.price3).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.units;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductUnitModel);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.unitQuantity).to.be.a('number');
                expect(data.unitQuantity).to.be(0.0);
                expect(data.defaultSaleQuantity).to.be.a('number');
                expect(data.defaultSaleQuantity).to.be(0.0);
                expect(data.unitPriceRatio).to.be.a('number');
                expect(data.unitPriceRatio).to.be(0.0);
                expect(data.netWeight).to.be.a('number');
                expect(data.netWeight).to.be(0.0);
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.quantityOnHand).to.be.a('number');
                expect(data.quantityOnHand).to.be(0.0);

                      }
            }
            {
              let dataCtr = data.alternative;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsAlternativeProductModel);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");

                      }
            }
            {
              let dataCtr = data.changes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.by).to.be.a('string');
                expect(data.by).to.be("");
                {
                  let dataCtr = data.fields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.memos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductMemo);
                expect(data.pageName).to.be.a('string');
                expect(data.pageName).to.be("");
                expect(data.plainText).to.be.a('string');
                expect(data.plainText).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.recordID).to.be.a('number');
                expect(data.recordID).to.be("0");

                      }
            }
            {
              let dataCtr = data.vendors;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.vendor).to.be.a('string');
                expect(data.vendor).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.primarySupplier).to.be.a('boolean');
                expect(data.primarySupplier).to.be(false);
                expect(data.lastPurchasedDate).to.be.a(Date);
                expect(data.lastPurchasedDate).to.be(new Date());
                expect(data.lastPurchasedPrice).to.be.a('number');
                expect(data.lastPurchasedPrice).to.be(0.0);
                expect(data.lastPurchasedQuantity).to.be.a('number');
                expect(data.lastPurchasedQuantity).to.be(0.0);
                expect(data.purchasedDiscount).to.be.a('number');
                expect(data.purchasedDiscount).to.be(0.0);
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(0.0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productUploadProductAttachment', function() {
        it('should call productUploadProductAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for productUploadProductAttachment call
          /*
          var itemcode = "itemcode_example";
          var fileModel = new DkPlusApi.DkPlusAPIModelsFile();
          fileModel.name = "";
          fileModel.content = ""undefined;
          var opts = {};
          opts.isBase64 = true;

          instance.productUploadProductAttachment(itemcode, fileModel, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
