/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.MyPagesApi();
  });

  describe('(package)', function() {
    describe('MyPagesApi', function() {
      describe('myPagesCreateInvite', function() {
        it('should call myPagesCreateInvite successfully', function(done) {
          // TODO: uncomment, update parameter values for myPagesCreateInvite call and complete the assertions
          /*
          var obj = new DkPlusApi.DkPlusAPIModelsMyPageInviteCreate();
          obj.email = "";
          obj.customer = "";
          obj.expires = new Date();
          obj.role = "User";

          instance.myPagesCreateInvite(obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelInviteInviteModel);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.customer).to.be.a('string');
            expect(data.customer).to.be("");
            expect(data.invitedBy).to.be.a('string');
            expect(data.invitedBy).to.be("");
            expect(data.inviteType).to.be.a('string');
            expect(data.inviteType).to.be("MyPage");
            expect(data.expires).to.be.a(Date);
            expect(data.expires).to.be(new Date());
            expect(data.cancelledBy).to.be.a('string');
            expect(data.cancelledBy).to.be("");
            expect(data.confirmed).to.be.a(Date);
            expect(data.confirmed).to.be(new Date());
            expect(data.extraInfo).to.be.a('string');
            expect(data.extraInfo).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('myPagesGetInvitesForCustomer', function() {
        it('should call myPagesGetInvitesForCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for myPagesGetInvitesForCustomer call and complete the assertions
          /*
          var customer = "customer_example";

          instance.myPagesGetInvitesForCustomer(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsMyPageInvite);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("");
            expect(data.expires).to.be.a(Date);
            expect(data.expires).to.be(new Date());
            expect(data.revoked).to.be.a('boolean');
            expect(data.revoked).to.be(false);
            expect(data.confirmed).to.be.a('boolean');
            expect(data.confirmed).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('myPagesRemoveInvite', function() {
        it('should call myPagesRemoveInvite successfully', function(done) {
          // TODO: uncomment, update parameter values for myPagesRemoveInvite call
          /*
          var id = "id_example";
          var opts = {};
          opts.permanent = true;

          instance.myPagesRemoveInvite(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
