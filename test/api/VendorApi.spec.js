/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.VendorApi();
  });

  describe('(package)', function() {
    describe('VendorApi', function() {
      describe('vendorCreateVendor', function() {
        it('should call vendorCreateVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorCreateVendor call
          /*
          var obj = new DkPlusApi.DkCloudDataModelVendorsVendorModel();
          obj._number = "";
          obj.recordID = 0;
          obj.created = new Date();
          obj.modified = new Date();
          obj.sSNumber = "";
          obj.name = "";
          obj.address1 = "";
          obj.address2 = "";
          obj.address3 = "";
          obj.address4 = "";
          obj.group = "";
          obj.tag = "";
          obj.blocked = false;
          obj.approve = new DkPlusApi.DkCloudDataModelVendorsVendorApprove();
          obj.approve.approver1 = "";
          obj.approve.approver2 = "";
          obj.approve.approver3 = "";
          obj.creditMax = 0.0;
          obj.creditLimit = 0.0;
          obj.bankInfo = new DkPlusApi.DkCloudDataModelGeneralBankAccountModel();
          obj.bankInfo.code = "";
          obj.bankInfo.owner = "";
          obj.bankInfo.ownerName = "";
          obj.bankInfo.accountType = "";
          obj.bankInfo.accountGroup = "";
          obj.bankInfo.account = "";
          obj.handleBankInfo = new DkPlusApi.DkCloudDataModelGeneralBankAccountModel();
          obj.handleBankInfo.code = "";
          obj.handleBankInfo.owner = "";
          obj.handleBankInfo.ownerName = "";
          obj.handleBankInfo.accountType = "";
          obj.handleBankInfo.accountGroup = "";
          obj.handleBankInfo.account = "";
          obj.zipCode = "";
          obj.city = "";
          obj.phone = "";
          obj.phoneLocal = "";
          obj.phoneMobile = "";
          obj.fax = "";
          obj.countryCode = "";
          obj.countyCode = "";
          obj.email = "";
          obj.discount = 0.0;
          obj.paymentMode = "";
          obj.paymentTerm = "";
          obj.currencyCode = "";
          obj.currencyFixed = false;
          obj.useCurrency = false;
          obj.noVat = false;
          obj.vATNumber = "";
          obj.disableTax = false;
          obj.ledgerCode = "";
          obj.balance = 0.0;
          obj.dimmentions = new DkPlusApi.DkCloudDataModelVendorsVendorDimmentions();
          obj.dimmentions.dim1 = "";
          obj.dimmentions.dim2 = "";
          obj.dimmentions.dim3 = "";
          obj.expenses = new DkPlusApi.DkCloudDataModelVendorsVendorExpenses();
          obj.expenses.account = "";
          obj.expenses.dim1 = "";
          obj.expenses.dim2 = "";
          obj.expenses.accountVAT2 = "";
          obj.expenses.accountVAT3 = "";
          obj.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          obj.attachments[0].ID = 0;
          obj.attachments[0].name = "";
          obj.attachments[0].size = 0;
          obj.attachments[0].linked = new Date();
          obj.attachments[0].mD5Hash = "";
          obj.attachments[0].showOnWeb = false;
          obj.memos = [new DkPlusApi.DkCloudDataModelVendorsVendorMemoModel()];
          obj.memos[0].pageName = "";
          obj.memos[0].plainText = "";
          obj.memos[0].modified = new Date();
          obj.memos[0].recordID = "0";

          instance.vendorCreateVendor(obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorGetVendorByID', function() {
        it('should call vendorGetVendorByID successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorGetVendorByID call and complete the assertions
          /*
          var id = "id_example";

          instance.vendorGetVendorByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.address3).to.be.a('string');
            expect(data.address3).to.be("");
            expect(data.address4).to.be.a('string');
            expect(data.address4).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.blocked).to.be.a('boolean');
            expect(data.blocked).to.be(false);
            expect(data.approve).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorApprove);
                  expect(data.approve.approver1).to.be.a('string');
              expect(data.approve.approver1).to.be("");
              expect(data.approve.approver2).to.be.a('string');
              expect(data.approve.approver2).to.be("");
              expect(data.approve.approver3).to.be.a('string');
              expect(data.approve.approver3).to.be("");
            expect(data.creditMax).to.be.a('number');
            expect(data.creditMax).to.be(0.0);
            expect(data.creditLimit).to.be.a('number');
            expect(data.creditLimit).to.be(0.0);
            expect(data.bankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                  expect(data.bankInfo.code).to.be.a('string');
              expect(data.bankInfo.code).to.be("");
              expect(data.bankInfo.owner).to.be.a('string');
              expect(data.bankInfo.owner).to.be("");
              expect(data.bankInfo.ownerName).to.be.a('string');
              expect(data.bankInfo.ownerName).to.be("");
              expect(data.bankInfo.accountType).to.be.a('string');
              expect(data.bankInfo.accountType).to.be("");
              expect(data.bankInfo.accountGroup).to.be.a('string');
              expect(data.bankInfo.accountGroup).to.be("");
              expect(data.bankInfo.account).to.be.a('string');
              expect(data.bankInfo.account).to.be("");
            expect(data.handleBankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                  expect(data.handleBankInfo.code).to.be.a('string');
              expect(data.handleBankInfo.code).to.be("");
              expect(data.handleBankInfo.owner).to.be.a('string');
              expect(data.handleBankInfo.owner).to.be("");
              expect(data.handleBankInfo.ownerName).to.be.a('string');
              expect(data.handleBankInfo.ownerName).to.be("");
              expect(data.handleBankInfo.accountType).to.be.a('string');
              expect(data.handleBankInfo.accountType).to.be("");
              expect(data.handleBankInfo.accountGroup).to.be.a('string');
              expect(data.handleBankInfo.accountGroup).to.be("");
              expect(data.handleBankInfo.account).to.be.a('string');
              expect(data.handleBankInfo.account).to.be("");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.phoneLocal).to.be.a('string');
            expect(data.phoneLocal).to.be("");
            expect(data.phoneMobile).to.be.a('string');
            expect(data.phoneMobile).to.be("");
            expect(data.fax).to.be.a('string');
            expect(data.fax).to.be("");
            expect(data.countryCode).to.be.a('string');
            expect(data.countryCode).to.be("");
            expect(data.countyCode).to.be.a('string');
            expect(data.countyCode).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.currencyFixed).to.be.a('boolean');
            expect(data.currencyFixed).to.be(false);
            expect(data.useCurrency).to.be.a('boolean');
            expect(data.useCurrency).to.be(false);
            expect(data.noVat).to.be.a('boolean');
            expect(data.noVat).to.be(false);
            expect(data.vATNumber).to.be.a('string');
            expect(data.vATNumber).to.be("");
            expect(data.disableTax).to.be.a('boolean');
            expect(data.disableTax).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.balance).to.be.a('number');
            expect(data.balance).to.be(0.0);
            expect(data.dimmentions).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorDimmentions);
                  expect(data.dimmentions.dim1).to.be.a('string');
              expect(data.dimmentions.dim1).to.be("");
              expect(data.dimmentions.dim2).to.be.a('string');
              expect(data.dimmentions.dim2).to.be("");
              expect(data.dimmentions.dim3).to.be.a('string');
              expect(data.dimmentions.dim3).to.be("");
            expect(data.expenses).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorExpenses);
                  expect(data.expenses.account).to.be.a('string');
              expect(data.expenses.account).to.be("");
              expect(data.expenses.dim1).to.be.a('string');
              expect(data.expenses.dim1).to.be("");
              expect(data.expenses.dim2).to.be.a('string');
              expect(data.expenses.dim2).to.be("");
              expect(data.expenses.accountVAT2).to.be.a('string');
              expect(data.expenses.accountVAT2).to.be("");
              expect(data.expenses.accountVAT3).to.be.a('string');
              expect(data.expenses.accountVAT3).to.be("");
            {
              let dataCtr = data.attachments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                expect(data.ID).to.be.a('number');
                expect(data.ID).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.linked).to.be.a(Date);
                expect(data.linked).to.be(new Date());
                expect(data.mD5Hash).to.be.a('string');
                expect(data.mD5Hash).to.be("");
                expect(data.showOnWeb).to.be.a('boolean');
                expect(data.showOnWeb).to.be(false);

                      }
            }
            {
              let dataCtr = data.memos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorMemoModel);
                expect(data.pageName).to.be.a('string');
                expect(data.pageName).to.be("");
                expect(data.plainText).to.be.a('string');
                expect(data.plainText).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.recordID).to.be.a('number');
                expect(data.recordID).to.be("0");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorGetVendors', function() {
        it('should call vendorGetVendors successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorGetVendors call and complete the assertions
          /*
          var opts = {};
          opts.zipCode = "zipCode_example";
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.group = "group_example";

          instance.vendorGetVendors(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.sSNumber).to.be.a('string');
              expect(data.sSNumber).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.address4).to.be.a('string');
              expect(data.address4).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.tag).to.be.a('string');
              expect(data.tag).to.be("");
              expect(data.blocked).to.be.a('boolean');
              expect(data.blocked).to.be(false);
              expect(data.approve).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorApprove);
                    expect(data.approve.approver1).to.be.a('string');
                expect(data.approve.approver1).to.be("");
                expect(data.approve.approver2).to.be.a('string');
                expect(data.approve.approver2).to.be("");
                expect(data.approve.approver3).to.be.a('string');
                expect(data.approve.approver3).to.be("");
              expect(data.creditMax).to.be.a('number');
              expect(data.creditMax).to.be(0.0);
              expect(data.creditLimit).to.be.a('number');
              expect(data.creditLimit).to.be(0.0);
              expect(data.bankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                    expect(data.bankInfo.code).to.be.a('string');
                expect(data.bankInfo.code).to.be("");
                expect(data.bankInfo.owner).to.be.a('string');
                expect(data.bankInfo.owner).to.be("");
                expect(data.bankInfo.ownerName).to.be.a('string');
                expect(data.bankInfo.ownerName).to.be("");
                expect(data.bankInfo.accountType).to.be.a('string');
                expect(data.bankInfo.accountType).to.be("");
                expect(data.bankInfo.accountGroup).to.be.a('string');
                expect(data.bankInfo.accountGroup).to.be("");
                expect(data.bankInfo.account).to.be.a('string');
                expect(data.bankInfo.account).to.be("");
              expect(data.handleBankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                    expect(data.handleBankInfo.code).to.be.a('string');
                expect(data.handleBankInfo.code).to.be("");
                expect(data.handleBankInfo.owner).to.be.a('string');
                expect(data.handleBankInfo.owner).to.be("");
                expect(data.handleBankInfo.ownerName).to.be.a('string');
                expect(data.handleBankInfo.ownerName).to.be("");
                expect(data.handleBankInfo.accountType).to.be.a('string');
                expect(data.handleBankInfo.accountType).to.be("");
                expect(data.handleBankInfo.accountGroup).to.be.a('string');
                expect(data.handleBankInfo.accountGroup).to.be("");
                expect(data.handleBankInfo.account).to.be.a('string');
                expect(data.handleBankInfo.account).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.city).to.be.a('string');
              expect(data.city).to.be("");
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.fax).to.be.a('string');
              expect(data.fax).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.countyCode).to.be.a('string');
              expect(data.countyCode).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.currencyFixed).to.be.a('boolean');
              expect(data.currencyFixed).to.be(false);
              expect(data.useCurrency).to.be.a('boolean');
              expect(data.useCurrency).to.be(false);
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.vATNumber).to.be.a('string');
              expect(data.vATNumber).to.be("");
              expect(data.disableTax).to.be.a('boolean');
              expect(data.disableTax).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.balance).to.be.a('number');
              expect(data.balance).to.be(0.0);
              expect(data.dimmentions).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorDimmentions);
                    expect(data.dimmentions.dim1).to.be.a('string');
                expect(data.dimmentions.dim1).to.be("");
                expect(data.dimmentions.dim2).to.be.a('string');
                expect(data.dimmentions.dim2).to.be("");
                expect(data.dimmentions.dim3).to.be.a('string');
                expect(data.dimmentions.dim3).to.be("");
              expect(data.expenses).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorExpenses);
                    expect(data.expenses.account).to.be.a('string');
                expect(data.expenses.account).to.be("");
                expect(data.expenses.dim1).to.be.a('string');
                expect(data.expenses.dim1).to.be("");
                expect(data.expenses.dim2).to.be.a('string');
                expect(data.expenses.dim2).to.be("");
                expect(data.expenses.accountVAT2).to.be.a('string');
                expect(data.expenses.accountVAT2).to.be("");
                expect(data.expenses.accountVAT3).to.be.a('string');
                expect(data.expenses.accountVAT3).to.be("");
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorGetVendorsPage', function() {
        it('should call vendorGetVendorsPage successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorGetVendorsPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;

          instance.vendorGetVendorsPage(page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.sSNumber).to.be.a('string');
              expect(data.sSNumber).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.address4).to.be.a('string');
              expect(data.address4).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.tag).to.be.a('string');
              expect(data.tag).to.be("");
              expect(data.blocked).to.be.a('boolean');
              expect(data.blocked).to.be(false);
              expect(data.approve).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorApprove);
                    expect(data.approve.approver1).to.be.a('string');
                expect(data.approve.approver1).to.be("");
                expect(data.approve.approver2).to.be.a('string');
                expect(data.approve.approver2).to.be("");
                expect(data.approve.approver3).to.be.a('string');
                expect(data.approve.approver3).to.be("");
              expect(data.creditMax).to.be.a('number');
              expect(data.creditMax).to.be(0.0);
              expect(data.creditLimit).to.be.a('number');
              expect(data.creditLimit).to.be(0.0);
              expect(data.bankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                    expect(data.bankInfo.code).to.be.a('string');
                expect(data.bankInfo.code).to.be("");
                expect(data.bankInfo.owner).to.be.a('string');
                expect(data.bankInfo.owner).to.be("");
                expect(data.bankInfo.ownerName).to.be.a('string');
                expect(data.bankInfo.ownerName).to.be("");
                expect(data.bankInfo.accountType).to.be.a('string');
                expect(data.bankInfo.accountType).to.be("");
                expect(data.bankInfo.accountGroup).to.be.a('string');
                expect(data.bankInfo.accountGroup).to.be("");
                expect(data.bankInfo.account).to.be.a('string');
                expect(data.bankInfo.account).to.be("");
              expect(data.handleBankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                    expect(data.handleBankInfo.code).to.be.a('string');
                expect(data.handleBankInfo.code).to.be("");
                expect(data.handleBankInfo.owner).to.be.a('string');
                expect(data.handleBankInfo.owner).to.be("");
                expect(data.handleBankInfo.ownerName).to.be.a('string');
                expect(data.handleBankInfo.ownerName).to.be("");
                expect(data.handleBankInfo.accountType).to.be.a('string');
                expect(data.handleBankInfo.accountType).to.be("");
                expect(data.handleBankInfo.accountGroup).to.be.a('string');
                expect(data.handleBankInfo.accountGroup).to.be("");
                expect(data.handleBankInfo.account).to.be.a('string');
                expect(data.handleBankInfo.account).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.city).to.be.a('string');
              expect(data.city).to.be("");
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.fax).to.be.a('string');
              expect(data.fax).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.countyCode).to.be.a('string');
              expect(data.countyCode).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.currencyFixed).to.be.a('boolean');
              expect(data.currencyFixed).to.be(false);
              expect(data.useCurrency).to.be.a('boolean');
              expect(data.useCurrency).to.be(false);
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.vATNumber).to.be.a('string');
              expect(data.vATNumber).to.be("");
              expect(data.disableTax).to.be.a('boolean');
              expect(data.disableTax).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.balance).to.be.a('number');
              expect(data.balance).to.be(0.0);
              expect(data.dimmentions).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorDimmentions);
                    expect(data.dimmentions.dim1).to.be.a('string');
                expect(data.dimmentions.dim1).to.be("");
                expect(data.dimmentions.dim2).to.be.a('string');
                expect(data.dimmentions.dim2).to.be("");
                expect(data.dimmentions.dim3).to.be.a('string');
                expect(data.dimmentions.dim3).to.be("");
              expect(data.expenses).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorExpenses);
                    expect(data.expenses.account).to.be.a('string');
                expect(data.expenses.account).to.be("");
                expect(data.expenses.dim1).to.be.a('string');
                expect(data.expenses.dim1).to.be("");
                expect(data.expenses.dim2).to.be.a('string');
                expect(data.expenses.dim2).to.be("");
                expect(data.expenses.accountVAT2).to.be.a('string');
                expect(data.expenses.accountVAT2).to.be("");
                expect(data.expenses.accountVAT3).to.be.a('string');
                expect(data.expenses.accountVAT3).to.be("");
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorSearchVendors', function() {
        it('should call vendorSearchVendors successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorSearchVendors call and complete the assertions
          /*
          var value = "value_example";
          var max = 56;

          instance.vendorSearchVendors(value, max, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.sSNumber).to.be.a('string');
              expect(data.sSNumber).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.address4).to.be.a('string');
              expect(data.address4).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.tag).to.be.a('string');
              expect(data.tag).to.be("");
              expect(data.blocked).to.be.a('boolean');
              expect(data.blocked).to.be(false);
              expect(data.approve).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorApprove);
                    expect(data.approve.approver1).to.be.a('string');
                expect(data.approve.approver1).to.be("");
                expect(data.approve.approver2).to.be.a('string');
                expect(data.approve.approver2).to.be("");
                expect(data.approve.approver3).to.be.a('string');
                expect(data.approve.approver3).to.be("");
              expect(data.creditMax).to.be.a('number');
              expect(data.creditMax).to.be(0.0);
              expect(data.creditLimit).to.be.a('number');
              expect(data.creditLimit).to.be(0.0);
              expect(data.bankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                    expect(data.bankInfo.code).to.be.a('string');
                expect(data.bankInfo.code).to.be("");
                expect(data.bankInfo.owner).to.be.a('string');
                expect(data.bankInfo.owner).to.be("");
                expect(data.bankInfo.ownerName).to.be.a('string');
                expect(data.bankInfo.ownerName).to.be("");
                expect(data.bankInfo.accountType).to.be.a('string');
                expect(data.bankInfo.accountType).to.be("");
                expect(data.bankInfo.accountGroup).to.be.a('string');
                expect(data.bankInfo.accountGroup).to.be("");
                expect(data.bankInfo.account).to.be.a('string');
                expect(data.bankInfo.account).to.be("");
              expect(data.handleBankInfo).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                    expect(data.handleBankInfo.code).to.be.a('string');
                expect(data.handleBankInfo.code).to.be("");
                expect(data.handleBankInfo.owner).to.be.a('string');
                expect(data.handleBankInfo.owner).to.be("");
                expect(data.handleBankInfo.ownerName).to.be.a('string');
                expect(data.handleBankInfo.ownerName).to.be("");
                expect(data.handleBankInfo.accountType).to.be.a('string');
                expect(data.handleBankInfo.accountType).to.be("");
                expect(data.handleBankInfo.accountGroup).to.be.a('string');
                expect(data.handleBankInfo.accountGroup).to.be("");
                expect(data.handleBankInfo.account).to.be.a('string');
                expect(data.handleBankInfo.account).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.city).to.be.a('string');
              expect(data.city).to.be("");
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.fax).to.be.a('string');
              expect(data.fax).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.countyCode).to.be.a('string');
              expect(data.countyCode).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.currencyFixed).to.be.a('boolean');
              expect(data.currencyFixed).to.be(false);
              expect(data.useCurrency).to.be.a('boolean');
              expect(data.useCurrency).to.be(false);
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.vATNumber).to.be.a('string');
              expect(data.vATNumber).to.be("");
              expect(data.disableTax).to.be.a('boolean');
              expect(data.disableTax).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.balance).to.be.a('number');
              expect(data.balance).to.be(0.0);
              expect(data.dimmentions).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorDimmentions);
                    expect(data.dimmentions.dim1).to.be.a('string');
                expect(data.dimmentions.dim1).to.be("");
                expect(data.dimmentions.dim2).to.be.a('string');
                expect(data.dimmentions.dim2).to.be("");
                expect(data.dimmentions.dim3).to.be.a('string');
                expect(data.dimmentions.dim3).to.be("");
              expect(data.expenses).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorExpenses);
                    expect(data.expenses.account).to.be.a('string');
                expect(data.expenses.account).to.be("");
                expect(data.expenses.dim1).to.be.a('string');
                expect(data.expenses.dim1).to.be("");
                expect(data.expenses.dim2).to.be.a('string');
                expect(data.expenses.dim2).to.be("");
                expect(data.expenses.accountVAT2).to.be.a('string');
                expect(data.expenses.accountVAT2).to.be("");
                expect(data.expenses.accountVAT3).to.be.a('string');
                expect(data.expenses.accountVAT3).to.be("");
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorTransactionGetVendorTransactions', function() {
        it('should call vendorTransactionGetVendorTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorTransactionGetVendorTransactions call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;

          instance.vendorTransactionGetVendorTransactions(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsTransaction);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.ledgerAccount).to.be.a('string');
              expect(data.ledgerAccount).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("GeneralLedger");
              expect(data.journalHeadType).to.be.a('string');
              expect(data.journalHeadType).to.be("Manual");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.currencyAmount).to.be.a('number');
              expect(data.currencyAmount).to.be(0.0);
              expect(data.settleAmount).to.be.a('number');
              expect(data.settleAmount).to.be(0.0);
              expect(data.settledCurrencyAmount).to.be.a('number');
              expect(data.settledCurrencyAmount).to.be(0.0);
              expect(data.settleId).to.be.a('number');
              expect(data.settleId).to.be(0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.origin).to.be.a('string');
              expect(data.origin).to.be("GLJournal");
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("Ordinary");
              expect(data.transactionType).to.be.a('string');
              expect(data.transactionType).to.be("Debit");
              expect(data.recordType).to.be.a('string');
              expect(data.recordType).to.be("DebitJournal");
              expect(data.paymentSlip).to.be.a('string');
              expect(data.paymentSlip).to.be("BankTransfer");
              expect(data.paymentStatus).to.be.a('string');
              expect(data.paymentStatus).to.be("StatusNone");
              expect(data.journalHeadCode).to.be.a('string');
              expect(data.journalHeadCode).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorTransactionGetVendorTransactionsForVendor', function() {
        it('should call vendorTransactionGetVendorTransactionsForVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorTransactionGetVendorTransactionsForVendor call and complete the assertions
          /*
          var vendor = "vendor_example";
          var page = 56;
          var count = 56;

          instance.vendorTransactionGetVendorTransactionsForVendor(vendor, page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsTransaction);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.ledgerAccount).to.be.a('string');
              expect(data.ledgerAccount).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("GeneralLedger");
              expect(data.journalHeadType).to.be.a('string');
              expect(data.journalHeadType).to.be("Manual");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.currencyAmount).to.be.a('number');
              expect(data.currencyAmount).to.be(0.0);
              expect(data.settleAmount).to.be.a('number');
              expect(data.settleAmount).to.be(0.0);
              expect(data.settledCurrencyAmount).to.be.a('number');
              expect(data.settledCurrencyAmount).to.be(0.0);
              expect(data.settleId).to.be.a('number');
              expect(data.settleId).to.be(0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.origin).to.be.a('string');
              expect(data.origin).to.be("GLJournal");
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("Ordinary");
              expect(data.transactionType).to.be.a('string');
              expect(data.transactionType).to.be("Debit");
              expect(data.recordType).to.be.a('string');
              expect(data.recordType).to.be("DebitJournal");
              expect(data.paymentSlip).to.be.a('string');
              expect(data.paymentSlip).to.be("BankTransfer");
              expect(data.paymentStatus).to.be.a('string');
              expect(data.paymentStatus).to.be("StatusNone");
              expect(data.journalHeadCode).to.be.a('string');
              expect(data.journalHeadCode).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorUpdateVendor', function() {
        it('should call vendorUpdateVendor successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorUpdateVendor call
          /*
          var _number = "_number_example";
          var obj = new DkPlusApi.DkCloudDataModelVendorsVendorModel();
          obj._number = "";
          obj.recordID = 0;
          obj.created = new Date();
          obj.modified = new Date();
          obj.sSNumber = "";
          obj.name = "";
          obj.address1 = "";
          obj.address2 = "";
          obj.address3 = "";
          obj.address4 = "";
          obj.group = "";
          obj.tag = "";
          obj.blocked = false;
          obj.approve = new DkPlusApi.DkCloudDataModelVendorsVendorApprove();
          obj.approve.approver1 = "";
          obj.approve.approver2 = "";
          obj.approve.approver3 = "";
          obj.creditMax = 0.0;
          obj.creditLimit = 0.0;
          obj.bankInfo = new DkPlusApi.DkCloudDataModelGeneralBankAccountModel();
          obj.bankInfo.code = "";
          obj.bankInfo.owner = "";
          obj.bankInfo.ownerName = "";
          obj.bankInfo.accountType = "";
          obj.bankInfo.accountGroup = "";
          obj.bankInfo.account = "";
          obj.handleBankInfo = new DkPlusApi.DkCloudDataModelGeneralBankAccountModel();
          obj.handleBankInfo.code = "";
          obj.handleBankInfo.owner = "";
          obj.handleBankInfo.ownerName = "";
          obj.handleBankInfo.accountType = "";
          obj.handleBankInfo.accountGroup = "";
          obj.handleBankInfo.account = "";
          obj.zipCode = "";
          obj.city = "";
          obj.phone = "";
          obj.phoneLocal = "";
          obj.phoneMobile = "";
          obj.fax = "";
          obj.countryCode = "";
          obj.countyCode = "";
          obj.email = "";
          obj.discount = 0.0;
          obj.paymentMode = "";
          obj.paymentTerm = "";
          obj.currencyCode = "";
          obj.currencyFixed = false;
          obj.useCurrency = false;
          obj.noVat = false;
          obj.vATNumber = "";
          obj.disableTax = false;
          obj.ledgerCode = "";
          obj.balance = 0.0;
          obj.dimmentions = new DkPlusApi.DkCloudDataModelVendorsVendorDimmentions();
          obj.dimmentions.dim1 = "";
          obj.dimmentions.dim2 = "";
          obj.dimmentions.dim3 = "";
          obj.expenses = new DkPlusApi.DkCloudDataModelVendorsVendorExpenses();
          obj.expenses.account = "";
          obj.expenses.dim1 = "";
          obj.expenses.dim2 = "";
          obj.expenses.accountVAT2 = "";
          obj.expenses.accountVAT3 = "";
          obj.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          obj.attachments[0].ID = 0;
          obj.attachments[0].name = "";
          obj.attachments[0].size = 0;
          obj.attachments[0].linked = new Date();
          obj.attachments[0].mD5Hash = "";
          obj.attachments[0].showOnWeb = false;
          obj.memos = [new DkPlusApi.DkCloudDataModelVendorsVendorMemoModel()];
          obj.memos[0].pageName = "";
          obj.memos[0].plainText = "";
          obj.memos[0].modified = new Date();
          obj.memos[0].recordID = "0";

          instance.vendorUpdateVendor(_number, obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
