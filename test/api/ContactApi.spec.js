/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.ContactApi();
  });

  describe('(package)', function() {
    describe('ContactApi', function() {
      describe('contactCreateContact', function() {
        it('should call contactCreateContact successfully', function(done) {
          // TODO: uncomment, update parameter values for contactCreateContact call
          /*
          var customer = "customer_example";
          var value = new DkPlusApi.DkCloudDataModelCustomersContactModel();
          value._number = "";
          value.name = "";
          value.title = "";
          value.address1 = "";
          value.address2 = "";
          value.address3 = "";
          value.city = "";
          value.zipCode = "";
          value.countryCode = "";
          value.department = "";
          value.sSNumber = "";
          value.phone = "";
          value.phoneLocal = "";
          value.phoneMobile = "";
          value.fax = "";
          value.telex = "";
          value.email = "";
          value.URL = "";
          value.jobTitleCode = "";
          value.modified = new Date();

          instance.contactCreateContact(customer, value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('contactDelete', function() {
        it('should call contactDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for contactDelete call
          /*
          var customer = "customer_example";
          var contactId = "contactId_example";

          instance.contactDelete(customer, contactId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('contactGetContact', function() {
        it('should call contactGetContact successfully', function(done) {
          // TODO: uncomment, update parameter values for contactGetContact call and complete the assertions
          /*
          var customer = "customer_example";
          var contactId = "contactId_example";

          instance.contactGetContact(customer, contactId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.address3).to.be.a('string');
            expect(data.address3).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("");
            expect(data.countryCode).to.be.a('string');
            expect(data.countryCode).to.be("");
            expect(data.department).to.be.a('string');
            expect(data.department).to.be("");
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.phoneLocal).to.be.a('string');
            expect(data.phoneLocal).to.be("");
            expect(data.phoneMobile).to.be.a('string');
            expect(data.phoneMobile).to.be("");
            expect(data.fax).to.be.a('string');
            expect(data.fax).to.be("");
            expect(data.telex).to.be.a('string');
            expect(data.telex).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.URL).to.be.a('string');
            expect(data.URL).to.be("");
            expect(data.jobTitleCode).to.be.a('string');
            expect(data.jobTitleCode).to.be("");
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('contactGetContacts', function() {
        it('should call contactGetContacts successfully', function(done) {
          // TODO: uncomment, update parameter values for contactGetContacts call and complete the assertions
          /*
          var customer = "customer_example";

          instance.contactGetContacts(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.city).to.be.a('string');
              expect(data.city).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.department).to.be.a('string');
              expect(data.department).to.be("");
              expect(data.sSNumber).to.be.a('string');
              expect(data.sSNumber).to.be("");
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.fax).to.be.a('string');
              expect(data.fax).to.be("");
              expect(data.telex).to.be.a('string');
              expect(data.telex).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.URL).to.be.a('string');
              expect(data.URL).to.be("");
              expect(data.jobTitleCode).to.be.a('string');
              expect(data.jobTitleCode).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('contactPut', function() {
        it('should call contactPut successfully', function(done) {
          // TODO: uncomment, update parameter values for contactPut call
          /*
          var customer = "customer_example";
          var contactId = "contactId_example";
          var value = new DkPlusApi.DkCloudDataModelCustomersContactModel();
          value._number = "";
          value.name = "";
          value.title = "";
          value.address1 = "";
          value.address2 = "";
          value.address3 = "";
          value.city = "";
          value.zipCode = "";
          value.countryCode = "";
          value.department = "";
          value.sSNumber = "";
          value.phone = "";
          value.phoneLocal = "";
          value.phoneMobile = "";
          value.fax = "";
          value.telex = "";
          value.email = "";
          value.URL = "";
          value.jobTitleCode = "";
          value.modified = new Date();

          instance.contactPut(customer, contactId, value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
