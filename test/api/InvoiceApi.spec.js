/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.InvoiceApi();
  });

  describe('(package)', function() {
    describe('InvoiceApi', function() {
      describe('invoiceCancelPaymentPlan', function() {
        it('should call invoiceCancelPaymentPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceCancelPaymentPlan call
          /*
          var invoice = "invoice_example";
          var _number = 56;
          var content = new DkPlusApi.DkPlusAPIModelsInvoicePaymentPlanCancel();
          content._date = new Date();
          content.user = "";
          content.reason = "";

          instance.invoiceCancelPaymentPlan(invoice, _number, content, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceCreateCreditInvoice', function() {
        it('should call invoiceCreateCreditInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceCreateCreditInvoice call
          /*
          var id = 56;
          var opts = {};
          opts.post = true;
          opts._date = new Date("2013-10-20T19:20:30+01:00");

          instance.invoiceCreateCreditInvoice(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceCreateInvoice', function() {
        it('should call invoiceCreateInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceCreateInvoice call and complete the assertions
          /*
          var value = new DkPlusApi.DkPlusAPIModelsInvoiceHead();
          value.customer = new DkPlusApi.DkPlusAPIModelsInvoiceCustomer();
          value.customer._number = "";
          value.customer.name = "";
          value.customer.SSN = "";
          value.customer.phone = "";
          value.customer.address1 = "";
          value.customer.address2 = "";
          value.customer.address3 = "";
          value.customer.address4 = "";
          value.customer.zipCode = "";
          value.customer.country = "";
          value.customer.orderDate = new Date();
          value.customer.orderNumber = "";
          value.customer.email = "";
          value.reference = "";
          value.text1 = "";
          value.text2 = "";
          value.term = "";
          value.mode = "";
          value._date = new Date();
          value.dueDate = new Date();
          value.currency = "";
          value.salesPerson = "";
          value.exchange = 0.0;
          value.options = new DkPlusApi.DkPlusAPIModelsInvoiceOptions();
          value.options.originalPrices = false;
          value.options.isPrescription = false;
          value.lines = [new DkPlusApi.DkPlusAPIModelsInvoiceLine()];
          value.lines[0].itemCode = "";
          value.lines[0].warehouse = "";
          value.lines[0].text = "";
          value.lines[0].text2 = "";
          value.lines[0].quantity = 0.0;
          value.lines[0].reference = "";
          value.lines[0].includingVAT = false;
          value.lines[0].price = 0.0;
          value.lines[0].discount = 0.0;
          value.lines[0].discountAmount = 0.0;
          value.lines[0].total = 0.0;
          value.lines[0].dim1 = "";
          value.lines[0].memo = "";
          value.lines[0].variations = [new DkPlusApi.DkPlusAPIModelsInvoiceVariation()];
          value.lines[0].variations[0].code = "";
          value.lines[0].variations[0].code2 = "";
          value.lines[0].variations[0].description = "";
          value.lines[0].variations[0].quantity = 0.0;
          value.lines[0].properties = {key: ""};
          value.payments = [new DkPlusApi.DkPlusAPIModelsInvoicePayment()];
          value.payments[0].ID = 0;
          value.payments[0].name = "";
          value.payments[0].amount = 0.0;
          value.payments[0].properties = {key: ""};
          value.attachment = new DkPlusApi.DkPlusAPIModelsFileModel();
          value.attachment.name = "";
          value.attachment.content = ""undefined;
          value.receiver = new DkPlusApi.DkPlusAPIModelsInvoiceReceiver();
          value.receiver._number = "";
          value.receiver.name = "";
          value.receiver.address1 = "";
          value.receiver.address2 = "";
          value.receiver.address3 = "";
          value.receiver.zipCode = "";
          value.receiver.phone = "";
          value.receiver.mobile = "";
          value.receiver.countryCode = "";
          value.receiver.city = "";
          value.receiver.contact = "";
          value.contact = new DkPlusApi.DkPlusAPIModelsInvoiceContact();
          value.contact._number = "";
          value.contact.name = "";
          value.saleType = "Debit";
          value.properties = {key: ""};
          value.project = "";
          var opts = {};
          opts.post = true;

          instance.invoiceCreateInvoice(value, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.cNumber).to.be.a('string');
            expect(data.cNumber).to.be("");
            expect(data.cName).to.be.a('string');
            expect(data.cName).to.be("");
            expect(data.cAddress1).to.be.a('string');
            expect(data.cAddress1).to.be("");
            expect(data.cAddress2).to.be.a('string');
            expect(data.cAddress2).to.be("");
            expect(data.cZipCode).to.be.a('string');
            expect(data.cZipCode).to.be("");
            expect(data.cCountryCode).to.be.a('string');
            expect(data.cCountryCode).to.be("");
            expect(data.cSSNumber).to.be.a('string');
            expect(data.cSSNumber).to.be("");
            expect(data.cPhone).to.be.a('string');
            expect(data.cPhone).to.be("");
            expect(data.cContact).to.be.a('string');
            expect(data.cContact).to.be("");
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.orderNumber).to.be.a('number');
            expect(data.orderNumber).to.be(0);
            expect(data.invoiceDate).to.be.a(Date);
            expect(data.invoiceDate).to.be(new Date());
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.discountPercent).to.be.a('number');
            expect(data.discountPercent).to.be(0.0);
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.totalAmount).to.be.a('number');
            expect(data.totalAmount).to.be(0.0);
            expect(data.totalAmountWithTax).to.be.a('number');
            expect(data.totalAmountWithTax).to.be(0.0);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.voucher).to.be.a('string');
            expect(data.voucher).to.be("");
            expect(data.settledType).to.be.a('number');
            expect(data.settledType).to.be(0);
            expect(data.settledAmount).to.be.a('number');
            expect(data.settledAmount).to.be(0.0);
            expect(data.salePerson).to.be.a('string');
            expect(data.salePerson).to.be("");
            expect(data.text1).to.be.a('string');
            expect(data.text1).to.be("");
            expect(data.text2).to.be.a('string');
            expect(data.text2).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.claimStatus).to.be.a('number');
            expect(data.claimStatus).to.be(0);
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.salesType).to.be.a('number');
            expect(data.salesType).to.be(0);
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.iRNumber).to.be.a('string');
            expect(data.iRNumber).to.be("");
            expect(data.iRName).to.be.a('string');
            expect(data.iRName).to.be("");
            expect(data.iRAddress1).to.be.a('string');
            expect(data.iRAddress1).to.be("");
            expect(data.iRAddress2).to.be.a('string');
            expect(data.iRAddress2).to.be("");
            expect(data.iRZipCode).to.be.a('string');
            expect(data.iRZipCode).to.be("");
            expect(data.iRContact).to.be.a('string');
            expect(data.iRContact).to.be("");
            expect(data.externalInvoiceNumber).to.be.a('number');
            expect(data.externalInvoiceNumber).to.be(0);
            expect(data.claimNumber).to.be.a('number');
            expect(data.claimNumber).to.be(0);
            expect(data.claimDate).to.be.a(Date);
            expect(data.claimDate).to.be(new Date());
            expect(data.register).to.be.a('string');
            expect(data.register).to.be("");
            expect(data.posInvoice).to.be.a('number');
            expect(data.posInvoice).to.be(0);
            expect(data.journalId).to.be.a('number');
            expect(data.journalId).to.be(0);
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                expect(data.sequenceNumber).to.be.a('number');
                expect(data.sequenceNumber).to.be(0);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.text2).to.be.a('string');
                expect(data.text2).to.be("");
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.unitQuantity).to.be.a('number');
                expect(data.unitQuantity).to.be(0.0);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.discount).to.be.a('number');
                expect(data.discount).to.be(0.0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.discountAmountWithTax).to.be.a('number');
                expect(data.discountAmountWithTax).to.be(0.0);
                expect(data.totalAmount).to.be.a('number');
                expect(data.totalAmount).to.be(0.0);
                expect(data.totalAmountWithTax).to.be.a('number');
                expect(data.totalAmountWithTax).to.be(0.0);
                expect(data.dim1).to.be.a('string');
                expect(data.dim1).to.be("");
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.description2).to.be.a('string');
                    expect(data.description2).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
                    expect(data.quantityOnBackOrders).to.be.a('number');
                    expect(data.quantityOnBackOrders).to.be(0.0);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceCreatePaymentPlan', function() {
        it('should call invoiceCreatePaymentPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceCreatePaymentPlan call and complete the assertions
          /*
          var _number = "_number_example";
          var content = new DkPlusApi.DkPlusAPIModelsInvoicePaymentPlanCreate();
          content.description = "";
          content.amount = 0.0;
          content.netAmount = 0.0;
          content.transactions = [new DkPlusApi.DkPlusAPIModelsInvoicePaymentPlanTransaction()];
          content.transactions[0].amount = 0.0;
          content.transactions[0]._date = new Date();
          content.reference = "";
          content.card = new DkPlusApi.DkPlusAPIModelsInvoicePaymentPlanCard();
          content.card._number = "";
          content.card.type = "";
          content.senderId = "";

          instance.invoiceCreatePaymentPlan(_number, content, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceDeleteInvoice', function() {
        it('should call invoiceDeleteInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceDeleteInvoice call
          /*
          var opts = {};
          opts.reference = "reference_example";
          opts.warehouse = "warehouse_example";
          opts.id = 56;
          opts.created = new Date("2013-10-20T19:20:30+01:00");

          instance.invoiceDeleteInvoice(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGetByDate', function() {
        it('should call invoiceGetByDate successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGetByDate call and complete the assertions
          /*
          var invoicedate = new Date("2013-10-20T19:20:30+01:00");
          var page = 56;
          var count = 56;

          instance.invoiceGetByDate(invoicedate, page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.cNumber).to.be.a('string');
              expect(data.cNumber).to.be("");
              expect(data.cName).to.be.a('string');
              expect(data.cName).to.be("");
              expect(data.cAddress1).to.be.a('string');
              expect(data.cAddress1).to.be("");
              expect(data.cAddress2).to.be.a('string');
              expect(data.cAddress2).to.be("");
              expect(data.cZipCode).to.be.a('string');
              expect(data.cZipCode).to.be("");
              expect(data.cCountryCode).to.be.a('string');
              expect(data.cCountryCode).to.be("");
              expect(data.cSSNumber).to.be.a('string');
              expect(data.cSSNumber).to.be("");
              expect(data.cPhone).to.be.a('string');
              expect(data.cPhone).to.be("");
              expect(data.cContact).to.be.a('string');
              expect(data.cContact).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.orderNumber).to.be.a('number');
              expect(data.orderNumber).to.be(0);
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.discountPercent).to.be.a('number');
              expect(data.discountPercent).to.be(0.0);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.totalAmountWithTax).to.be.a('number');
              expect(data.totalAmountWithTax).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.settledType).to.be.a('number');
              expect(data.settledType).to.be(0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.salePerson).to.be.a('string');
              expect(data.salePerson).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.salesType).to.be.a('number');
              expect(data.salesType).to.be(0);
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.iRNumber).to.be.a('string');
              expect(data.iRNumber).to.be("");
              expect(data.iRName).to.be.a('string');
              expect(data.iRName).to.be("");
              expect(data.iRAddress1).to.be.a('string');
              expect(data.iRAddress1).to.be("");
              expect(data.iRAddress2).to.be.a('string');
              expect(data.iRAddress2).to.be("");
              expect(data.iRZipCode).to.be.a('string');
              expect(data.iRZipCode).to.be("");
              expect(data.iRContact).to.be.a('string');
              expect(data.iRContact).to.be("");
              expect(data.externalInvoiceNumber).to.be.a('number');
              expect(data.externalInvoiceNumber).to.be(0);
              expect(data.claimNumber).to.be.a('number');
              expect(data.claimNumber).to.be(0);
              expect(data.claimDate).to.be.a(Date);
              expect(data.claimDate).to.be(new Date());
              expect(data.register).to.be.a('string');
              expect(data.register).to.be("");
              expect(data.posInvoice).to.be.a('number');
              expect(data.posInvoice).to.be(0);
              expect(data.journalId).to.be.a('number');
              expect(data.journalId).to.be(0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                  expect(data.sequenceNumber).to.be.a('number');
                  expect(data.sequenceNumber).to.be(0);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.discountAmountWithTax).to.be.a('number');
                  expect(data.discountAmountWithTax).to.be(0.0);
                  expect(data.totalAmount).to.be.a('number');
                  expect(data.totalAmount).to.be(0.0);
                  expect(data.totalAmountWithTax).to.be.a('number');
                  expect(data.totalAmountWithTax).to.be(0.0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGetDiscounts', function() {
        it('should call invoiceGetDiscounts successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGetDiscounts call and complete the assertions
          /*
          var value = new DkPlusApi.DkPlusAPIModelsInvoiceHead();
          value.customer = new DkPlusApi.DkPlusAPIModelsInvoiceCustomer();
          value.customer._number = "";
          value.customer.name = "";
          value.customer.SSN = "";
          value.customer.phone = "";
          value.customer.address1 = "";
          value.customer.address2 = "";
          value.customer.address3 = "";
          value.customer.address4 = "";
          value.customer.zipCode = "";
          value.customer.country = "";
          value.customer.orderDate = new Date();
          value.customer.orderNumber = "";
          value.customer.email = "";
          value.reference = "";
          value.text1 = "";
          value.text2 = "";
          value.term = "";
          value.mode = "";
          value._date = new Date();
          value.dueDate = new Date();
          value.currency = "";
          value.salesPerson = "";
          value.exchange = 0.0;
          value.options = new DkPlusApi.DkPlusAPIModelsInvoiceOptions();
          value.options.originalPrices = false;
          value.options.isPrescription = false;
          value.lines = [new DkPlusApi.DkPlusAPIModelsInvoiceLine()];
          value.lines[0].itemCode = "";
          value.lines[0].warehouse = "";
          value.lines[0].text = "";
          value.lines[0].text2 = "";
          value.lines[0].quantity = 0.0;
          value.lines[0].reference = "";
          value.lines[0].includingVAT = false;
          value.lines[0].price = 0.0;
          value.lines[0].discount = 0.0;
          value.lines[0].discountAmount = 0.0;
          value.lines[0].total = 0.0;
          value.lines[0].dim1 = "";
          value.lines[0].memo = "";
          value.lines[0].variations = [new DkPlusApi.DkPlusAPIModelsInvoiceVariation()];
          value.lines[0].variations[0].code = "";
          value.lines[0].variations[0].code2 = "";
          value.lines[0].variations[0].description = "";
          value.lines[0].variations[0].quantity = 0.0;
          value.lines[0].properties = {key: ""};
          value.payments = [new DkPlusApi.DkPlusAPIModelsInvoicePayment()];
          value.payments[0].ID = 0;
          value.payments[0].name = "";
          value.payments[0].amount = 0.0;
          value.payments[0].properties = {key: ""};
          value.attachment = new DkPlusApi.DkPlusAPIModelsFileModel();
          value.attachment.name = "";
          value.attachment.content = ""undefined;
          value.receiver = new DkPlusApi.DkPlusAPIModelsInvoiceReceiver();
          value.receiver._number = "";
          value.receiver.name = "";
          value.receiver.address1 = "";
          value.receiver.address2 = "";
          value.receiver.address3 = "";
          value.receiver.zipCode = "";
          value.receiver.phone = "";
          value.receiver.mobile = "";
          value.receiver.countryCode = "";
          value.receiver.city = "";
          value.receiver.contact = "";
          value.contact = new DkPlusApi.DkPlusAPIModelsInvoiceContact();
          value.contact._number = "";
          value.contact.name = "";
          value.saleType = "Debit";
          value.properties = {key: ""};
          value.project = "";

          instance.invoiceGetDiscounts(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.cNumber).to.be.a('string');
            expect(data.cNumber).to.be("");
            expect(data.cName).to.be.a('string');
            expect(data.cName).to.be("");
            expect(data.cAddress1).to.be.a('string');
            expect(data.cAddress1).to.be("");
            expect(data.cAddress2).to.be.a('string');
            expect(data.cAddress2).to.be("");
            expect(data.cZipCode).to.be.a('string');
            expect(data.cZipCode).to.be("");
            expect(data.cCountryCode).to.be.a('string');
            expect(data.cCountryCode).to.be("");
            expect(data.cSSNumber).to.be.a('string');
            expect(data.cSSNumber).to.be("");
            expect(data.cPhone).to.be.a('string');
            expect(data.cPhone).to.be("");
            expect(data.cContact).to.be.a('string');
            expect(data.cContact).to.be("");
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.orderNumber).to.be.a('number');
            expect(data.orderNumber).to.be(0);
            expect(data.invoiceDate).to.be.a(Date);
            expect(data.invoiceDate).to.be(new Date());
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.discountPercent).to.be.a('number');
            expect(data.discountPercent).to.be(0.0);
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.totalAmount).to.be.a('number');
            expect(data.totalAmount).to.be(0.0);
            expect(data.totalAmountWithTax).to.be.a('number');
            expect(data.totalAmountWithTax).to.be(0.0);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.voucher).to.be.a('string');
            expect(data.voucher).to.be("");
            expect(data.settledType).to.be.a('number');
            expect(data.settledType).to.be(0);
            expect(data.settledAmount).to.be.a('number');
            expect(data.settledAmount).to.be(0.0);
            expect(data.salePerson).to.be.a('string');
            expect(data.salePerson).to.be("");
            expect(data.text1).to.be.a('string');
            expect(data.text1).to.be("");
            expect(data.text2).to.be.a('string');
            expect(data.text2).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.claimStatus).to.be.a('number');
            expect(data.claimStatus).to.be(0);
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.salesType).to.be.a('number');
            expect(data.salesType).to.be(0);
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.iRNumber).to.be.a('string');
            expect(data.iRNumber).to.be("");
            expect(data.iRName).to.be.a('string');
            expect(data.iRName).to.be("");
            expect(data.iRAddress1).to.be.a('string');
            expect(data.iRAddress1).to.be("");
            expect(data.iRAddress2).to.be.a('string');
            expect(data.iRAddress2).to.be("");
            expect(data.iRZipCode).to.be.a('string');
            expect(data.iRZipCode).to.be("");
            expect(data.iRContact).to.be.a('string');
            expect(data.iRContact).to.be("");
            expect(data.externalInvoiceNumber).to.be.a('number');
            expect(data.externalInvoiceNumber).to.be(0);
            expect(data.claimNumber).to.be.a('number');
            expect(data.claimNumber).to.be(0);
            expect(data.claimDate).to.be.a(Date);
            expect(data.claimDate).to.be(new Date());
            expect(data.register).to.be.a('string');
            expect(data.register).to.be("");
            expect(data.posInvoice).to.be.a('number');
            expect(data.posInvoice).to.be(0);
            expect(data.journalId).to.be.a('number');
            expect(data.journalId).to.be(0);
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                expect(data.sequenceNumber).to.be.a('number');
                expect(data.sequenceNumber).to.be(0);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.text2).to.be.a('string');
                expect(data.text2).to.be("");
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.unitQuantity).to.be.a('number');
                expect(data.unitQuantity).to.be(0.0);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.discount).to.be.a('number');
                expect(data.discount).to.be(0.0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.discountAmountWithTax).to.be.a('number');
                expect(data.discountAmountWithTax).to.be(0.0);
                expect(data.totalAmount).to.be.a('number');
                expect(data.totalAmount).to.be(0.0);
                expect(data.totalAmountWithTax).to.be.a('number');
                expect(data.totalAmountWithTax).to.be(0.0);
                expect(data.dim1).to.be.a('string');
                expect(data.dim1).to.be("");
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.description2).to.be.a('string');
                    expect(data.description2).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
                    expect(data.quantityOnBackOrders).to.be.a('number');
                    expect(data.quantityOnBackOrders).to.be(0.0);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGetHtml', function() {
        it('should call invoiceGetHtml successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGetHtml call and complete the assertions
          /*
          var _number = "_number_example";
          var opts = {};
          opts.custom = "custom_example";

          instance.invoiceGetHtml(_number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGetInvoice', function() {
        it('should call invoiceGetInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGetInvoice call and complete the assertions
          /*
          var _number = "_number_example";

          instance.invoiceGetInvoice(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");
            expect(data.cNumber).to.be.a('string');
            expect(data.cNumber).to.be("");
            expect(data.cName).to.be.a('string');
            expect(data.cName).to.be("");
            expect(data.cAddress1).to.be.a('string');
            expect(data.cAddress1).to.be("");
            expect(data.cAddress2).to.be.a('string');
            expect(data.cAddress2).to.be("");
            expect(data.cZipCode).to.be.a('string');
            expect(data.cZipCode).to.be("");
            expect(data.cCountryCode).to.be.a('string');
            expect(data.cCountryCode).to.be("");
            expect(data.cSSNumber).to.be.a('string');
            expect(data.cSSNumber).to.be("");
            expect(data.cPhone).to.be.a('string');
            expect(data.cPhone).to.be("");
            expect(data.cContact).to.be.a('string');
            expect(data.cContact).to.be("");
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be(0);
            expect(data.orderNumber).to.be.a('number');
            expect(data.orderNumber).to.be(0);
            expect(data.invoiceDate).to.be.a(Date);
            expect(data.invoiceDate).to.be(new Date());
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.discountPercent).to.be.a('number');
            expect(data.discountPercent).to.be(0.0);
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.totalAmount).to.be.a('number');
            expect(data.totalAmount).to.be(0.0);
            expect(data.totalAmountWithTax).to.be.a('number');
            expect(data.totalAmountWithTax).to.be(0.0);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.voucher).to.be.a('string');
            expect(data.voucher).to.be("");
            expect(data.settledType).to.be.a('number');
            expect(data.settledType).to.be(0);
            expect(data.settledAmount).to.be.a('number');
            expect(data.settledAmount).to.be(0.0);
            expect(data.salePerson).to.be.a('string');
            expect(data.salePerson).to.be("");
            expect(data.text1).to.be.a('string');
            expect(data.text1).to.be("");
            expect(data.text2).to.be.a('string');
            expect(data.text2).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.claimStatus).to.be.a('number');
            expect(data.claimStatus).to.be(0);
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.salesType).to.be.a('number');
            expect(data.salesType).to.be(0);
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.iRNumber).to.be.a('string');
            expect(data.iRNumber).to.be("");
            expect(data.iRName).to.be.a('string');
            expect(data.iRName).to.be("");
            expect(data.iRAddress1).to.be.a('string');
            expect(data.iRAddress1).to.be("");
            expect(data.iRAddress2).to.be.a('string');
            expect(data.iRAddress2).to.be("");
            expect(data.iRZipCode).to.be.a('string');
            expect(data.iRZipCode).to.be("");
            expect(data.iRContact).to.be.a('string');
            expect(data.iRContact).to.be("");
            expect(data.externalInvoiceNumber).to.be.a('number');
            expect(data.externalInvoiceNumber).to.be(0);
            expect(data.claimNumber).to.be.a('number');
            expect(data.claimNumber).to.be(0);
            expect(data.claimDate).to.be.a(Date);
            expect(data.claimDate).to.be(new Date());
            expect(data.register).to.be.a('string');
            expect(data.register).to.be("");
            expect(data.posInvoice).to.be.a('number');
            expect(data.posInvoice).to.be(0);
            expect(data.journalId).to.be.a('number');
            expect(data.journalId).to.be(0);
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                expect(data.sequenceNumber).to.be.a('number');
                expect(data.sequenceNumber).to.be(0);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.text2).to.be.a('string');
                expect(data.text2).to.be("");
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.unitQuantity).to.be.a('number');
                expect(data.unitQuantity).to.be(0.0);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.discount).to.be.a('number');
                expect(data.discount).to.be(0.0);
                expect(data.discountAmount).to.be.a('number');
                expect(data.discountAmount).to.be(0.0);
                expect(data.discountAmountWithTax).to.be.a('number');
                expect(data.discountAmountWithTax).to.be(0.0);
                expect(data.totalAmount).to.be.a('number');
                expect(data.totalAmount).to.be(0.0);
                expect(data.totalAmountWithTax).to.be.a('number');
                expect(data.totalAmountWithTax).to.be(0.0);
                expect(data.dim1).to.be.a('string');
                expect(data.dim1).to.be("");
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                    expect(data.code).to.be.a('string');
                    expect(data.code).to.be("");
                    expect(data.code2).to.be.a('string');
                    expect(data.code2).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.description2).to.be.a('string');
                    expect(data.description2).to.be("");
                    expect(data.quantity).to.be.a('number');
                    expect(data.quantity).to.be(0.0);
                    expect(data.quantityOnBackOrders).to.be.a('number');
                    expect(data.quantityOnBackOrders).to.be(0.0);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGetPDF', function() {
        it('should call invoiceGetPDF successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGetPDF call and complete the assertions
          /*
          var _number = "_number_example";
          var opts = {};
          opts.custom = "custom_example";

          instance.invoiceGetPDF(_number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGetPage', function() {
        it('should call invoiceGetPage successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGetPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.includeLines = true;
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.salesPerson = "salesPerson_example";
          opts.reference = "reference_example";
          opts.recordid = 56;
          opts.customer = "customer_example";
          opts.project = "project_example";
          opts.include = "include_example";

          instance.invoiceGetPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.cNumber).to.be.a('string');
              expect(data.cNumber).to.be("");
              expect(data.cName).to.be.a('string');
              expect(data.cName).to.be("");
              expect(data.cAddress1).to.be.a('string');
              expect(data.cAddress1).to.be("");
              expect(data.cAddress2).to.be.a('string');
              expect(data.cAddress2).to.be("");
              expect(data.cZipCode).to.be.a('string');
              expect(data.cZipCode).to.be("");
              expect(data.cCountryCode).to.be.a('string');
              expect(data.cCountryCode).to.be("");
              expect(data.cSSNumber).to.be.a('string');
              expect(data.cSSNumber).to.be("");
              expect(data.cPhone).to.be.a('string');
              expect(data.cPhone).to.be("");
              expect(data.cContact).to.be.a('string');
              expect(data.cContact).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.orderNumber).to.be.a('number');
              expect(data.orderNumber).to.be(0);
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.discountPercent).to.be.a('number');
              expect(data.discountPercent).to.be(0.0);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.totalAmountWithTax).to.be.a('number');
              expect(data.totalAmountWithTax).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.settledType).to.be.a('number');
              expect(data.settledType).to.be(0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.salePerson).to.be.a('string');
              expect(data.salePerson).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.salesType).to.be.a('number');
              expect(data.salesType).to.be(0);
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.iRNumber).to.be.a('string');
              expect(data.iRNumber).to.be("");
              expect(data.iRName).to.be.a('string');
              expect(data.iRName).to.be("");
              expect(data.iRAddress1).to.be.a('string');
              expect(data.iRAddress1).to.be("");
              expect(data.iRAddress2).to.be.a('string');
              expect(data.iRAddress2).to.be("");
              expect(data.iRZipCode).to.be.a('string');
              expect(data.iRZipCode).to.be("");
              expect(data.iRContact).to.be.a('string');
              expect(data.iRContact).to.be("");
              expect(data.externalInvoiceNumber).to.be.a('number');
              expect(data.externalInvoiceNumber).to.be(0);
              expect(data.claimNumber).to.be.a('number');
              expect(data.claimNumber).to.be(0);
              expect(data.claimDate).to.be.a(Date);
              expect(data.claimDate).to.be(new Date());
              expect(data.register).to.be.a('string');
              expect(data.register).to.be("");
              expect(data.posInvoice).to.be.a('number');
              expect(data.posInvoice).to.be(0);
              expect(data.journalId).to.be.a('number');
              expect(data.journalId).to.be(0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                  expect(data.sequenceNumber).to.be.a('number');
                  expect(data.sequenceNumber).to.be(0);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.discountAmountWithTax).to.be.a('number');
                  expect(data.discountAmountWithTax).to.be(0.0);
                  expect(data.totalAmount).to.be.a('number');
                  expect(data.totalAmount).to.be(0.0);
                  expect(data.totalAmountWithTax).to.be.a('number');
                  expect(data.totalAmountWithTax).to.be(0.0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceGetReference', function() {
        it('should call invoiceGetReference successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceGetReference call and complete the assertions
          /*
          var reference = "reference_example";
          var page = 56;
          var count = 56;
          var opts = {};
          opts.type = "type_example";

          instance.invoiceGetReference(reference, page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.cNumber).to.be.a('string');
              expect(data.cNumber).to.be("");
              expect(data.cName).to.be.a('string');
              expect(data.cName).to.be("");
              expect(data.cAddress1).to.be.a('string');
              expect(data.cAddress1).to.be("");
              expect(data.cAddress2).to.be.a('string');
              expect(data.cAddress2).to.be("");
              expect(data.cZipCode).to.be.a('string');
              expect(data.cZipCode).to.be("");
              expect(data.cCountryCode).to.be.a('string');
              expect(data.cCountryCode).to.be("");
              expect(data.cSSNumber).to.be.a('string');
              expect(data.cSSNumber).to.be("");
              expect(data.cPhone).to.be.a('string');
              expect(data.cPhone).to.be("");
              expect(data.cContact).to.be.a('string');
              expect(data.cContact).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.orderNumber).to.be.a('number');
              expect(data.orderNumber).to.be(0);
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.discountPercent).to.be.a('number');
              expect(data.discountPercent).to.be(0.0);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.totalAmountWithTax).to.be.a('number');
              expect(data.totalAmountWithTax).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.settledType).to.be.a('number');
              expect(data.settledType).to.be(0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.salePerson).to.be.a('string');
              expect(data.salePerson).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.salesType).to.be.a('number');
              expect(data.salesType).to.be(0);
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.iRNumber).to.be.a('string');
              expect(data.iRNumber).to.be("");
              expect(data.iRName).to.be.a('string');
              expect(data.iRName).to.be("");
              expect(data.iRAddress1).to.be.a('string');
              expect(data.iRAddress1).to.be("");
              expect(data.iRAddress2).to.be.a('string');
              expect(data.iRAddress2).to.be("");
              expect(data.iRZipCode).to.be.a('string');
              expect(data.iRZipCode).to.be("");
              expect(data.iRContact).to.be.a('string');
              expect(data.iRContact).to.be("");
              expect(data.externalInvoiceNumber).to.be.a('number');
              expect(data.externalInvoiceNumber).to.be(0);
              expect(data.claimNumber).to.be.a('number');
              expect(data.claimNumber).to.be(0);
              expect(data.claimDate).to.be.a(Date);
              expect(data.claimDate).to.be(new Date());
              expect(data.register).to.be.a('string');
              expect(data.register).to.be("");
              expect(data.posInvoice).to.be.a('number');
              expect(data.posInvoice).to.be(0);
              expect(data.journalId).to.be.a('number');
              expect(data.journalId).to.be(0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                  expect(data.sequenceNumber).to.be.a('number');
                  expect(data.sequenceNumber).to.be(0);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.discountAmountWithTax).to.be.a('number');
                  expect(data.discountAmountWithTax).to.be(0.0);
                  expect(data.totalAmount).to.be.a('number');
                  expect(data.totalAmount).to.be(0.0);
                  expect(data.totalAmountWithTax).to.be.a('number');
                  expect(data.totalAmountWithTax).to.be(0.0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceRefreshInvoiceFromDK', function() {
        it('should call invoiceRefreshInvoiceFromDK successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceRefreshInvoiceFromDK call
          /*
          var _number = "_number_example";

          instance.invoiceRefreshInvoiceFromDK(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSendEmail', function() {
        it('should call invoiceSendEmail successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSendEmail call
          /*
          var _number = "_number_example";
          var message = new DkPlusApi.DkPlusMailModelMailInfo();
          message.displayName = "";
          message.to = "";
          message.CC = "";
          message.BCC = "";
          message.subject = "";
          message.body = "";
          message.priority = "None";
          message.attachments = [""];
          var opts = {};
          opts.custom = "custom_example";

          instance.invoiceSendEmail(_number, message, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceSendMassEmail', function() {
        it('should call invoiceSendMassEmail successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceSendMassEmail call and complete the assertions
          /*
          var _number = "_number_example";
          var message = new DkPlusApi.DkPlusMailModelMailInfo();
          message.displayName = "";
          message.to = "";
          message.CC = "";
          message.BCC = "";
          message.subject = "";
          message.body = "";
          message.priority = "None";
          message.attachments = [""];
          var opts = {};
          opts.custom = "custom_example";

          instance.invoiceSendMassEmail(_number, message, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
