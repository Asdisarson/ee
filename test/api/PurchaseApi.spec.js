/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.PurchaseApi();
  });

  describe('(package)', function() {
    describe('PurchaseApi', function() {
      describe('purchaseDelete', function() {
        it('should call purchaseDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseDelete call
          /*
          var id = 56;

          instance.purchaseDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseDeleteLine', function() {
        it('should call purchaseDeleteLine successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseDeleteLine call
          /*
          var id = 56;
          var seq = 56;

          instance.purchaseDeleteLine(id, seq, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseGet', function() {
        it('should call purchaseGet successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseGet call and complete the assertions
          /*
          var opts = {};
          opts.modified = new Date("2013-10-20T19:20:30+01:00");

          instance.purchaseGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseHeadModel);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.vendor).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorBaseModel);
                    expect(data.vendor._number).to.be.a('string');
                expect(data.vendor._number).to.be("");
                expect(data.vendor.name).to.be.a('string');
                expect(data.vendor.name).to.be("");
                expect(data.vendor.address1).to.be.a('string');
                expect(data.vendor.address1).to.be("");
                expect(data.vendor.address2).to.be.a('string');
                expect(data.vendor.address2).to.be("");
                expect(data.vendor.zipCode).to.be.a('string');
                expect(data.vendor.zipCode).to.be("");
                expect(data.vendor.country).to.be.a('string');
                expect(data.vendor.country).to.be("");
                expect(data.vendor.sSNumber).to.be.a('string');
                expect(data.vendor.sSNumber).to.be("");
                expect(data.vendor.phone).to.be.a('string');
                expect(data.vendor.phone).to.be("");
                expect(data.vendor.contact).to.be.a('string');
                expect(data.vendor.contact).to.be("");
                expect(data.vendor.email).to.be.a('string');
                expect(data.vendor.email).to.be("");
              expect(data.orderDate).to.be.a(Date);
              expect(data.orderDate).to.be(new Date());
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseLineModel);
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.externalCode).to.be.a('string');
                  expect(data.externalCode).to.be("");
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseGetById', function() {
        it('should call purchaseGetById successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseGetById call and complete the assertions
          /*
          var id = 56;

          instance.purchaseGetById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseHeadModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.vendor).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorBaseModel);
                  expect(data.vendor._number).to.be.a('string');
              expect(data.vendor._number).to.be("");
              expect(data.vendor.name).to.be.a('string');
              expect(data.vendor.name).to.be("");
              expect(data.vendor.address1).to.be.a('string');
              expect(data.vendor.address1).to.be("");
              expect(data.vendor.address2).to.be.a('string');
              expect(data.vendor.address2).to.be("");
              expect(data.vendor.zipCode).to.be.a('string');
              expect(data.vendor.zipCode).to.be("");
              expect(data.vendor.country).to.be.a('string');
              expect(data.vendor.country).to.be("");
              expect(data.vendor.sSNumber).to.be.a('string');
              expect(data.vendor.sSNumber).to.be("");
              expect(data.vendor.phone).to.be.a('string');
              expect(data.vendor.phone).to.be("");
              expect(data.vendor.contact).to.be.a('string');
              expect(data.vendor.contact).to.be("");
              expect(data.vendor.email).to.be.a('string');
              expect(data.vendor.email).to.be("");
            expect(data.orderDate).to.be.a(Date);
            expect(data.orderDate).to.be(new Date());
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseLineModel);
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.externalCode).to.be.a('string');
                expect(data.externalCode).to.be("");
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseGetByNumber', function() {
        it('should call purchaseGetByNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseGetByNumber call and complete the assertions
          /*
          var _number = "_number_example";

          instance.purchaseGetByNumber(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseHeadModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.vendor).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorBaseModel);
                  expect(data.vendor._number).to.be.a('string');
              expect(data.vendor._number).to.be("");
              expect(data.vendor.name).to.be.a('string');
              expect(data.vendor.name).to.be("");
              expect(data.vendor.address1).to.be.a('string');
              expect(data.vendor.address1).to.be("");
              expect(data.vendor.address2).to.be.a('string');
              expect(data.vendor.address2).to.be("");
              expect(data.vendor.zipCode).to.be.a('string');
              expect(data.vendor.zipCode).to.be("");
              expect(data.vendor.country).to.be.a('string');
              expect(data.vendor.country).to.be("");
              expect(data.vendor.sSNumber).to.be.a('string');
              expect(data.vendor.sSNumber).to.be("");
              expect(data.vendor.phone).to.be.a('string');
              expect(data.vendor.phone).to.be("");
              expect(data.vendor.contact).to.be.a('string');
              expect(data.vendor.contact).to.be("");
              expect(data.vendor.email).to.be.a('string');
              expect(data.vendor.email).to.be("");
            expect(data.orderDate).to.be.a(Date);
            expect(data.orderDate).to.be(new Date());
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseLineModel);
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.externalCode).to.be.a('string');
                expect(data.externalCode).to.be("");
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchaseGetByReference', function() {
        it('should call purchaseGetByReference successfully', function(done) {
          // TODO: uncomment, update parameter values for purchaseGetByReference call and complete the assertions
          /*
          var _number = "_number_example";

          instance.purchaseGetByReference(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseHeadModel);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.vendor).to.be.a(DkPlusApi.DkCloudDataModelVendorsVendorBaseModel);
                  expect(data.vendor._number).to.be.a('string');
              expect(data.vendor._number).to.be("");
              expect(data.vendor.name).to.be.a('string');
              expect(data.vendor.name).to.be("");
              expect(data.vendor.address1).to.be.a('string');
              expect(data.vendor.address1).to.be("");
              expect(data.vendor.address2).to.be.a('string');
              expect(data.vendor.address2).to.be("");
              expect(data.vendor.zipCode).to.be.a('string');
              expect(data.vendor.zipCode).to.be("");
              expect(data.vendor.country).to.be.a('string');
              expect(data.vendor.country).to.be("");
              expect(data.vendor.sSNumber).to.be.a('string');
              expect(data.vendor.sSNumber).to.be("");
              expect(data.vendor.phone).to.be.a('string');
              expect(data.vendor.phone).to.be("");
              expect(data.vendor.contact).to.be.a('string');
              expect(data.vendor.contact).to.be("");
              expect(data.vendor.email).to.be.a('string');
              expect(data.vendor.email).to.be("");
            expect(data.orderDate).to.be.a(Date);
            expect(data.orderDate).to.be(new Date());
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelPurchaseLineModel);
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.externalCode).to.be.a('string');
                expect(data.externalCode).to.be("");
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchasePatch', function() {
        it('should call purchasePatch successfully', function(done) {
          // TODO: uncomment, update parameter values for purchasePatch call
          /*
          var id = 56;
          var order = new DkPlusApi.DkPlusAPIModelsPurchaseHead();
          order.id = 0;
          order._number = "";
          order.reference = "";
          order.vendor = new DkPlusApi.DkCloudDataModelVendorsVendorBaseModel();
          order.vendor._number = "";
          order.vendor.name = "";
          order.vendor.address1 = "";
          order.vendor.address2 = "";
          order.vendor.zipCode = "";
          order.vendor.country = "";
          order.vendor.sSNumber = "";
          order.vendor.phone = "";
          order.vendor.contact = "";
          order.vendor.email = "";
          order.orderDate = new Date();
          order.lines = [new DkPlusApi.DkPlusAPIModelsPurchaseLine()];
          order.lines[0].warehouse = "";
          order.lines[0].code = "";
          order.lines[0].codeType = "ItemCode";
          order.lines[0].reference = "";
          order.lines[0].quantity = 0.0;
          order.lines[0].id = 0;

          instance.purchasePatch(id, order, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchasePatchLine', function() {
        it('should call purchasePatchLine successfully', function(done) {
          // TODO: uncomment, update parameter values for purchasePatchLine call
          /*
          var id = 56;
          var seq = 56;
          var line = new DkPlusApi.DkCloudDataModelPurchaseLineModel();
          line.warehouse = "";
          line.itemCode = "";
          line.externalCode = "";
          line.reference = "";
          line.quantity = 0.0;
          line.id = 0;

          instance.purchasePatchLine(id, seq, line, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('purchasePost', function() {
        it('should call purchasePost successfully', function(done) {
          // TODO: uncomment, update parameter values for purchasePost call
          /*
          var orders = [new DkPlusApi.DkPlusAPIModelsPurchaseHead()];
          orders[0].id = 0;
          orders[0]._number = "";
          orders[0].reference = "";
          orders[0].vendor = new DkPlusApi.DkCloudDataModelVendorsVendorBaseModel();
          orders[0].vendor._number = "";
          orders[0].vendor.name = "";
          orders[0].vendor.address1 = "";
          orders[0].vendor.address2 = "";
          orders[0].vendor.zipCode = "";
          orders[0].vendor.country = "";
          orders[0].vendor.sSNumber = "";
          orders[0].vendor.phone = "";
          orders[0].vendor.contact = "";
          orders[0].vendor.email = "";
          orders[0].orderDate = new Date();
          orders[0].lines = [new DkPlusApi.DkPlusAPIModelsPurchaseLine()];
          orders[0].lines[0].warehouse = "";
          orders[0].lines[0].code = "";
          orders[0].lines[0].codeType = "ItemCode";
          orders[0].lines[0].reference = "";
          orders[0].lines[0].quantity = 0.0;
          orders[0].lines[0].id = 0;

          instance.purchasePost(orders, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
