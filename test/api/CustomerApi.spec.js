/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.CustomerApi();
  });

  describe('(package)', function() {
    describe('CustomerApi', function() {
      describe('customerCallerIdByPhone', function() {
        it('should call customerCallerIdByPhone successfully', function(done) {
          // TODO: uncomment, update parameter values for customerCallerIdByPhone call and complete the assertions
          /*
          var _number = "_number_example";
          var opts = {};
          opts.format = "format_example";

          instance.customerCallerIdByPhone(_number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerCreateCustomer', function() {
        it('should call customerCreateCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for customerCreateCustomer call
          /*
          var obj = new DkPlusApi.DkCloudDataModelCustomersCustomerModel();
          obj.deleted = false;
          obj.contacts = [new DkPlusApi.DkCloudDataModelCustomersContactModel()];
          obj.contacts[0]._number = "";
          obj.contacts[0].name = "";
          obj.contacts[0].title = "";
          obj.contacts[0].address1 = "";
          obj.contacts[0].address2 = "";
          obj.contacts[0].address3 = "";
          obj.contacts[0].city = "";
          obj.contacts[0].zipCode = "";
          obj.contacts[0].countryCode = "";
          obj.contacts[0].department = "";
          obj.contacts[0].sSNumber = "";
          obj.contacts[0].phone = "";
          obj.contacts[0].phoneLocal = "";
          obj.contacts[0].phoneMobile = "";
          obj.contacts[0].fax = "";
          obj.contacts[0].telex = "";
          obj.contacts[0].email = "";
          obj.contacts[0].URL = "";
          obj.contacts[0].jobTitleCode = "";
          obj.contacts[0].modified = new Date();
          obj.recivers = [new DkPlusApi.DkCloudDataModelCustomersItemReciverModel()];
          obj.recivers[0]._number = "";
          obj.recivers[0].name = "";
          obj.recivers[0].address1 = "";
          obj.recivers[0].address2 = "";
          obj.recivers[0].address3 = "";
          obj.recivers[0].address4 = "";
          obj.recivers[0].city = "";
          obj.recivers[0].zipCode = "";
          obj.recivers[0].countryCode = "";
          obj.recivers[0].sSNumber = "";
          obj.recivers[0].phone = "";
          obj.recivers[0].phoneLocal = "";
          obj.recivers[0].phoneMobile = "";
          obj.recivers[0].fax = "";
          obj.recivers[0].telex = "";
          obj.recivers[0].email = "";
          obj.recivers[0].URL = "";
          obj.recivers[0].eANNumber = "";
          obj.recivers[0].vATNumber = "";
          obj.recivers[0].blocked = false;
          obj.recivers[0].modified = new Date();
          obj.memos = [new DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel()];
          obj.memos[0].pageName = "";
          obj.memos[0].plainText = "";
          obj.memos[0].modified = new Date();
          obj.memos[0].recordID = "0";
          obj.properties = [new DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel()];
          obj.properties[0].ID = "";
          obj.properties[0].attribute = "";
          obj.properties[0].option = "";
          obj.properties[0].comment = "";
          obj.properties[0].modified = new Date();
          obj.changes = [new DkPlusApi.DkCloudDataModelGeneralChangesModel()];
          obj.changes[0].modified = new Date();
          obj.changes[0].by = "";
          obj.changes[0].fields = [new DkPlusApi.DkCloudDataModelGeneralFieldChangeModel()];
          obj.changes[0].fields[0].name = "";
          obj.changes[0].fields[0].value = "";
          obj.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          obj.attachments[0].ID = 0;
          obj.attachments[0].name = "";
          obj.attachments[0].size = 0;
          obj.attachments[0].linked = new Date();
          obj.attachments[0].mD5Hash = "";
          obj.attachments[0].showOnWeb = false;
          obj.conditions = new DkPlusApi.DkCloudDataModelCustomersCustomerCondition();
          obj.conditions.creditLimit = 0.0;
          obj.conditions.creditMax = 0.0;
          obj.conditions.disableSale = false;
          obj.conditions.disableRetail = false;
          obj.sendTo = new DkPlusApi.DkCloudDataModelCustomersCustomerSendTo();
          obj.sendTo.printer = false;
          obj.sendTo.claimToPrinter = false;
          obj.sendTo.email = false;
          obj.sendTo.eDIInvoice = false;
          obj.sendTo.publishingSystem = false;
          obj.recordID = "0";
          obj._number = "";
          obj.name = "";
          obj.alias = "";
          obj.address1 = "";
          obj.address2 = "";
          obj.address3 = "";
          obj.zipCode = "";
          obj.balanceAmount = 0.0;
          obj.phone = "";
          obj.phoneLocal = "";
          obj.phoneMobile = "";
          obj.phoneFax = "";
          obj.countryCode = "";
          obj.originCountryCode = "";
          obj.email = "";
          obj.password = "";
          obj.group = "";
          obj.salesPerson = "";
          obj.discount = 0.0;
          obj.useItemRecivers = false;
          obj.paymentTerm = "";
          obj.paymentMode = "";
          obj.currencyCode = "";
          obj.noVat = false;
          obj.ledgerCode = "";
          obj.blocked = false;
          obj.gender = "Male";
          obj.priceGroup = 0;
          obj.billingFee = 0.0;
          obj.modified = new Date();

          instance.customerCreateCustomer(obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerDeleteCustomer', function() {
        it('should call customerDeleteCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for customerDeleteCustomer call
          /*
          var customer = "customer_example";

          instance.customerDeleteCustomer(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetAttachment', function() {
        it('should call customerGetAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetAttachment call and complete the assertions
          /*
          var customer = "customer_example";
          var id = 56;

          instance.customerGetAttachment(customer, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomerById', function() {
        it('should call customerGetCustomerById successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomerById call and complete the assertions
          /*
          var customer = "customer_example";

          instance.customerGetCustomerById(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            {
              let dataCtr = data.contacts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.address1).to.be.a('string');
                expect(data.address1).to.be("");
                expect(data.address2).to.be.a('string');
                expect(data.address2).to.be("");
                expect(data.address3).to.be.a('string');
                expect(data.address3).to.be("");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.zipCode).to.be.a('string');
                expect(data.zipCode).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.department).to.be.a('string');
                expect(data.department).to.be("");
                expect(data.sSNumber).to.be.a('string');
                expect(data.sSNumber).to.be("");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("");
                expect(data.phoneLocal).to.be.a('string');
                expect(data.phoneLocal).to.be("");
                expect(data.phoneMobile).to.be.a('string');
                expect(data.phoneMobile).to.be("");
                expect(data.fax).to.be.a('string');
                expect(data.fax).to.be("");
                expect(data.telex).to.be.a('string');
                expect(data.telex).to.be("");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.URL).to.be.a('string');
                expect(data.URL).to.be("");
                expect(data.jobTitleCode).to.be.a('string');
                expect(data.jobTitleCode).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.recivers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.address1).to.be.a('string');
                expect(data.address1).to.be("");
                expect(data.address2).to.be.a('string');
                expect(data.address2).to.be("");
                expect(data.address3).to.be.a('string');
                expect(data.address3).to.be("");
                expect(data.address4).to.be.a('string');
                expect(data.address4).to.be("");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.zipCode).to.be.a('string');
                expect(data.zipCode).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.sSNumber).to.be.a('string');
                expect(data.sSNumber).to.be("");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("");
                expect(data.phoneLocal).to.be.a('string');
                expect(data.phoneLocal).to.be("");
                expect(data.phoneMobile).to.be.a('string');
                expect(data.phoneMobile).to.be("");
                expect(data.fax).to.be.a('string');
                expect(data.fax).to.be("");
                expect(data.telex).to.be.a('string');
                expect(data.telex).to.be("");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.URL).to.be.a('string');
                expect(data.URL).to.be("");
                expect(data.eANNumber).to.be.a('string');
                expect(data.eANNumber).to.be("");
                expect(data.vATNumber).to.be.a('string');
                expect(data.vATNumber).to.be("");
                expect(data.blocked).to.be.a('boolean');
                expect(data.blocked).to.be(false);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.memos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                expect(data.pageName).to.be.a('string');
                expect(data.pageName).to.be("");
                expect(data.plainText).to.be.a('string');
                expect(data.plainText).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.recordID).to.be.a('number');
                expect(data.recordID).to.be("0");

                      }
            }
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                expect(data.ID).to.be.a('string');
                expect(data.ID).to.be("");
                expect(data.attribute).to.be.a('string');
                expect(data.attribute).to.be("");
                expect(data.option).to.be.a('string');
                expect(data.option).to.be("");
                expect(data.comment).to.be.a('string');
                expect(data.comment).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.changes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.by).to.be.a('string');
                expect(data.by).to.be("");
                {
                  let dataCtr = data.fields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.attachments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                expect(data.ID).to.be.a('number');
                expect(data.ID).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.linked).to.be.a(Date);
                expect(data.linked).to.be(new Date());
                expect(data.mD5Hash).to.be.a('string');
                expect(data.mD5Hash).to.be("");
                expect(data.showOnWeb).to.be.a('boolean');
                expect(data.showOnWeb).to.be(false);

                      }
            }
            expect(data.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                  expect(data.conditions.creditLimit).to.be.a('number');
              expect(data.conditions.creditLimit).to.be(0.0);
              expect(data.conditions.creditMax).to.be.a('number');
              expect(data.conditions.creditMax).to.be(0.0);
              expect(data.conditions.disableSale).to.be.a('boolean');
              expect(data.conditions.disableSale).to.be(false);
              expect(data.conditions.disableRetail).to.be.a('boolean');
              expect(data.conditions.disableRetail).to.be(false);
            expect(data.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                  expect(data.sendTo.printer).to.be.a('boolean');
              expect(data.sendTo.printer).to.be(false);
              expect(data.sendTo.claimToPrinter).to.be.a('boolean');
              expect(data.sendTo.claimToPrinter).to.be(false);
              expect(data.sendTo.email).to.be.a('boolean');
              expect(data.sendTo.email).to.be(false);
              expect(data.sendTo.eDIInvoice).to.be.a('boolean');
              expect(data.sendTo.eDIInvoice).to.be(false);
              expect(data.sendTo.publishingSystem).to.be.a('boolean');
              expect(data.sendTo.publishingSystem).to.be(false);
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be("0");
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.alias).to.be.a('string');
            expect(data.alias).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.address3).to.be.a('string');
            expect(data.address3).to.be("");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("");
            expect(data.balanceAmount).to.be.a('number');
            expect(data.balanceAmount).to.be(0.0);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.phoneLocal).to.be.a('string');
            expect(data.phoneLocal).to.be("");
            expect(data.phoneMobile).to.be.a('string');
            expect(data.phoneMobile).to.be("");
            expect(data.phoneFax).to.be.a('string');
            expect(data.phoneFax).to.be("");
            expect(data.countryCode).to.be.a('string');
            expect(data.countryCode).to.be("");
            expect(data.originCountryCode).to.be.a('string');
            expect(data.originCountryCode).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.salesPerson).to.be.a('string');
            expect(data.salesPerson).to.be("");
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.useItemRecivers).to.be.a('boolean');
            expect(data.useItemRecivers).to.be(false);
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.noVat).to.be.a('boolean');
            expect(data.noVat).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.blocked).to.be.a('boolean');
            expect(data.blocked).to.be(false);
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("Male");
            expect(data.priceGroup).to.be.a('number');
            expect(data.priceGroup).to.be(0);
            expect(data.billingFee).to.be.a('number');
            expect(data.billingFee).to.be(0.0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomerCard', function() {
        it('should call customerGetCustomerCard successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomerCard call and complete the assertions
          /*
          var customer = "customer_example";

          instance.customerGetCustomerCard(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralCreditCard);
            expect(data.cardType).to.be.a('number');
            expect(data.cardType).to.be(0);
            expect(data.cardNumber).to.be.a('string');
            expect(data.cardNumber).to.be("");
            expect(data.expDate).to.be.a(Date);
            expect(data.expDate).to.be(new Date());
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomerCount', function() {
        it('should call customerGetCustomerCount successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomerCount call and complete the assertions
          /*
          var opts = {};
          opts.group = "group_example";
          opts.zipcode = "zipcode_example";
          opts.country = "country_example";
          opts.salesperson = "salesperson_example";
          opts.paymentterm = "paymentterm_example";
          opts.paymentmode = "paymentmode_example";
          opts.novat = true;
          opts.blocked = true;
          opts.attribute = "attribute_example";
          opts.attributecomment = "attributecomment_example";
          opts.attributeoption = "attributeoption_example";
          opts.memo = "memo_example";
          opts.deleted = true;
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");

          instance.customerGetCustomerCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomerInvoices', function() {
        it('should call customerGetCustomerInvoices successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomerInvoices call and complete the assertions
          /*
          var customer = "customer_example";

          instance.customerGetCustomerInvoices(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.cNumber).to.be.a('string');
              expect(data.cNumber).to.be("");
              expect(data.cName).to.be.a('string');
              expect(data.cName).to.be("");
              expect(data.cAddress1).to.be.a('string');
              expect(data.cAddress1).to.be("");
              expect(data.cAddress2).to.be.a('string');
              expect(data.cAddress2).to.be("");
              expect(data.cZipCode).to.be.a('string');
              expect(data.cZipCode).to.be("");
              expect(data.cCountryCode).to.be.a('string');
              expect(data.cCountryCode).to.be("");
              expect(data.cSSNumber).to.be.a('string');
              expect(data.cSSNumber).to.be("");
              expect(data.cPhone).to.be.a('string');
              expect(data.cPhone).to.be("");
              expect(data.cContact).to.be.a('string');
              expect(data.cContact).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.orderNumber).to.be.a('number');
              expect(data.orderNumber).to.be(0);
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.discountPercent).to.be.a('number');
              expect(data.discountPercent).to.be(0.0);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.totalAmountWithTax).to.be.a('number');
              expect(data.totalAmountWithTax).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.settledType).to.be.a('number');
              expect(data.settledType).to.be(0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.salePerson).to.be.a('string');
              expect(data.salePerson).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.salesType).to.be.a('number');
              expect(data.salesType).to.be(0);
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.iRNumber).to.be.a('string');
              expect(data.iRNumber).to.be("");
              expect(data.iRName).to.be.a('string');
              expect(data.iRName).to.be("");
              expect(data.iRAddress1).to.be.a('string');
              expect(data.iRAddress1).to.be("");
              expect(data.iRAddress2).to.be.a('string');
              expect(data.iRAddress2).to.be("");
              expect(data.iRZipCode).to.be.a('string');
              expect(data.iRZipCode).to.be("");
              expect(data.iRContact).to.be.a('string');
              expect(data.iRContact).to.be("");
              expect(data.externalInvoiceNumber).to.be.a('number');
              expect(data.externalInvoiceNumber).to.be(0);
              expect(data.claimNumber).to.be.a('number');
              expect(data.claimNumber).to.be(0);
              expect(data.claimDate).to.be.a(Date);
              expect(data.claimDate).to.be(new Date());
              expect(data.register).to.be.a('string');
              expect(data.register).to.be("");
              expect(data.posInvoice).to.be.a('number');
              expect(data.posInvoice).to.be(0);
              expect(data.journalId).to.be.a('number');
              expect(data.journalId).to.be(0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                  expect(data.sequenceNumber).to.be.a('number');
                  expect(data.sequenceNumber).to.be(0);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.discountAmountWithTax).to.be.a('number');
                  expect(data.discountAmountWithTax).to.be(0.0);
                  expect(data.totalAmount).to.be.a('number');
                  expect(data.totalAmount).to.be(0.0);
                  expect(data.totalAmountWithTax).to.be.a('number');
                  expect(data.totalAmountWithTax).to.be(0.0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomerOrders', function() {
        it('should call customerGetCustomerOrders successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomerOrders call and complete the assertions
          /*
          var customer = "customer_example";

          instance.customerGetCustomerOrders(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesOrderModel);
              expect(data._number).to.be.a('number');
              expect(data._number).to.be(0);
              expect(data.customer).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
                    expect(data.customer.deleted).to.be.a('boolean');
                expect(data.customer.deleted).to.be(false);
                {
                  let dataCtr = data.customer.contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                    expect(data._number).to.be.a('string');
                    expect(data._number).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
                    expect(data.address1).to.be.a('string');
                    expect(data.address1).to.be("");
                    expect(data.address2).to.be.a('string');
                    expect(data.address2).to.be("");
                    expect(data.address3).to.be.a('string');
                    expect(data.address3).to.be("");
                    expect(data.city).to.be.a('string');
                    expect(data.city).to.be("");
                    expect(data.zipCode).to.be.a('string');
                    expect(data.zipCode).to.be("");
                    expect(data.countryCode).to.be.a('string');
                    expect(data.countryCode).to.be("");
                    expect(data.department).to.be.a('string');
                    expect(data.department).to.be("");
                    expect(data.sSNumber).to.be.a('string');
                    expect(data.sSNumber).to.be("");
                    expect(data.phone).to.be.a('string');
                    expect(data.phone).to.be("");
                    expect(data.phoneLocal).to.be.a('string');
                    expect(data.phoneLocal).to.be("");
                    expect(data.phoneMobile).to.be.a('string');
                    expect(data.phoneMobile).to.be("");
                    expect(data.fax).to.be.a('string');
                    expect(data.fax).to.be("");
                    expect(data.telex).to.be.a('string');
                    expect(data.telex).to.be("");
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("");
                    expect(data.URL).to.be.a('string');
                    expect(data.URL).to.be("");
                    expect(data.jobTitleCode).to.be.a('string');
                    expect(data.jobTitleCode).to.be("");
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
    
                          }
                }
                {
                  let dataCtr = data.customer.recivers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                    expect(data._number).to.be.a('string');
                    expect(data._number).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.address1).to.be.a('string');
                    expect(data.address1).to.be("");
                    expect(data.address2).to.be.a('string');
                    expect(data.address2).to.be("");
                    expect(data.address3).to.be.a('string');
                    expect(data.address3).to.be("");
                    expect(data.address4).to.be.a('string');
                    expect(data.address4).to.be("");
                    expect(data.city).to.be.a('string');
                    expect(data.city).to.be("");
                    expect(data.zipCode).to.be.a('string');
                    expect(data.zipCode).to.be("");
                    expect(data.countryCode).to.be.a('string');
                    expect(data.countryCode).to.be("");
                    expect(data.sSNumber).to.be.a('string');
                    expect(data.sSNumber).to.be("");
                    expect(data.phone).to.be.a('string');
                    expect(data.phone).to.be("");
                    expect(data.phoneLocal).to.be.a('string');
                    expect(data.phoneLocal).to.be("");
                    expect(data.phoneMobile).to.be.a('string');
                    expect(data.phoneMobile).to.be("");
                    expect(data.fax).to.be.a('string');
                    expect(data.fax).to.be("");
                    expect(data.telex).to.be.a('string');
                    expect(data.telex).to.be("");
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("");
                    expect(data.URL).to.be.a('string');
                    expect(data.URL).to.be("");
                    expect(data.eANNumber).to.be.a('string');
                    expect(data.eANNumber).to.be("");
                    expect(data.vATNumber).to.be.a('string');
                    expect(data.vATNumber).to.be("");
                    expect(data.blocked).to.be.a('boolean');
                    expect(data.blocked).to.be(false);
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
    
                          }
                }
                {
                  let dataCtr = data.customer.memos;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                    expect(data.pageName).to.be.a('string');
                    expect(data.pageName).to.be("");
                    expect(data.plainText).to.be.a('string');
                    expect(data.plainText).to.be("");
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
                    expect(data.recordID).to.be.a('number');
                    expect(data.recordID).to.be("0");
    
                          }
                }
                {
                  let dataCtr = data.customer.properties;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                    expect(data.ID).to.be.a('string');
                    expect(data.ID).to.be("");
                    expect(data.attribute).to.be.a('string');
                    expect(data.attribute).to.be("");
                    expect(data.option).to.be.a('string');
                    expect(data.option).to.be("");
                    expect(data.comment).to.be.a('string');
                    expect(data.comment).to.be("");
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
    
                          }
                }
                {
                  let dataCtr = data.customer.changes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
                    expect(data.by).to.be.a('string');
                    expect(data.by).to.be("");
                    {
                      let dataCtr = data.fields;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.value).to.be.a('string');
                        expect(data.value).to.be("");
        
                              }
                    }
    
                          }
                }
                {
                  let dataCtr = data.customer.attachments;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                    expect(data.ID).to.be.a('number');
                    expect(data.ID).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.size).to.be.a('number');
                    expect(data.size).to.be(0);
                    expect(data.linked).to.be.a(Date);
                    expect(data.linked).to.be(new Date());
                    expect(data.mD5Hash).to.be.a('string');
                    expect(data.mD5Hash).to.be("");
                    expect(data.showOnWeb).to.be.a('boolean');
                    expect(data.showOnWeb).to.be(false);
    
                          }
                }
                expect(data.customer.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                      expect(data.customer.conditions.creditLimit).to.be.a('number');
                  expect(data.customer.conditions.creditLimit).to.be(0.0);
                  expect(data.customer.conditions.creditMax).to.be.a('number');
                  expect(data.customer.conditions.creditMax).to.be(0.0);
                  expect(data.customer.conditions.disableSale).to.be.a('boolean');
                  expect(data.customer.conditions.disableSale).to.be(false);
                  expect(data.customer.conditions.disableRetail).to.be.a('boolean');
                  expect(data.customer.conditions.disableRetail).to.be(false);
                expect(data.customer.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                      expect(data.customer.sendTo.printer).to.be.a('boolean');
                  expect(data.customer.sendTo.printer).to.be(false);
                  expect(data.customer.sendTo.claimToPrinter).to.be.a('boolean');
                  expect(data.customer.sendTo.claimToPrinter).to.be(false);
                  expect(data.customer.sendTo.email).to.be.a('boolean');
                  expect(data.customer.sendTo.email).to.be(false);
                  expect(data.customer.sendTo.eDIInvoice).to.be.a('boolean');
                  expect(data.customer.sendTo.eDIInvoice).to.be(false);
                  expect(data.customer.sendTo.publishingSystem).to.be.a('boolean');
                  expect(data.customer.sendTo.publishingSystem).to.be(false);
                expect(data.customer.recordID).to.be.a('number');
                expect(data.customer.recordID).to.be("0");
                expect(data.customer._number).to.be.a('string');
                expect(data.customer._number).to.be("");
                expect(data.customer.name).to.be.a('string');
                expect(data.customer.name).to.be("");
                expect(data.customer.alias).to.be.a('string');
                expect(data.customer.alias).to.be("");
                expect(data.customer.address1).to.be.a('string');
                expect(data.customer.address1).to.be("");
                expect(data.customer.address2).to.be.a('string');
                expect(data.customer.address2).to.be("");
                expect(data.customer.address3).to.be.a('string');
                expect(data.customer.address3).to.be("");
                expect(data.customer.zipCode).to.be.a('string');
                expect(data.customer.zipCode).to.be("");
                expect(data.customer.balanceAmount).to.be.a('number');
                expect(data.customer.balanceAmount).to.be(0.0);
                expect(data.customer.phone).to.be.a('string');
                expect(data.customer.phone).to.be("");
                expect(data.customer.phoneLocal).to.be.a('string');
                expect(data.customer.phoneLocal).to.be("");
                expect(data.customer.phoneMobile).to.be.a('string');
                expect(data.customer.phoneMobile).to.be("");
                expect(data.customer.phoneFax).to.be.a('string');
                expect(data.customer.phoneFax).to.be("");
                expect(data.customer.countryCode).to.be.a('string');
                expect(data.customer.countryCode).to.be("");
                expect(data.customer.originCountryCode).to.be.a('string');
                expect(data.customer.originCountryCode).to.be("");
                expect(data.customer.email).to.be.a('string');
                expect(data.customer.email).to.be("");
                expect(data.customer.password).to.be.a('string');
                expect(data.customer.password).to.be("");
                expect(data.customer.group).to.be.a('string');
                expect(data.customer.group).to.be("");
                expect(data.customer.salesPerson).to.be.a('string');
                expect(data.customer.salesPerson).to.be("");
                expect(data.customer.discount).to.be.a('number');
                expect(data.customer.discount).to.be(0.0);
                expect(data.customer.useItemRecivers).to.be.a('boolean');
                expect(data.customer.useItemRecivers).to.be(false);
                expect(data.customer.paymentTerm).to.be.a('string');
                expect(data.customer.paymentTerm).to.be("");
                expect(data.customer.paymentMode).to.be.a('string');
                expect(data.customer.paymentMode).to.be("");
                expect(data.customer.currencyCode).to.be.a('string');
                expect(data.customer.currencyCode).to.be("");
                expect(data.customer.noVat).to.be.a('boolean');
                expect(data.customer.noVat).to.be(false);
                expect(data.customer.ledgerCode).to.be.a('string');
                expect(data.customer.ledgerCode).to.be("");
                expect(data.customer.blocked).to.be.a('boolean');
                expect(data.customer.blocked).to.be(false);
                expect(data.customer.gender).to.be.a('string');
                expect(data.customer.gender).to.be("Male");
                expect(data.customer.priceGroup).to.be.a('number');
                expect(data.customer.priceGroup).to.be(0);
                expect(data.customer.billingFee).to.be.a('number');
                expect(data.customer.billingFee).to.be(0.0);
                expect(data.customer.modified).to.be.a(Date);
                expect(data.customer.modified).to.be(new Date());
              expect(data.cContact).to.be.a('string');
              expect(data.cContact).to.be("");
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.orderDate).to.be.a(Date);
              expect(data.orderDate).to.be(new Date());
              expect(data.customerOrderDate).to.be.a(Date);
              expect(data.customerOrderDate).to.be(new Date());
              expect(data.customerOrderNumber).to.be.a('string');
              expect(data.customerOrderNumber).to.be("");
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.settledType).to.be.a('number');
              expect(data.settledType).to.be(0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.salePerson).to.be.a('string');
              expect(data.salePerson).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("InProcess");
              expect(data.deliveryStatus).to.be.a('string');
              expect(data.deliveryStatus).to.be("InProcess");
              expect(data.deliverTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                    expect(data.deliverTo._number).to.be.a('string');
                expect(data.deliverTo._number).to.be("");
                expect(data.deliverTo.name).to.be.a('string');
                expect(data.deliverTo.name).to.be("");
                expect(data.deliverTo.address1).to.be.a('string');
                expect(data.deliverTo.address1).to.be("");
                expect(data.deliverTo.address2).to.be.a('string');
                expect(data.deliverTo.address2).to.be("");
                expect(data.deliverTo.address3).to.be.a('string');
                expect(data.deliverTo.address3).to.be("");
                expect(data.deliverTo.address4).to.be.a('string');
                expect(data.deliverTo.address4).to.be("");
                expect(data.deliverTo.city).to.be.a('string');
                expect(data.deliverTo.city).to.be("");
                expect(data.deliverTo.zipCode).to.be.a('string');
                expect(data.deliverTo.zipCode).to.be("");
                expect(data.deliverTo.countryCode).to.be.a('string');
                expect(data.deliverTo.countryCode).to.be("");
                expect(data.deliverTo.sSNumber).to.be.a('string');
                expect(data.deliverTo.sSNumber).to.be("");
                expect(data.deliverTo.phone).to.be.a('string');
                expect(data.deliverTo.phone).to.be("");
                expect(data.deliverTo.phoneLocal).to.be.a('string');
                expect(data.deliverTo.phoneLocal).to.be("");
                expect(data.deliverTo.phoneMobile).to.be.a('string');
                expect(data.deliverTo.phoneMobile).to.be("");
                expect(data.deliverTo.fax).to.be.a('string');
                expect(data.deliverTo.fax).to.be("");
                expect(data.deliverTo.telex).to.be.a('string');
                expect(data.deliverTo.telex).to.be("");
                expect(data.deliverTo.email).to.be.a('string');
                expect(data.deliverTo.email).to.be("");
                expect(data.deliverTo.URL).to.be.a('string');
                expect(data.deliverTo.URL).to.be("");
                expect(data.deliverTo.eANNumber).to.be.a('string');
                expect(data.deliverTo.eANNumber).to.be("");
                expect(data.deliverTo.vATNumber).to.be.a('string');
                expect(data.deliverTo.vATNumber).to.be("");
                expect(data.deliverTo.blocked).to.be.a('boolean');
                expect(data.deliverTo.blocked).to.be(false);
                expect(data.deliverTo.modified).to.be.a(Date);
                expect(data.deliverTo.modified).to.be(new Date());
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesOrderLineModel);
                  expect(data.sequenceNumber).to.be.a('number');
                  expect(data.sequenceNumber).to.be(0);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.location).to.be.a('string');
                  expect(data.location).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.quantityDelivered).to.be.a('number');
                  expect(data.quantityDelivered).to.be(0.0);
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountPercent).to.be.a('number');
                  expect(data.discountPercent).to.be(0.0);
                  expect(data.totalAmount).to.be.a('number');
                  expect(data.totalAmount).to.be(0.0);
                  expect(data.totalAmountWithTax).to.be.a('number');
                  expect(data.totalAmountWithTax).to.be(0.0);
                  expect(data.barCode).to.be.a('string');
                  expect(data.barCode).to.be("");
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.eDIOrderNumber).to.be.a('string');
                  expect(data.eDIOrderNumber).to.be("");
                  expect(data.uNDOrderNumber).to.be.a('number');
                  expect(data.uNDOrderNumber).to.be(0);
                  expect(data.memo).to.be.a('string');
                  expect(data.memo).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomerQuote', function() {
        it('should call customerGetCustomerQuote successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomerQuote call and complete the assertions
          /*
          var customer = "customer_example";

          instance.customerGetCustomerQuote(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesQuoteHead);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.customer).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
                    expect(data.customer.deleted).to.be.a('boolean');
                expect(data.customer.deleted).to.be(false);
                {
                  let dataCtr = data.customer.contacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                    expect(data._number).to.be.a('string');
                    expect(data._number).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
                    expect(data.address1).to.be.a('string');
                    expect(data.address1).to.be("");
                    expect(data.address2).to.be.a('string');
                    expect(data.address2).to.be("");
                    expect(data.address3).to.be.a('string');
                    expect(data.address3).to.be("");
                    expect(data.city).to.be.a('string');
                    expect(data.city).to.be("");
                    expect(data.zipCode).to.be.a('string');
                    expect(data.zipCode).to.be("");
                    expect(data.countryCode).to.be.a('string');
                    expect(data.countryCode).to.be("");
                    expect(data.department).to.be.a('string');
                    expect(data.department).to.be("");
                    expect(data.sSNumber).to.be.a('string');
                    expect(data.sSNumber).to.be("");
                    expect(data.phone).to.be.a('string');
                    expect(data.phone).to.be("");
                    expect(data.phoneLocal).to.be.a('string');
                    expect(data.phoneLocal).to.be("");
                    expect(data.phoneMobile).to.be.a('string');
                    expect(data.phoneMobile).to.be("");
                    expect(data.fax).to.be.a('string');
                    expect(data.fax).to.be("");
                    expect(data.telex).to.be.a('string');
                    expect(data.telex).to.be("");
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("");
                    expect(data.URL).to.be.a('string');
                    expect(data.URL).to.be("");
                    expect(data.jobTitleCode).to.be.a('string');
                    expect(data.jobTitleCode).to.be("");
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
    
                          }
                }
                {
                  let dataCtr = data.customer.recivers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                    expect(data._number).to.be.a('string');
                    expect(data._number).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.address1).to.be.a('string');
                    expect(data.address1).to.be("");
                    expect(data.address2).to.be.a('string');
                    expect(data.address2).to.be("");
                    expect(data.address3).to.be.a('string');
                    expect(data.address3).to.be("");
                    expect(data.address4).to.be.a('string');
                    expect(data.address4).to.be("");
                    expect(data.city).to.be.a('string');
                    expect(data.city).to.be("");
                    expect(data.zipCode).to.be.a('string');
                    expect(data.zipCode).to.be("");
                    expect(data.countryCode).to.be.a('string');
                    expect(data.countryCode).to.be("");
                    expect(data.sSNumber).to.be.a('string');
                    expect(data.sSNumber).to.be("");
                    expect(data.phone).to.be.a('string');
                    expect(data.phone).to.be("");
                    expect(data.phoneLocal).to.be.a('string');
                    expect(data.phoneLocal).to.be("");
                    expect(data.phoneMobile).to.be.a('string');
                    expect(data.phoneMobile).to.be("");
                    expect(data.fax).to.be.a('string');
                    expect(data.fax).to.be("");
                    expect(data.telex).to.be.a('string');
                    expect(data.telex).to.be("");
                    expect(data.email).to.be.a('string');
                    expect(data.email).to.be("");
                    expect(data.URL).to.be.a('string');
                    expect(data.URL).to.be("");
                    expect(data.eANNumber).to.be.a('string');
                    expect(data.eANNumber).to.be("");
                    expect(data.vATNumber).to.be.a('string');
                    expect(data.vATNumber).to.be("");
                    expect(data.blocked).to.be.a('boolean');
                    expect(data.blocked).to.be(false);
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
    
                          }
                }
                {
                  let dataCtr = data.customer.memos;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                    expect(data.pageName).to.be.a('string');
                    expect(data.pageName).to.be("");
                    expect(data.plainText).to.be.a('string');
                    expect(data.plainText).to.be("");
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
                    expect(data.recordID).to.be.a('number');
                    expect(data.recordID).to.be("0");
    
                          }
                }
                {
                  let dataCtr = data.customer.properties;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                    expect(data.ID).to.be.a('string');
                    expect(data.ID).to.be("");
                    expect(data.attribute).to.be.a('string');
                    expect(data.attribute).to.be("");
                    expect(data.option).to.be.a('string');
                    expect(data.option).to.be("");
                    expect(data.comment).to.be.a('string');
                    expect(data.comment).to.be("");
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
    
                          }
                }
                {
                  let dataCtr = data.customer.changes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                    expect(data.modified).to.be.a(Date);
                    expect(data.modified).to.be(new Date());
                    expect(data.by).to.be.a('string');
                    expect(data.by).to.be("");
                    {
                      let dataCtr = data.fields;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.value).to.be.a('string');
                        expect(data.value).to.be("");
        
                              }
                    }
    
                          }
                }
                {
                  let dataCtr = data.customer.attachments;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                    expect(data.ID).to.be.a('number');
                    expect(data.ID).to.be(0);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.size).to.be.a('number');
                    expect(data.size).to.be(0);
                    expect(data.linked).to.be.a(Date);
                    expect(data.linked).to.be(new Date());
                    expect(data.mD5Hash).to.be.a('string');
                    expect(data.mD5Hash).to.be("");
                    expect(data.showOnWeb).to.be.a('boolean');
                    expect(data.showOnWeb).to.be(false);
    
                          }
                }
                expect(data.customer.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                      expect(data.customer.conditions.creditLimit).to.be.a('number');
                  expect(data.customer.conditions.creditLimit).to.be(0.0);
                  expect(data.customer.conditions.creditMax).to.be.a('number');
                  expect(data.customer.conditions.creditMax).to.be(0.0);
                  expect(data.customer.conditions.disableSale).to.be.a('boolean');
                  expect(data.customer.conditions.disableSale).to.be(false);
                  expect(data.customer.conditions.disableRetail).to.be.a('boolean');
                  expect(data.customer.conditions.disableRetail).to.be(false);
                expect(data.customer.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                      expect(data.customer.sendTo.printer).to.be.a('boolean');
                  expect(data.customer.sendTo.printer).to.be(false);
                  expect(data.customer.sendTo.claimToPrinter).to.be.a('boolean');
                  expect(data.customer.sendTo.claimToPrinter).to.be(false);
                  expect(data.customer.sendTo.email).to.be.a('boolean');
                  expect(data.customer.sendTo.email).to.be(false);
                  expect(data.customer.sendTo.eDIInvoice).to.be.a('boolean');
                  expect(data.customer.sendTo.eDIInvoice).to.be(false);
                  expect(data.customer.sendTo.publishingSystem).to.be.a('boolean');
                  expect(data.customer.sendTo.publishingSystem).to.be(false);
                expect(data.customer.recordID).to.be.a('number');
                expect(data.customer.recordID).to.be("0");
                expect(data.customer._number).to.be.a('string');
                expect(data.customer._number).to.be("");
                expect(data.customer.name).to.be.a('string');
                expect(data.customer.name).to.be("");
                expect(data.customer.alias).to.be.a('string');
                expect(data.customer.alias).to.be("");
                expect(data.customer.address1).to.be.a('string');
                expect(data.customer.address1).to.be("");
                expect(data.customer.address2).to.be.a('string');
                expect(data.customer.address2).to.be("");
                expect(data.customer.address3).to.be.a('string');
                expect(data.customer.address3).to.be("");
                expect(data.customer.zipCode).to.be.a('string');
                expect(data.customer.zipCode).to.be("");
                expect(data.customer.balanceAmount).to.be.a('number');
                expect(data.customer.balanceAmount).to.be(0.0);
                expect(data.customer.phone).to.be.a('string');
                expect(data.customer.phone).to.be("");
                expect(data.customer.phoneLocal).to.be.a('string');
                expect(data.customer.phoneLocal).to.be("");
                expect(data.customer.phoneMobile).to.be.a('string');
                expect(data.customer.phoneMobile).to.be("");
                expect(data.customer.phoneFax).to.be.a('string');
                expect(data.customer.phoneFax).to.be("");
                expect(data.customer.countryCode).to.be.a('string');
                expect(data.customer.countryCode).to.be("");
                expect(data.customer.originCountryCode).to.be.a('string');
                expect(data.customer.originCountryCode).to.be("");
                expect(data.customer.email).to.be.a('string');
                expect(data.customer.email).to.be("");
                expect(data.customer.password).to.be.a('string');
                expect(data.customer.password).to.be("");
                expect(data.customer.group).to.be.a('string');
                expect(data.customer.group).to.be("");
                expect(data.customer.salesPerson).to.be.a('string');
                expect(data.customer.salesPerson).to.be("");
                expect(data.customer.discount).to.be.a('number');
                expect(data.customer.discount).to.be(0.0);
                expect(data.customer.useItemRecivers).to.be.a('boolean');
                expect(data.customer.useItemRecivers).to.be(false);
                expect(data.customer.paymentTerm).to.be.a('string');
                expect(data.customer.paymentTerm).to.be("");
                expect(data.customer.paymentMode).to.be.a('string');
                expect(data.customer.paymentMode).to.be("");
                expect(data.customer.currencyCode).to.be.a('string');
                expect(data.customer.currencyCode).to.be("");
                expect(data.customer.noVat).to.be.a('boolean');
                expect(data.customer.noVat).to.be(false);
                expect(data.customer.ledgerCode).to.be.a('string');
                expect(data.customer.ledgerCode).to.be("");
                expect(data.customer.blocked).to.be.a('boolean');
                expect(data.customer.blocked).to.be(false);
                expect(data.customer.gender).to.be.a('string');
                expect(data.customer.gender).to.be("Male");
                expect(data.customer.priceGroup).to.be.a('number');
                expect(data.customer.priceGroup).to.be(0);
                expect(data.customer.billingFee).to.be.a('number');
                expect(data.customer.billingFee).to.be(0.0);
                expect(data.customer.modified).to.be.a(Date);
                expect(data.customer.modified).to.be(new Date());
              expect(data.contact).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                    expect(data.contact._number).to.be.a('string');
                expect(data.contact._number).to.be("");
                expect(data.contact.name).to.be.a('string');
                expect(data.contact.name).to.be("");
                expect(data.contact.title).to.be.a('string');
                expect(data.contact.title).to.be("");
                expect(data.contact.address1).to.be.a('string');
                expect(data.contact.address1).to.be("");
                expect(data.contact.address2).to.be.a('string');
                expect(data.contact.address2).to.be("");
                expect(data.contact.address3).to.be.a('string');
                expect(data.contact.address3).to.be("");
                expect(data.contact.city).to.be.a('string');
                expect(data.contact.city).to.be("");
                expect(data.contact.zipCode).to.be.a('string');
                expect(data.contact.zipCode).to.be("");
                expect(data.contact.countryCode).to.be.a('string');
                expect(data.contact.countryCode).to.be("");
                expect(data.contact.department).to.be.a('string');
                expect(data.contact.department).to.be("");
                expect(data.contact.sSNumber).to.be.a('string');
                expect(data.contact.sSNumber).to.be("");
                expect(data.contact.phone).to.be.a('string');
                expect(data.contact.phone).to.be("");
                expect(data.contact.phoneLocal).to.be.a('string');
                expect(data.contact.phoneLocal).to.be("");
                expect(data.contact.phoneMobile).to.be.a('string');
                expect(data.contact.phoneMobile).to.be("");
                expect(data.contact.fax).to.be.a('string');
                expect(data.contact.fax).to.be("");
                expect(data.contact.telex).to.be.a('string');
                expect(data.contact.telex).to.be("");
                expect(data.contact.email).to.be.a('string');
                expect(data.contact.email).to.be("");
                expect(data.contact.URL).to.be.a('string');
                expect(data.contact.URL).to.be("");
                expect(data.contact.jobTitleCode).to.be.a('string');
                expect(data.contact.jobTitleCode).to.be("");
                expect(data.contact.modified).to.be.a(Date);
                expect(data.contact.modified).to.be(new Date());
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.salePerson).to.be.a('string');
              expect(data.salePerson).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.deliverTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                    expect(data.deliverTo._number).to.be.a('string');
                expect(data.deliverTo._number).to.be("");
                expect(data.deliverTo.name).to.be.a('string');
                expect(data.deliverTo.name).to.be("");
                expect(data.deliverTo.address1).to.be.a('string');
                expect(data.deliverTo.address1).to.be("");
                expect(data.deliverTo.address2).to.be.a('string');
                expect(data.deliverTo.address2).to.be("");
                expect(data.deliverTo.address3).to.be.a('string');
                expect(data.deliverTo.address3).to.be("");
                expect(data.deliverTo.address4).to.be.a('string');
                expect(data.deliverTo.address4).to.be("");
                expect(data.deliverTo.city).to.be.a('string');
                expect(data.deliverTo.city).to.be("");
                expect(data.deliverTo.zipCode).to.be.a('string');
                expect(data.deliverTo.zipCode).to.be("");
                expect(data.deliverTo.countryCode).to.be.a('string');
                expect(data.deliverTo.countryCode).to.be("");
                expect(data.deliverTo.sSNumber).to.be.a('string');
                expect(data.deliverTo.sSNumber).to.be("");
                expect(data.deliverTo.phone).to.be.a('string');
                expect(data.deliverTo.phone).to.be("");
                expect(data.deliverTo.phoneLocal).to.be.a('string');
                expect(data.deliverTo.phoneLocal).to.be("");
                expect(data.deliverTo.phoneMobile).to.be.a('string');
                expect(data.deliverTo.phoneMobile).to.be("");
                expect(data.deliverTo.fax).to.be.a('string');
                expect(data.deliverTo.fax).to.be("");
                expect(data.deliverTo.telex).to.be.a('string');
                expect(data.deliverTo.telex).to.be("");
                expect(data.deliverTo.email).to.be.a('string');
                expect(data.deliverTo.email).to.be("");
                expect(data.deliverTo.URL).to.be.a('string');
                expect(data.deliverTo.URL).to.be("");
                expect(data.deliverTo.eANNumber).to.be.a('string');
                expect(data.deliverTo.eANNumber).to.be("");
                expect(data.deliverTo.vATNumber).to.be.a('string');
                expect(data.deliverTo.vATNumber).to.be("");
                expect(data.deliverTo.blocked).to.be.a('boolean');
                expect(data.deliverTo.blocked).to.be(false);
                expect(data.deliverTo.modified).to.be.a(Date);
                expect(data.deliverTo.modified).to.be(new Date());
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesQuoteLine);
                  expect(data.sequenceNumber).to.be.a('number');
                  expect(data.sequenceNumber).to.be(0);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountPercent).to.be.a('number');
                  expect(data.discountPercent).to.be(0.0);
                  expect(data.totalAmount).to.be.a('number');
                  expect(data.totalAmount).to.be(0.0);
                  expect(data.totalAmountWithTax).to.be.a('number');
                  expect(data.totalAmountWithTax).to.be(0.0);
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.memo).to.be.a('string');
                  expect(data.memo).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomerTransactions', function() {
        it('should call customerGetCustomerTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomerTransactions call and complete the assertions
          /*
          var customer = "customer_example";

          instance.customerGetCustomerTransactions(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsTransactionsModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.origin).to.be.a('string');
              expect(data.origin).to.be("GLJournal");
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be(0);
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.warehouse).to.be.a('string');
              expect(data.warehouse).to.be("");
              expect(data.subGroup1).to.be.a('string');
              expect(data.subGroup1).to.be("");
              expect(data.subGroup2).to.be.a('string');
              expect(data.subGroup2).to.be("");
              expect(data.subGroup3).to.be.a('string');
              expect(data.subGroup3).to.be("");
              expect(data.subGroup4).to.be.a('string');
              expect(data.subGroup4).to.be("");
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.transactionCode).to.be.a('string');
              expect(data.transactionCode).to.be("InTransactionJournal");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("Manual");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.costAmount).to.be.a('number');
              expect(data.costAmount).to.be(0.0);
              expect(data.salesAmount).to.be.a('number');
              expect(data.salesAmount).to.be(0.0);
              expect(data.inventOnHand).to.be.a('number');
              expect(data.inventOnHand).to.be(0.0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.numberOfPackages).to.be.a('number');
              expect(data.numberOfPackages).to.be(0.0);
              expect(data.countedQuantity).to.be.a('number');
              expect(data.countedQuantity).to.be(0.0);
              expect(data.jobNumber).to.be.a('string');
              expect(data.jobNumber).to.be("");
              expect(data.vendorPrice).to.be.a('number');
              expect(data.vendorPrice).to.be(0.0);
              expect(data.vendorDiscount).to.be.a('number');
              expect(data.vendorDiscount).to.be(0.0);
              expect(data.fabrication).to.be.a('number');
              expect(data.fabrication).to.be(0);
              expect(data.batch).to.be.a('string');
              expect(data.batch).to.be("");
              expect(data.batchExpiry).to.be.a(Date);
              expect(data.batchExpiry).to.be(new Date());
              expect(data._typeOf).to.be.a('string');
              expect(data._typeOf).to.be("NotDefined");
              expect(data.purchaseAmount).to.be.a('number');
              expect(data.purchaseAmount).to.be(0.0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.iNPUnitCode).to.be.a('string');
              expect(data.iNPUnitCode).to.be("");
              expect(data.poBatchId).to.be.a('number');
              expect(data.poBatchId).to.be(0);
              expect(data.jobRequestId).to.be.a('string');
              expect(data.jobRequestId).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomers', function() {
        it('should call customerGetCustomers successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomers call and complete the assertions
          /*
          var includeObjects = true;
          var opts = {};
          opts.include = "include_example";

          instance.customerGetCustomers(includeObjects, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              {
                let dataCtr = data.contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.title).to.be.a('string');
                  expect(data.title).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.department).to.be.a('string');
                  expect(data.department).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.jobTitleCode).to.be.a('string');
                  expect(data.jobTitleCode).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.recivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.address4).to.be.a('string');
                  expect(data.address4).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.eANNumber).to.be.a('string');
                  expect(data.eANNumber).to.be("");
                  expect(data.vATNumber).to.be.a('string');
                  expect(data.vATNumber).to.be("");
                  expect(data.blocked).to.be.a('boolean');
                  expect(data.blocked).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.properties;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  expect(data.attribute).to.be.a('string');
                  expect(data.attribute).to.be("");
                  expect(data.option).to.be.a('string');
                  expect(data.option).to.be("");
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              expect(data.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                    expect(data.conditions.creditLimit).to.be.a('number');
                expect(data.conditions.creditLimit).to.be(0.0);
                expect(data.conditions.creditMax).to.be.a('number');
                expect(data.conditions.creditMax).to.be(0.0);
                expect(data.conditions.disableSale).to.be.a('boolean');
                expect(data.conditions.disableSale).to.be(false);
                expect(data.conditions.disableRetail).to.be.a('boolean');
                expect(data.conditions.disableRetail).to.be(false);
              expect(data.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                    expect(data.sendTo.printer).to.be.a('boolean');
                expect(data.sendTo.printer).to.be(false);
                expect(data.sendTo.claimToPrinter).to.be.a('boolean');
                expect(data.sendTo.claimToPrinter).to.be(false);
                expect(data.sendTo.email).to.be.a('boolean');
                expect(data.sendTo.email).to.be(false);
                expect(data.sendTo.eDIInvoice).to.be.a('boolean');
                expect(data.sendTo.eDIInvoice).to.be(false);
                expect(data.sendTo.publishingSystem).to.be.a('boolean');
                expect(data.sendTo.publishingSystem).to.be(false);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.alias).to.be.a('string');
              expect(data.alias).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.balanceAmount).to.be.a('number');
              expect(data.balanceAmount).to.be(0.0);
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.phoneFax).to.be.a('string');
              expect(data.phoneFax).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.originCountryCode).to.be.a('string');
              expect(data.originCountryCode).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.password).to.be.a('string');
              expect(data.password).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.salesPerson).to.be.a('string');
              expect(data.salesPerson).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.useItemRecivers).to.be.a('boolean');
              expect(data.useItemRecivers).to.be(false);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.blocked).to.be.a('boolean');
              expect(data.blocked).to.be(false);
              expect(data.gender).to.be.a('string');
              expect(data.gender).to.be("Male");
              expect(data.priceGroup).to.be.a('number');
              expect(data.priceGroup).to.be(0);
              expect(data.billingFee).to.be.a('number');
              expect(data.billingFee).to.be(0.0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCustomersPaged', function() {
        it('should call customerGetCustomersPaged successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCustomersPaged call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.group = "group_example";
          opts.zipcode = "zipcode_example";
          opts.country = "country_example";
          opts.salesperson = "salesperson_example";
          opts.paymentterm = "paymentterm_example";
          opts.paymentmode = "paymentmode_example";
          opts.novat = true;
          opts.blocked = true;
          opts.attribute = "attribute_example";
          opts.attributecomment = "attributecomment_example";
          opts.attributeoption = "attributeoption_example";
          opts.memo = "memo_example";
          opts.deleted = true;
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.include = "include_example";
          opts.email = "email_example";

          instance.customerGetCustomersPaged(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              {
                let dataCtr = data.contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.title).to.be.a('string');
                  expect(data.title).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.department).to.be.a('string');
                  expect(data.department).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.jobTitleCode).to.be.a('string');
                  expect(data.jobTitleCode).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.recivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.address4).to.be.a('string');
                  expect(data.address4).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.eANNumber).to.be.a('string');
                  expect(data.eANNumber).to.be("");
                  expect(data.vATNumber).to.be.a('string');
                  expect(data.vATNumber).to.be("");
                  expect(data.blocked).to.be.a('boolean');
                  expect(data.blocked).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.properties;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  expect(data.attribute).to.be.a('string');
                  expect(data.attribute).to.be("");
                  expect(data.option).to.be.a('string');
                  expect(data.option).to.be("");
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              expect(data.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                    expect(data.conditions.creditLimit).to.be.a('number');
                expect(data.conditions.creditLimit).to.be(0.0);
                expect(data.conditions.creditMax).to.be.a('number');
                expect(data.conditions.creditMax).to.be(0.0);
                expect(data.conditions.disableSale).to.be.a('boolean');
                expect(data.conditions.disableSale).to.be(false);
                expect(data.conditions.disableRetail).to.be.a('boolean');
                expect(data.conditions.disableRetail).to.be(false);
              expect(data.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                    expect(data.sendTo.printer).to.be.a('boolean');
                expect(data.sendTo.printer).to.be(false);
                expect(data.sendTo.claimToPrinter).to.be.a('boolean');
                expect(data.sendTo.claimToPrinter).to.be(false);
                expect(data.sendTo.email).to.be.a('boolean');
                expect(data.sendTo.email).to.be(false);
                expect(data.sendTo.eDIInvoice).to.be.a('boolean');
                expect(data.sendTo.eDIInvoice).to.be(false);
                expect(data.sendTo.publishingSystem).to.be.a('boolean');
                expect(data.sendTo.publishingSystem).to.be(false);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.alias).to.be.a('string');
              expect(data.alias).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.balanceAmount).to.be.a('number');
              expect(data.balanceAmount).to.be(0.0);
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.phoneFax).to.be.a('string');
              expect(data.phoneFax).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.originCountryCode).to.be.a('string');
              expect(data.originCountryCode).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.password).to.be.a('string');
              expect(data.password).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.salesPerson).to.be.a('string');
              expect(data.salesPerson).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.useItemRecivers).to.be.a('boolean');
              expect(data.useItemRecivers).to.be(false);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.blocked).to.be.a('boolean');
              expect(data.blocked).to.be(false);
              expect(data.gender).to.be.a('string');
              expect(data.gender).to.be("Male");
              expect(data.priceGroup).to.be.a('number');
              expect(data.priceGroup).to.be(0);
              expect(data.billingFee).to.be.a('number');
              expect(data.billingFee).to.be(0.0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetCutomerProjects', function() {
        it('should call customerGetCutomerProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetCutomerProjects call and complete the assertions
          /*
          var customer = "customer_example";

          instance.customerGetCutomerProjects(customer, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.masterJobNumber).to.be.a('string');
              expect(data.masterJobNumber).to.be("");
              expect(data.quotationNumber).to.be.a('number');
              expect(data.quotationNumber).to.be(0);
              expect(data.customerToBill).to.be.a('string');
              expect(data.customerToBill).to.be("");
              expect(data.customerNameToBill).to.be.a('string');
              expect(data.customerNameToBill).to.be("");
              expect(data.customerToRecieve).to.be.a('string');
              expect(data.customerToRecieve).to.be("");
              expect(data.founder).to.be.a('string');
              expect(data.founder).to.be("");
              expect(data.owner).to.be.a('string');
              expect(data.owner).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              expect(data.foundingDate).to.be.a(Date);
              expect(data.foundingDate).to.be(new Date());
              expect(data.estimatedBeginingDate).to.be.a(Date);
              expect(data.estimatedBeginingDate).to.be(new Date());
              expect(data.estimatedFinishDate).to.be.a(Date);
              expect(data.estimatedFinishDate).to.be(new Date());
              expect(data.actualBeginingDate).to.be.a(Date);
              expect(data.actualBeginingDate).to.be(new Date());
              expect(data.actualFinishDate).to.be.a(Date);
              expect(data.actualFinishDate).to.be(new Date());
              expect(data.optimistDate).to.be.a(Date);
              expect(data.optimistDate).to.be(new Date());
              expect(data.pessimistDate).to.be.a(Date);
              expect(data.pessimistDate).to.be(new Date());
              expect(data.jobType).to.be.a('string');
              expect(data.jobType).to.be("_cbTimeJob");
              expect(data.jobStatus).to.be.a('string');
              expect(data.jobStatus).to.be("NotStarted");
              expect(data.jobBillingMode).to.be.a('string');
              expect(data.jobBillingMode).to.be("Monthly");
              expect(data.phaseId).to.be.a('string');
              expect(data.phaseId).to.be("");
              expect(data.phaseRequired).to.be.a('boolean');
              expect(data.phaseRequired).to.be(false);
              expect(data.taskId).to.be.a('string');
              expect(data.taskId).to.be("");
              expect(data.taskRequired).to.be.a('boolean');
              expect(data.taskRequired).to.be(false);
              expect(data.foreignName).to.be.a('string');
              expect(data.foreignName).to.be("");
              expect(data.jobContactName).to.be.a('string');
              expect(data.jobContactName).to.be("");
              expect(data.quotationAmount).to.be.a('number');
              expect(data.quotationAmount).to.be(0.0);
              expect(data.serialnumber).to.be.a('string');
              expect(data.serialnumber).to.be("");
              expect(data.quotationAmountWithVAT).to.be.a('boolean');
              expect(data.quotationAmountWithVAT).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.discountType).to.be.a('string');
              expect(data.discountType).to.be("CustomerDiscount");
              expect(data.jobDiscountPercent).to.be.a('number');
              expect(data.jobDiscountPercent).to.be(0.0);
              expect(data.discountOfTime).to.be.a('boolean');
              expect(data.discountOfTime).to.be(false);
              expect(data.discountOfDriveTime).to.be.a('boolean');
              expect(data.discountOfDriveTime).to.be(false);
              expect(data.discountOfCost).to.be.a('boolean');
              expect(data.discountOfCost).to.be(false);
              expect(data.foreignPriceForWork).to.be.a('number');
              expect(data.foreignPriceForWork).to.be(0.0);
              expect(data.skipTaxOnInvoice).to.be.a('boolean');
              expect(data.skipTaxOnInvoice).to.be(false);
              expect(data.quotationCurrencyCode).to.be.a('string');
              expect(data.quotationCurrencyCode).to.be("");
              expect(data.quotationWorkingHours).to.be.a('number');
              expect(data.quotationWorkingHours).to.be(0.0);
              expect(data.quotationWorkingAmount).to.be.a('number');
              expect(data.quotationWorkingAmount).to.be(0.0);
              expect(data.quotationCostAmount).to.be.a('number');
              expect(data.quotationCostAmount).to.be(0.0);
              expect(data.quotationLicenceAmount).to.be.a('number');
              expect(data.quotationLicenceAmount).to.be(0.0);
              {
                let dataCtr = data.linkedPhases;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                  expect(data.phaseID).to.be.a('string');
                  expect(data.phaseID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
              {
                let dataCtr = data.linkedTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                  expect(data.taskID).to.be.a('string');
                  expect(data.taskID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetGroup', function() {
        it('should call customerGetGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetGroup call and complete the assertions
          /*
          var id = "id_example";
          var page = 56;
          var count = 56;

          instance.customerGetGroup(id, page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              {
                let dataCtr = data.contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.title).to.be.a('string');
                  expect(data.title).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.department).to.be.a('string');
                  expect(data.department).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.jobTitleCode).to.be.a('string');
                  expect(data.jobTitleCode).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.recivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.address4).to.be.a('string');
                  expect(data.address4).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.eANNumber).to.be.a('string');
                  expect(data.eANNumber).to.be("");
                  expect(data.vATNumber).to.be.a('string');
                  expect(data.vATNumber).to.be("");
                  expect(data.blocked).to.be.a('boolean');
                  expect(data.blocked).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.properties;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  expect(data.attribute).to.be.a('string');
                  expect(data.attribute).to.be("");
                  expect(data.option).to.be.a('string');
                  expect(data.option).to.be("");
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              expect(data.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                    expect(data.conditions.creditLimit).to.be.a('number');
                expect(data.conditions.creditLimit).to.be(0.0);
                expect(data.conditions.creditMax).to.be.a('number');
                expect(data.conditions.creditMax).to.be(0.0);
                expect(data.conditions.disableSale).to.be.a('boolean');
                expect(data.conditions.disableSale).to.be(false);
                expect(data.conditions.disableRetail).to.be.a('boolean');
                expect(data.conditions.disableRetail).to.be(false);
              expect(data.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                    expect(data.sendTo.printer).to.be.a('boolean');
                expect(data.sendTo.printer).to.be(false);
                expect(data.sendTo.claimToPrinter).to.be.a('boolean');
                expect(data.sendTo.claimToPrinter).to.be(false);
                expect(data.sendTo.email).to.be.a('boolean');
                expect(data.sendTo.email).to.be(false);
                expect(data.sendTo.eDIInvoice).to.be.a('boolean');
                expect(data.sendTo.eDIInvoice).to.be(false);
                expect(data.sendTo.publishingSystem).to.be.a('boolean');
                expect(data.sendTo.publishingSystem).to.be(false);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.alias).to.be.a('string');
              expect(data.alias).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.balanceAmount).to.be.a('number');
              expect(data.balanceAmount).to.be(0.0);
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.phoneFax).to.be.a('string');
              expect(data.phoneFax).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.originCountryCode).to.be.a('string');
              expect(data.originCountryCode).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.password).to.be.a('string');
              expect(data.password).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.salesPerson).to.be.a('string');
              expect(data.salesPerson).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.useItemRecivers).to.be.a('boolean');
              expect(data.useItemRecivers).to.be(false);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.blocked).to.be.a('boolean');
              expect(data.blocked).to.be(false);
              expect(data.gender).to.be.a('string');
              expect(data.gender).to.be("Male");
              expect(data.priceGroup).to.be.a('number');
              expect(data.priceGroup).to.be(0);
              expect(data.billingFee).to.be.a('number');
              expect(data.billingFee).to.be(0.0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGetSearch', function() {
        it('should call customerGetSearch successfully', function(done) {
          // TODO: uncomment, update parameter values for customerGetSearch call and complete the assertions
          /*
          var value = "value_example";
          var max = 56;

          instance.customerGetSearch(value, max, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              {
                let dataCtr = data.contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.title).to.be.a('string');
                  expect(data.title).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.department).to.be.a('string');
                  expect(data.department).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.jobTitleCode).to.be.a('string');
                  expect(data.jobTitleCode).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.recivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.address4).to.be.a('string');
                  expect(data.address4).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.eANNumber).to.be.a('string');
                  expect(data.eANNumber).to.be("");
                  expect(data.vATNumber).to.be.a('string');
                  expect(data.vATNumber).to.be("");
                  expect(data.blocked).to.be.a('boolean');
                  expect(data.blocked).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.properties;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  expect(data.attribute).to.be.a('string');
                  expect(data.attribute).to.be("");
                  expect(data.option).to.be.a('string');
                  expect(data.option).to.be("");
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              expect(data.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                    expect(data.conditions.creditLimit).to.be.a('number');
                expect(data.conditions.creditLimit).to.be(0.0);
                expect(data.conditions.creditMax).to.be.a('number');
                expect(data.conditions.creditMax).to.be(0.0);
                expect(data.conditions.disableSale).to.be.a('boolean');
                expect(data.conditions.disableSale).to.be(false);
                expect(data.conditions.disableRetail).to.be.a('boolean');
                expect(data.conditions.disableRetail).to.be(false);
              expect(data.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                    expect(data.sendTo.printer).to.be.a('boolean');
                expect(data.sendTo.printer).to.be(false);
                expect(data.sendTo.claimToPrinter).to.be.a('boolean');
                expect(data.sendTo.claimToPrinter).to.be(false);
                expect(data.sendTo.email).to.be.a('boolean');
                expect(data.sendTo.email).to.be(false);
                expect(data.sendTo.eDIInvoice).to.be.a('boolean');
                expect(data.sendTo.eDIInvoice).to.be(false);
                expect(data.sendTo.publishingSystem).to.be.a('boolean');
                expect(data.sendTo.publishingSystem).to.be(false);
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.alias).to.be.a('string');
              expect(data.alias).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.balanceAmount).to.be.a('number');
              expect(data.balanceAmount).to.be(0.0);
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.phoneFax).to.be.a('string');
              expect(data.phoneFax).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.originCountryCode).to.be.a('string');
              expect(data.originCountryCode).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.password).to.be.a('string');
              expect(data.password).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.salesPerson).to.be.a('string');
              expect(data.salesPerson).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.useItemRecivers).to.be.a('boolean');
              expect(data.useItemRecivers).to.be(false);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.blocked).to.be.a('boolean');
              expect(data.blocked).to.be(false);
              expect(data.gender).to.be.a('string');
              expect(data.gender).to.be("Male");
              expect(data.priceGroup).to.be.a('number');
              expect(data.priceGroup).to.be(0);
              expect(data.billingFee).to.be.a('number');
              expect(data.billingFee).to.be(0.0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerGroupGet', function() {
        it('should call customerGroupGet successfully', function(done) {
          // TODO: uncomment customerGroupGet call and complete the assertions
          /*

          instance.customerGroupGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerGroupModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerSearchByPhone', function() {
        it('should call customerSearchByPhone successfully', function(done) {
          // TODO: uncomment, update parameter values for customerSearchByPhone call and complete the assertions
          /*
          var _number = "_number_example";

          instance.customerSearchByPhone(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            {
              let dataCtr = data.contacts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.address1).to.be.a('string');
                expect(data.address1).to.be("");
                expect(data.address2).to.be.a('string');
                expect(data.address2).to.be("");
                expect(data.address3).to.be.a('string');
                expect(data.address3).to.be("");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.zipCode).to.be.a('string');
                expect(data.zipCode).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.department).to.be.a('string');
                expect(data.department).to.be("");
                expect(data.sSNumber).to.be.a('string');
                expect(data.sSNumber).to.be("");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("");
                expect(data.phoneLocal).to.be.a('string');
                expect(data.phoneLocal).to.be("");
                expect(data.phoneMobile).to.be.a('string');
                expect(data.phoneMobile).to.be("");
                expect(data.fax).to.be.a('string');
                expect(data.fax).to.be("");
                expect(data.telex).to.be.a('string');
                expect(data.telex).to.be("");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.URL).to.be.a('string');
                expect(data.URL).to.be("");
                expect(data.jobTitleCode).to.be.a('string');
                expect(data.jobTitleCode).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.recivers;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                expect(data._number).to.be.a('string');
                expect(data._number).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.address1).to.be.a('string');
                expect(data.address1).to.be("");
                expect(data.address2).to.be.a('string');
                expect(data.address2).to.be("");
                expect(data.address3).to.be.a('string');
                expect(data.address3).to.be("");
                expect(data.address4).to.be.a('string');
                expect(data.address4).to.be("");
                expect(data.city).to.be.a('string');
                expect(data.city).to.be("");
                expect(data.zipCode).to.be.a('string');
                expect(data.zipCode).to.be("");
                expect(data.countryCode).to.be.a('string');
                expect(data.countryCode).to.be("");
                expect(data.sSNumber).to.be.a('string');
                expect(data.sSNumber).to.be("");
                expect(data.phone).to.be.a('string');
                expect(data.phone).to.be("");
                expect(data.phoneLocal).to.be.a('string');
                expect(data.phoneLocal).to.be("");
                expect(data.phoneMobile).to.be.a('string');
                expect(data.phoneMobile).to.be("");
                expect(data.fax).to.be.a('string');
                expect(data.fax).to.be("");
                expect(data.telex).to.be.a('string');
                expect(data.telex).to.be("");
                expect(data.email).to.be.a('string');
                expect(data.email).to.be("");
                expect(data.URL).to.be.a('string');
                expect(data.URL).to.be("");
                expect(data.eANNumber).to.be.a('string');
                expect(data.eANNumber).to.be("");
                expect(data.vATNumber).to.be.a('string');
                expect(data.vATNumber).to.be("");
                expect(data.blocked).to.be.a('boolean');
                expect(data.blocked).to.be(false);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.memos;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                expect(data.pageName).to.be.a('string');
                expect(data.pageName).to.be("");
                expect(data.plainText).to.be.a('string');
                expect(data.plainText).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.recordID).to.be.a('number');
                expect(data.recordID).to.be("0");

                      }
            }
            {
              let dataCtr = data.properties;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                expect(data.ID).to.be.a('string');
                expect(data.ID).to.be("");
                expect(data.attribute).to.be.a('string');
                expect(data.attribute).to.be("");
                expect(data.option).to.be.a('string');
                expect(data.option).to.be("");
                expect(data.comment).to.be.a('string');
                expect(data.comment).to.be("");
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());

                      }
            }
            {
              let dataCtr = data.changes;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                expect(data.modified).to.be.a(Date);
                expect(data.modified).to.be(new Date());
                expect(data.by).to.be.a('string');
                expect(data.by).to.be("");
                {
                  let dataCtr = data.fields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.attachments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                expect(data.ID).to.be.a('number');
                expect(data.ID).to.be(0);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.linked).to.be.a(Date);
                expect(data.linked).to.be(new Date());
                expect(data.mD5Hash).to.be.a('string');
                expect(data.mD5Hash).to.be("");
                expect(data.showOnWeb).to.be.a('boolean');
                expect(data.showOnWeb).to.be(false);

                      }
            }
            expect(data.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                  expect(data.conditions.creditLimit).to.be.a('number');
              expect(data.conditions.creditLimit).to.be(0.0);
              expect(data.conditions.creditMax).to.be.a('number');
              expect(data.conditions.creditMax).to.be(0.0);
              expect(data.conditions.disableSale).to.be.a('boolean');
              expect(data.conditions.disableSale).to.be(false);
              expect(data.conditions.disableRetail).to.be.a('boolean');
              expect(data.conditions.disableRetail).to.be(false);
            expect(data.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                  expect(data.sendTo.printer).to.be.a('boolean');
              expect(data.sendTo.printer).to.be(false);
              expect(data.sendTo.claimToPrinter).to.be.a('boolean');
              expect(data.sendTo.claimToPrinter).to.be(false);
              expect(data.sendTo.email).to.be.a('boolean');
              expect(data.sendTo.email).to.be(false);
              expect(data.sendTo.eDIInvoice).to.be.a('boolean');
              expect(data.sendTo.eDIInvoice).to.be(false);
              expect(data.sendTo.publishingSystem).to.be.a('boolean');
              expect(data.sendTo.publishingSystem).to.be(false);
            expect(data.recordID).to.be.a('number');
            expect(data.recordID).to.be("0");
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.alias).to.be.a('string');
            expect(data.alias).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.address3).to.be.a('string');
            expect(data.address3).to.be("");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("");
            expect(data.balanceAmount).to.be.a('number');
            expect(data.balanceAmount).to.be(0.0);
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.phoneLocal).to.be.a('string');
            expect(data.phoneLocal).to.be("");
            expect(data.phoneMobile).to.be.a('string');
            expect(data.phoneMobile).to.be("");
            expect(data.phoneFax).to.be.a('string');
            expect(data.phoneFax).to.be("");
            expect(data.countryCode).to.be.a('string');
            expect(data.countryCode).to.be("");
            expect(data.originCountryCode).to.be.a('string');
            expect(data.originCountryCode).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.salesPerson).to.be.a('string');
            expect(data.salesPerson).to.be("");
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.useItemRecivers).to.be.a('boolean');
            expect(data.useItemRecivers).to.be(false);
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.noVat).to.be.a('boolean');
            expect(data.noVat).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.blocked).to.be.a('boolean');
            expect(data.blocked).to.be(false);
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("Male");
            expect(data.priceGroup).to.be.a('number');
            expect(data.priceGroup).to.be(0);
            expect(data.billingFee).to.be.a('number');
            expect(data.billingFee).to.be(0.0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerTransactionGetCustomerTransactions', function() {
        it('should call customerTransactionGetCustomerTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for customerTransactionGetCustomerTransactions call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;
          opts.include = "include_example";
          opts.customer = "customer_example";

          instance.customerTransactionGetCustomerTransactions(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersTransactionModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be("0");
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be("0");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.journalHeadCode).to.be.a('string');
              expect(data.journalHeadCode).to.be("");
              expect(data.settledCurrencyAmount).to.be.a('number');
              expect(data.settledCurrencyAmount).to.be(0.0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.settledStatus).to.be.a('number');
              expect(data.settledStatus).to.be(0.0);
              expect(data.settled).to.be.a('boolean');
              expect(data.settled).to.be(false);
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.currencyAmount).to.be.a('number');
              expect(data.currencyAmount).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.code).to.be.a('number');
              expect(data.code).to.be(0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.recordType).to.be.a('string');
              expect(data.recordType).to.be("DebetJournal");
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("GeneralLedger");
              expect(data.settleId).to.be.a('number');
              expect(data.settleId).to.be(0);
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerUpdateCustomer', function() {
        it('should call customerUpdateCustomer successfully', function(done) {
          // TODO: uncomment, update parameter values for customerUpdateCustomer call
          /*
          var customer = "customer_example";
          var obj = new DkPlusApi.DkCloudDataModelCustomersCustomerModel();
          obj.deleted = false;
          obj.contacts = [new DkPlusApi.DkCloudDataModelCustomersContactModel()];
          obj.contacts[0]._number = "";
          obj.contacts[0].name = "";
          obj.contacts[0].title = "";
          obj.contacts[0].address1 = "";
          obj.contacts[0].address2 = "";
          obj.contacts[0].address3 = "";
          obj.contacts[0].city = "";
          obj.contacts[0].zipCode = "";
          obj.contacts[0].countryCode = "";
          obj.contacts[0].department = "";
          obj.contacts[0].sSNumber = "";
          obj.contacts[0].phone = "";
          obj.contacts[0].phoneLocal = "";
          obj.contacts[0].phoneMobile = "";
          obj.contacts[0].fax = "";
          obj.contacts[0].telex = "";
          obj.contacts[0].email = "";
          obj.contacts[0].URL = "";
          obj.contacts[0].jobTitleCode = "";
          obj.contacts[0].modified = new Date();
          obj.recivers = [new DkPlusApi.DkCloudDataModelCustomersItemReciverModel()];
          obj.recivers[0]._number = "";
          obj.recivers[0].name = "";
          obj.recivers[0].address1 = "";
          obj.recivers[0].address2 = "";
          obj.recivers[0].address3 = "";
          obj.recivers[0].address4 = "";
          obj.recivers[0].city = "";
          obj.recivers[0].zipCode = "";
          obj.recivers[0].countryCode = "";
          obj.recivers[0].sSNumber = "";
          obj.recivers[0].phone = "";
          obj.recivers[0].phoneLocal = "";
          obj.recivers[0].phoneMobile = "";
          obj.recivers[0].fax = "";
          obj.recivers[0].telex = "";
          obj.recivers[0].email = "";
          obj.recivers[0].URL = "";
          obj.recivers[0].eANNumber = "";
          obj.recivers[0].vATNumber = "";
          obj.recivers[0].blocked = false;
          obj.recivers[0].modified = new Date();
          obj.memos = [new DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel()];
          obj.memos[0].pageName = "";
          obj.memos[0].plainText = "";
          obj.memos[0].modified = new Date();
          obj.memos[0].recordID = "0";
          obj.properties = [new DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel()];
          obj.properties[0].ID = "";
          obj.properties[0].attribute = "";
          obj.properties[0].option = "";
          obj.properties[0].comment = "";
          obj.properties[0].modified = new Date();
          obj.changes = [new DkPlusApi.DkCloudDataModelGeneralChangesModel()];
          obj.changes[0].modified = new Date();
          obj.changes[0].by = "";
          obj.changes[0].fields = [new DkPlusApi.DkCloudDataModelGeneralFieldChangeModel()];
          obj.changes[0].fields[0].name = "";
          obj.changes[0].fields[0].value = "";
          obj.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          obj.attachments[0].ID = 0;
          obj.attachments[0].name = "";
          obj.attachments[0].size = 0;
          obj.attachments[0].linked = new Date();
          obj.attachments[0].mD5Hash = "";
          obj.attachments[0].showOnWeb = false;
          obj.conditions = new DkPlusApi.DkCloudDataModelCustomersCustomerCondition();
          obj.conditions.creditLimit = 0.0;
          obj.conditions.creditMax = 0.0;
          obj.conditions.disableSale = false;
          obj.conditions.disableRetail = false;
          obj.sendTo = new DkPlusApi.DkCloudDataModelCustomersCustomerSendTo();
          obj.sendTo.printer = false;
          obj.sendTo.claimToPrinter = false;
          obj.sendTo.email = false;
          obj.sendTo.eDIInvoice = false;
          obj.sendTo.publishingSystem = false;
          obj.recordID = "0";
          obj._number = "";
          obj.name = "";
          obj.alias = "";
          obj.address1 = "";
          obj.address2 = "";
          obj.address3 = "";
          obj.zipCode = "";
          obj.balanceAmount = 0.0;
          obj.phone = "";
          obj.phoneLocal = "";
          obj.phoneMobile = "";
          obj.phoneFax = "";
          obj.countryCode = "";
          obj.originCountryCode = "";
          obj.email = "";
          obj.password = "";
          obj.group = "";
          obj.salesPerson = "";
          obj.discount = 0.0;
          obj.useItemRecivers = false;
          obj.paymentTerm = "";
          obj.paymentMode = "";
          obj.currencyCode = "";
          obj.noVat = false;
          obj.ledgerCode = "";
          obj.blocked = false;
          obj.gender = "Male";
          obj.priceGroup = 0;
          obj.billingFee = 0.0;
          obj.modified = new Date();

          instance.customerUpdateCustomer(customer, obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerUpdateCustomerCard', function() {
        it('should call customerUpdateCustomerCard successfully', function(done) {
          // TODO: uncomment, update parameter values for customerUpdateCustomerCard call
          /*
          var customer = "customer_example";
          var card = new DkPlusApi.DkCloudDataModelGeneralCreditCard();
          card.cardType = 0;
          card.cardNumber = "";
          card.expDate = new Date();
          card.sSNumber = "";
          card.name = "";

          instance.customerUpdateCustomerCard(customer, card, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
