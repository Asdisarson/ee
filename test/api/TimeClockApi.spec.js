/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.TimeClockApi();
  });

  describe('(package)', function() {
    describe('TimeClockApi', function() {
      describe('timeClockDkPosRegister', function() {
        it('should call timeClockDkPosRegister successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockDkPosRegister call and complete the assertions
          /*
          var employee = "employee_example";
          var company = "company_example";
          var license = "license_example";
          var info = new DkPlusApi.DkPlusAPIModelsTimeClockRegisterInfo();
          info.dim1 = "";
          info.project = "";
          info.comment = "";

          instance.timeClockDkPosRegister(employee, company, license, info, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockGetConfig', function() {
        it('should call timeClockGetConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockGetConfig call and complete the assertions
          /*
          var host = "host_example";

          instance.timeClockGetConfig(host, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockGetEmployee', function() {
        it('should call timeClockGetEmployee successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockGetEmployee call and complete the assertions
          /*
          var phone = "phone_example";

          instance.timeClockGetEmployee(phone, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockGetIn', function() {
        it('should call timeClockGetIn successfully', function(done) {
          // TODO: uncomment timeClockGetIn call and complete the assertions
          /*

          instance.timeClockGetIn(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryModel);
              expect(data.ID).to.be.a('string');
              expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.employee).to.be.a('string');
              expect(data.employee).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.comment).to.be.a('string');
              expect(data.comment).to.be("");
              expect(data.currentStatus).to.be.a('string');
              expect(data.currentStatus).to.be("Work");
              expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                    expect(data.entryType.ID).to.be.a('string');
                expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.entryType.name).to.be.a('string');
                expect(data.entryType.name).to.be("");
                expect(data.entryType.dkType).to.be.a('number');
                expect(data.entryType.dkType).to.be(0);
                expect(data.entryType.type).to.be.a('string');
                expect(data.entryType.type).to.be("Work");
                expect(data.entryType.deleted).to.be.a('boolean');
                expect(data.entryType.deleted).to.be(false);
                expect(data.entryType.recurring).to.be.a('boolean');
                expect(data.entryType.recurring).to.be(false);
              expect(data.start).to.be.a(Date);
              expect(data.start).to.be(new Date());
              expect(data.end).to.be.a(Date);
              expect(data.end).to.be(new Date());
              expect(data.actualStart).to.be.a(Date);
              expect(data.actualStart).to.be(new Date());
              expect(data.actualEnd).to.be.a(Date);
              expect(data.actualEnd).to.be(new Date());
              expect(data.totalHours).to.be.a('number');
              expect(data.totalHours).to.be(0.0);
              expect(data.actualTotalHours).to.be.a('number');
              expect(data.actualTotalHours).to.be(0.0);
              expect(data.totalMinutes).to.be.a('number');
              expect(data.totalMinutes).to.be(0.0);
              expect(data.actualTotalMinutes).to.be.a('number');
              expect(data.actualTotalMinutes).to.be(0.0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockChildEntryModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.start).to.be.a(Date);
                  expect(data.start).to.be(new Date());
                  expect(data.end).to.be.a(Date);
                  expect(data.end).to.be(new Date());
                  expect(data.actualStart).to.be.a(Date);
                  expect(data.actualStart).to.be(new Date());
                  expect(data.actualEnd).to.be.a(Date);
                  expect(data.actualEnd).to.be(new Date());
                  expect(data.project).to.be.a('string');
                  expect(data.project).to.be("");
                  expect(data.phase).to.be.a('string');
                  expect(data.phase).to.be("");
                  expect(data.task).to.be.a('string');
                  expect(data.task).to.be("");
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.processed).to.be.a('boolean');
                  expect(data.processed).to.be(false);
                  expect(data.processedJournal).to.be.a('boolean');
                  expect(data.processedJournal).to.be(false);
                  expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                        expect(data.entryType.ID).to.be.a('string');
                    expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                    expect(data.entryType.name).to.be.a('string');
                    expect(data.entryType.name).to.be("");
                    expect(data.entryType.dkType).to.be.a('number');
                    expect(data.entryType.dkType).to.be(0);
                    expect(data.entryType.type).to.be.a('string');
                    expect(data.entryType.type).to.be("Work");
                    expect(data.entryType.deleted).to.be.a('boolean');
                    expect(data.entryType.deleted).to.be(false);
                    expect(data.entryType.recurring).to.be.a('boolean');
                    expect(data.entryType.recurring).to.be(false);
                  expect(data.totalHours).to.be.a('number');
                  expect(data.totalHours).to.be(0.0);
                  expect(data.roundedTotalHours).to.be.a('number');
                  expect(data.roundedTotalHours).to.be(0.0);
                  expect(data.actualTotalHours).to.be.a('number');
                  expect(data.actualTotalHours).to.be(0.0);
                  expect(data.roundedActualTotalHours).to.be.a('number');
                  expect(data.roundedActualTotalHours).to.be(0.0);
                  expect(data.totalMinutes).to.be.a('number');
                  expect(data.totalMinutes).to.be(0.0);
                  expect(data.roundedTotalMinutes).to.be.a('number');
                  expect(data.roundedTotalMinutes).to.be(0.0);
                  expect(data.actualTotalMinutes).to.be.a('number');
                  expect(data.actualTotalMinutes).to.be(0.0);
                  expect(data.actualRoundedTotalMinutes).to.be.a('number');
                  expect(data.actualRoundedTotalMinutes).to.be(0.0);
  
                        }
              }
              expect(data.processed).to.be.a('boolean');
              expect(data.processed).to.be(false);
              expect(data.processedJournal).to.be.a('boolean');
              expect(data.processedJournal).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockGetOut', function() {
        it('should call timeClockGetOut successfully', function(done) {
          // TODO: uncomment timeClockGetOut call and complete the assertions
          /*

          instance.timeClockGetOut(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryModel);
              expect(data.ID).to.be.a('string');
              expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.employee).to.be.a('string');
              expect(data.employee).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.comment).to.be.a('string');
              expect(data.comment).to.be("");
              expect(data.currentStatus).to.be.a('string');
              expect(data.currentStatus).to.be("Work");
              expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                    expect(data.entryType.ID).to.be.a('string');
                expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.entryType.name).to.be.a('string');
                expect(data.entryType.name).to.be("");
                expect(data.entryType.dkType).to.be.a('number');
                expect(data.entryType.dkType).to.be(0);
                expect(data.entryType.type).to.be.a('string');
                expect(data.entryType.type).to.be("Work");
                expect(data.entryType.deleted).to.be.a('boolean');
                expect(data.entryType.deleted).to.be(false);
                expect(data.entryType.recurring).to.be.a('boolean');
                expect(data.entryType.recurring).to.be(false);
              expect(data.start).to.be.a(Date);
              expect(data.start).to.be(new Date());
              expect(data.end).to.be.a(Date);
              expect(data.end).to.be(new Date());
              expect(data.actualStart).to.be.a(Date);
              expect(data.actualStart).to.be(new Date());
              expect(data.actualEnd).to.be.a(Date);
              expect(data.actualEnd).to.be(new Date());
              expect(data.totalHours).to.be.a('number');
              expect(data.totalHours).to.be(0.0);
              expect(data.actualTotalHours).to.be.a('number');
              expect(data.actualTotalHours).to.be(0.0);
              expect(data.totalMinutes).to.be.a('number');
              expect(data.totalMinutes).to.be(0.0);
              expect(data.actualTotalMinutes).to.be.a('number');
              expect(data.actualTotalMinutes).to.be(0.0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockChildEntryModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.start).to.be.a(Date);
                  expect(data.start).to.be(new Date());
                  expect(data.end).to.be.a(Date);
                  expect(data.end).to.be(new Date());
                  expect(data.actualStart).to.be.a(Date);
                  expect(data.actualStart).to.be(new Date());
                  expect(data.actualEnd).to.be.a(Date);
                  expect(data.actualEnd).to.be(new Date());
                  expect(data.project).to.be.a('string');
                  expect(data.project).to.be("");
                  expect(data.phase).to.be.a('string');
                  expect(data.phase).to.be("");
                  expect(data.task).to.be.a('string');
                  expect(data.task).to.be("");
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.processed).to.be.a('boolean');
                  expect(data.processed).to.be(false);
                  expect(data.processedJournal).to.be.a('boolean');
                  expect(data.processedJournal).to.be(false);
                  expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                        expect(data.entryType.ID).to.be.a('string');
                    expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                    expect(data.entryType.name).to.be.a('string');
                    expect(data.entryType.name).to.be("");
                    expect(data.entryType.dkType).to.be.a('number');
                    expect(data.entryType.dkType).to.be(0);
                    expect(data.entryType.type).to.be.a('string');
                    expect(data.entryType.type).to.be("Work");
                    expect(data.entryType.deleted).to.be.a('boolean');
                    expect(data.entryType.deleted).to.be(false);
                    expect(data.entryType.recurring).to.be.a('boolean');
                    expect(data.entryType.recurring).to.be(false);
                  expect(data.totalHours).to.be.a('number');
                  expect(data.totalHours).to.be(0.0);
                  expect(data.roundedTotalHours).to.be.a('number');
                  expect(data.roundedTotalHours).to.be(0.0);
                  expect(data.actualTotalHours).to.be.a('number');
                  expect(data.actualTotalHours).to.be(0.0);
                  expect(data.roundedActualTotalHours).to.be.a('number');
                  expect(data.roundedActualTotalHours).to.be(0.0);
                  expect(data.totalMinutes).to.be.a('number');
                  expect(data.totalMinutes).to.be(0.0);
                  expect(data.roundedTotalMinutes).to.be.a('number');
                  expect(data.roundedTotalMinutes).to.be(0.0);
                  expect(data.actualTotalMinutes).to.be.a('number');
                  expect(data.actualTotalMinutes).to.be(0.0);
                  expect(data.actualRoundedTotalMinutes).to.be.a('number');
                  expect(data.actualRoundedTotalMinutes).to.be(0.0);
  
                        }
              }
              expect(data.processed).to.be.a('boolean');
              expect(data.processed).to.be(false);
              expect(data.processedJournal).to.be.a('boolean');
              expect(data.processedJournal).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockGetProject', function() {
        it('should call timeClockGetProject successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockGetProject call and complete the assertions
          /*
          var _number = "_number_example";
          var company = "company_example";

          instance.timeClockGetProject(_number, company, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockGetTimeClockEnrties', function() {
        it('should call timeClockGetTimeClockEnrties successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockGetTimeClockEnrties call and complete the assertions
          /*
          var opts = {};
          opts.from = new Date("2013-10-20T19:20:30+01:00");
          opts.to = new Date("2013-10-20T19:20:30+01:00");
          opts.employee = "employee_example";
          opts.dim1 = "dim1_example";
          opts.dim2 = "dim2_example";
          opts.dim3 = "dim3_example";
          opts.project = "project_example";
          opts.phase = "phase_example";
          opts.task = "task_example";

          instance.timeClockGetTimeClockEnrties(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryModel);
              expect(data.ID).to.be.a('string');
              expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.employee).to.be.a('string');
              expect(data.employee).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.comment).to.be.a('string');
              expect(data.comment).to.be("");
              expect(data.currentStatus).to.be.a('string');
              expect(data.currentStatus).to.be("Work");
              expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                    expect(data.entryType.ID).to.be.a('string');
                expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.entryType.name).to.be.a('string');
                expect(data.entryType.name).to.be("");
                expect(data.entryType.dkType).to.be.a('number');
                expect(data.entryType.dkType).to.be(0);
                expect(data.entryType.type).to.be.a('string');
                expect(data.entryType.type).to.be("Work");
                expect(data.entryType.deleted).to.be.a('boolean');
                expect(data.entryType.deleted).to.be(false);
                expect(data.entryType.recurring).to.be.a('boolean');
                expect(data.entryType.recurring).to.be(false);
              expect(data.start).to.be.a(Date);
              expect(data.start).to.be(new Date());
              expect(data.end).to.be.a(Date);
              expect(data.end).to.be(new Date());
              expect(data.actualStart).to.be.a(Date);
              expect(data.actualStart).to.be(new Date());
              expect(data.actualEnd).to.be.a(Date);
              expect(data.actualEnd).to.be(new Date());
              expect(data.totalHours).to.be.a('number');
              expect(data.totalHours).to.be(0.0);
              expect(data.actualTotalHours).to.be.a('number');
              expect(data.actualTotalHours).to.be(0.0);
              expect(data.totalMinutes).to.be.a('number');
              expect(data.totalMinutes).to.be(0.0);
              expect(data.actualTotalMinutes).to.be.a('number');
              expect(data.actualTotalMinutes).to.be(0.0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockChildEntryModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.start).to.be.a(Date);
                  expect(data.start).to.be(new Date());
                  expect(data.end).to.be.a(Date);
                  expect(data.end).to.be(new Date());
                  expect(data.actualStart).to.be.a(Date);
                  expect(data.actualStart).to.be(new Date());
                  expect(data.actualEnd).to.be.a(Date);
                  expect(data.actualEnd).to.be(new Date());
                  expect(data.project).to.be.a('string');
                  expect(data.project).to.be("");
                  expect(data.phase).to.be.a('string');
                  expect(data.phase).to.be("");
                  expect(data.task).to.be.a('string');
                  expect(data.task).to.be("");
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.processed).to.be.a('boolean');
                  expect(data.processed).to.be(false);
                  expect(data.processedJournal).to.be.a('boolean');
                  expect(data.processedJournal).to.be(false);
                  expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                        expect(data.entryType.ID).to.be.a('string');
                    expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                    expect(data.entryType.name).to.be.a('string');
                    expect(data.entryType.name).to.be("");
                    expect(data.entryType.dkType).to.be.a('number');
                    expect(data.entryType.dkType).to.be(0);
                    expect(data.entryType.type).to.be.a('string');
                    expect(data.entryType.type).to.be("Work");
                    expect(data.entryType.deleted).to.be.a('boolean');
                    expect(data.entryType.deleted).to.be(false);
                    expect(data.entryType.recurring).to.be.a('boolean');
                    expect(data.entryType.recurring).to.be(false);
                  expect(data.totalHours).to.be.a('number');
                  expect(data.totalHours).to.be(0.0);
                  expect(data.roundedTotalHours).to.be.a('number');
                  expect(data.roundedTotalHours).to.be(0.0);
                  expect(data.actualTotalHours).to.be.a('number');
                  expect(data.actualTotalHours).to.be(0.0);
                  expect(data.roundedActualTotalHours).to.be.a('number');
                  expect(data.roundedActualTotalHours).to.be(0.0);
                  expect(data.totalMinutes).to.be.a('number');
                  expect(data.totalMinutes).to.be(0.0);
                  expect(data.roundedTotalMinutes).to.be.a('number');
                  expect(data.roundedTotalMinutes).to.be(0.0);
                  expect(data.actualTotalMinutes).to.be.a('number');
                  expect(data.actualTotalMinutes).to.be(0.0);
                  expect(data.actualRoundedTotalMinutes).to.be.a('number');
                  expect(data.actualRoundedTotalMinutes).to.be(0.0);
  
                        }
              }
              expect(data.processed).to.be.a('boolean');
              expect(data.processed).to.be(false);
              expect(data.processedJournal).to.be.a('boolean');
              expect(data.processedJournal).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockGetTimeClockSettings', function() {
        it('should call timeClockGetTimeClockSettings successfully', function(done) {
          // TODO: uncomment timeClockGetTimeClockSettings call and complete the assertions
          /*

          instance.timeClockGetTimeClockSettings(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSettingsTimeClockSettingModel);
            expect(data.enabled).to.be.a('boolean');
            expect(data.enabled).to.be(false);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("Disabled");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("Disabled");
            expect(data.phase).to.be.a('string');
            expect(data.phase).to.be("Disabled");
            expect(data.task).to.be.a('string');
            expect(data.task).to.be("Disabled");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("Disabled");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("Disabled");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("Disabled");
            expect(data.sendToProjectTransaction).to.be.a('boolean');
            expect(data.sendToProjectTransaction).to.be(false);
            expect(data.roundUpDaytimeAlso).to.be.a('boolean');
            expect(data.roundUpDaytimeAlso).to.be(false);
            expect(data.roundFactor).to.be.a('string');
            expect(data.roundFactor).to.be("None");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockQuit', function() {
        it('should call timeClockQuit successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockQuit call and complete the assertions
          /*
          var company = "company_example";
          var employee = "employee_example";

          instance.timeClockQuit(company, employee, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockRegister', function() {
        it('should call timeClockRegister successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockRegister call and complete the assertions
          /*
          var employee = "employee_example";
          var opts = {};
          opts.company = "company_example";
          opts.project = "project_example";

          instance.timeClockRegister(employee, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('timeClockTimeClockStamp', function() {
        it('should call timeClockTimeClockStamp successfully', function(done) {
          // TODO: uncomment, update parameter values for timeClockTimeClockStamp call
          /*
          var employee = "employee_example";
          var opts = {};
          opts.project = "project_example";
          opts.type = "type_example";

          instance.timeClockTimeClockStamp(employee, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
