/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.MemberApi();
  });

  describe('(package)', function() {
    describe('MemberApi', function() {
      describe('memberCreateMember', function() {
        it('should call memberCreateMember successfully', function(done) {
          // TODO: uncomment, update parameter values for memberCreateMember call and complete the assertions
          /*
          var obj = new DkPlusApi.DkCloudDataModelMembersMember();
          obj.ID = 0;
          obj.created = new Date();
          obj.modified = new Date();
          obj._number = "";
          obj.name = "";
          obj.sSNumber = "";
          obj.address = new DkPlusApi.DkCloudDataModelGeneralAddress();
          obj.address.address1 = "";
          obj.address.address2 = "";
          obj.address.address3 = "";
          obj.address.address4 = "";
          obj.address.zipCode = "";
          obj.address.city = "";
          obj.address.countryCode = "";
          obj.address.countryName = "";
          obj.address.countyCode = "";
          obj.contactDetail = new DkPlusApi.DkCloudDataModelGeneralContactInfo();
          obj.contactDetail.phone = "";
          obj.contactDetail.direct = "";
          obj.contactDetail.mobile = "";
          obj.contactDetail.fax = "";
          obj.contactDetail.telex = "";
          obj.contactDetail.email = "";
          obj.contactDetail.URL = "";
          obj.password = "";
          obj.group = "";
          obj.tag = "";
          obj.salesPerson = "";
          obj.discount = 0.0;
          obj.paymentType = "";
          obj.currencyCode = "";
          obj.noVat = false;
          obj.ledgerCode = "";
          obj.points = 0.0;
          obj.bankAccount = new DkPlusApi.DkCloudDataModelMembersBankAccount();
          obj.bankAccount.code = "";
          obj.bankAccount.owner = "";
          obj.bankAccount.ownerName = "";
          obj.bankAccount.accountType = "";
          obj.bankAccount.accountGroup = "";
          obj.bankAccount.account = "";
          obj.creditCard = new DkPlusApi.DkCloudDataModelGeneralCreditCard();
          obj.creditCard.cardType = 0;
          obj.creditCard.cardNumber = "";
          obj.creditCard.expDate = new Date();
          obj.creditCard.sSNumber = "";
          obj.creditCard.name = "";
          obj.statistics = new DkPlusApi.DkCloudDataModelMembersStatistics();
          obj.statistics.memberAge = 0.0;
          obj.statistics.careerAge = 0.0;
          obj.statistics.extraProperties = {key: ""};
          obj.status = new DkPlusApi.DkCloudDataModelMembersStatus();
          obj.status.blocked = false;
          obj.status.dead = false;
          obj.status.retired = false;
          obj.status.disabled = false;
          obj.gender = "Male";
          obj.paymentMode = "";
          obj.hasConfirmedTerms = false;
          obj.confirmedTermId = 0;
          obj.extraProperties = {key: ""};

          instance.memberCreateMember(obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMember);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.address).to.be.a(DkPlusApi.DkCloudDataModelGeneralAddress);
                  expect(data.address.address1).to.be.a('string');
              expect(data.address.address1).to.be("");
              expect(data.address.address2).to.be.a('string');
              expect(data.address.address2).to.be("");
              expect(data.address.address3).to.be.a('string');
              expect(data.address.address3).to.be("");
              expect(data.address.address4).to.be.a('string');
              expect(data.address.address4).to.be("");
              expect(data.address.zipCode).to.be.a('string');
              expect(data.address.zipCode).to.be("");
              expect(data.address.city).to.be.a('string');
              expect(data.address.city).to.be("");
              expect(data.address.countryCode).to.be.a('string');
              expect(data.address.countryCode).to.be("");
              expect(data.address.countryName).to.be.a('string');
              expect(data.address.countryName).to.be("");
              expect(data.address.countyCode).to.be.a('string');
              expect(data.address.countyCode).to.be("");
            expect(data.contactDetail).to.be.a(DkPlusApi.DkCloudDataModelGeneralContactInfo);
                  expect(data.contactDetail.phone).to.be.a('string');
              expect(data.contactDetail.phone).to.be("");
              expect(data.contactDetail.direct).to.be.a('string');
              expect(data.contactDetail.direct).to.be("");
              expect(data.contactDetail.mobile).to.be.a('string');
              expect(data.contactDetail.mobile).to.be("");
              expect(data.contactDetail.fax).to.be.a('string');
              expect(data.contactDetail.fax).to.be("");
              expect(data.contactDetail.telex).to.be.a('string');
              expect(data.contactDetail.telex).to.be("");
              expect(data.contactDetail.email).to.be.a('string');
              expect(data.contactDetail.email).to.be("");
              expect(data.contactDetail.URL).to.be.a('string');
              expect(data.contactDetail.URL).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.salesPerson).to.be.a('string');
            expect(data.salesPerson).to.be("");
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.paymentType).to.be.a('string');
            expect(data.paymentType).to.be("");
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.noVat).to.be.a('boolean');
            expect(data.noVat).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.points).to.be.a('number');
            expect(data.points).to.be(0.0);
            expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelMembersBankAccount);
                  expect(data.bankAccount.code).to.be.a('string');
              expect(data.bankAccount.code).to.be("");
              expect(data.bankAccount.owner).to.be.a('string');
              expect(data.bankAccount.owner).to.be("");
              expect(data.bankAccount.ownerName).to.be.a('string');
              expect(data.bankAccount.ownerName).to.be("");
              expect(data.bankAccount.accountType).to.be.a('string');
              expect(data.bankAccount.accountType).to.be("");
              expect(data.bankAccount.accountGroup).to.be.a('string');
              expect(data.bankAccount.accountGroup).to.be("");
              expect(data.bankAccount.account).to.be.a('string');
              expect(data.bankAccount.account).to.be("");
            expect(data.creditCard).to.be.a(DkPlusApi.DkCloudDataModelGeneralCreditCard);
                  expect(data.creditCard.cardType).to.be.a('number');
              expect(data.creditCard.cardType).to.be(0);
              expect(data.creditCard.cardNumber).to.be.a('string');
              expect(data.creditCard.cardNumber).to.be("");
              expect(data.creditCard.expDate).to.be.a(Date);
              expect(data.creditCard.expDate).to.be(new Date());
              expect(data.creditCard.sSNumber).to.be.a('string');
              expect(data.creditCard.sSNumber).to.be("");
              expect(data.creditCard.name).to.be.a('string');
              expect(data.creditCard.name).to.be("");
            expect(data.statistics).to.be.a(DkPlusApi.DkCloudDataModelMembersStatistics);
                  expect(data.statistics.memberAge).to.be.a('number');
              expect(data.statistics.memberAge).to.be(0.0);
              expect(data.statistics.careerAge).to.be.a('number');
              expect(data.statistics.careerAge).to.be(0.0);
              {
                let dataCtr = data.statistics.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.status).to.be.a(DkPlusApi.DkCloudDataModelMembersStatus);
                  expect(data.status.blocked).to.be.a('boolean');
              expect(data.status.blocked).to.be(false);
              expect(data.status.dead).to.be.a('boolean');
              expect(data.status.dead).to.be(false);
              expect(data.status.retired).to.be.a('boolean');
              expect(data.status.retired).to.be(false);
              expect(data.status.disabled).to.be.a('boolean');
              expect(data.status.disabled).to.be(false);
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("Male");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.hasConfirmedTerms).to.be.a('boolean');
            expect(data.hasConfirmedTerms).to.be(false);
            expect(data.confirmedTermId).to.be.a('number');
            expect(data.confirmedTermId).to.be(0);
            {
              let dataCtr = data.extraProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberCreateMemberFee', function() {
        it('should call memberCreateMemberFee successfully', function(done) {
          // TODO: uncomment, update parameter values for memberCreateMemberFee call
          /*
          var _number = "_number_example";
          var fee = new DkPlusApi.DkCloudDataModelMembersFee();
          fee.period = new DkPlusApi.DkCloudDataModelMembersFeePeriod();
          fee.period.from = new Date();
          fee.period.to = new Date();
          fee.discount = new DkPlusApi.DkCloudDataModelMembersFeeDiscount();
          fee.discount.validUntil = new Date();
          fee.discount.percent = 0.0;
          fee.payment = new DkPlusApi.DkCloudDataModelMembersPaymentOptions();
          fee.payment.mode = "";
          fee.payment.term = "";
          fee.disabled = false;
          fee.rateMonth = 0;
          fee.intrestRate = 0.0;
          fee.interval = "OneTime";
          fee.dim2 = "";
          fee.campaign = "";
          fee.feeType = "";
          fee.memo = "";
          fee.reductionPayment = 0.0;
          fee.contactName = "";
          fee.saleperson = "";
          fee.rateSplit = 0;
          fee.creditCard = new DkPlusApi.DkCloudDataModelGeneralCreditCard();
          fee.creditCard.cardType = 0;
          fee.creditCard.cardNumber = "";
          fee.creditCard.expDate = new Date();
          fee.creditCard.sSNumber = "";
          fee.creditCard.name = "";
          fee.amount = 0.0;
          fee.itemCode = "";
          fee.payer = new DkPlusApi.DkCloudDataModelCustomersCustomerBaseModel();
          fee.payer.recordID = "0";
          fee.payer._number = "";
          fee.payer.name = "";
          fee.payer.alias = "";
          fee.payer.address1 = "";
          fee.payer.address2 = "";
          fee.payer.address3 = "";
          fee.payer.zipCode = "";
          fee.payer.balanceAmount = 0.0;
          fee.payer.phone = "";
          fee.payer.phoneLocal = "";
          fee.payer.phoneMobile = "";
          fee.payer.phoneFax = "";
          fee.payer.countryCode = "";
          fee.payer.originCountryCode = "";
          fee.payer.email = "";
          fee.payer.password = "";
          fee.payer.group = "";
          fee.payer.salesPerson = "";
          fee.payer.discount = 0.0;
          fee.payer.useItemRecivers = false;
          fee.payer.paymentTerm = "";
          fee.payer.paymentMode = "";
          fee.payer.currencyCode = "";
          fee.payer.noVat = false;
          fee.payer.ledgerCode = "";
          fee.payer.blocked = false;
          fee.payer.gender = "Male";
          fee.payer.priceGroup = 0;
          fee.payer.billingFee = 0.0;
          fee.payer.modified = new Date();
          fee.properties = {key: ""};

          instance.memberCreateMemberFee(_number, fee, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGet', function() {
        it('should call memberGet successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGet call and complete the assertions
          /*
          var page = 56;
          var size = 56;
          var opts = {};
          opts.modified = new Date("2013-10-20T19:20:30+01:00");
          opts.course = "course_example";
          opts.blocked = true;

          instance.memberGet(page, size, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMember);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.sSNumber).to.be.a('string');
              expect(data.sSNumber).to.be("");
              expect(data.address).to.be.a(DkPlusApi.DkCloudDataModelGeneralAddress);
                    expect(data.address.address1).to.be.a('string');
                expect(data.address.address1).to.be("");
                expect(data.address.address2).to.be.a('string');
                expect(data.address.address2).to.be("");
                expect(data.address.address3).to.be.a('string');
                expect(data.address.address3).to.be("");
                expect(data.address.address4).to.be.a('string');
                expect(data.address.address4).to.be("");
                expect(data.address.zipCode).to.be.a('string');
                expect(data.address.zipCode).to.be("");
                expect(data.address.city).to.be.a('string');
                expect(data.address.city).to.be("");
                expect(data.address.countryCode).to.be.a('string');
                expect(data.address.countryCode).to.be("");
                expect(data.address.countryName).to.be.a('string');
                expect(data.address.countryName).to.be("");
                expect(data.address.countyCode).to.be.a('string');
                expect(data.address.countyCode).to.be("");
              expect(data.contactDetail).to.be.a(DkPlusApi.DkCloudDataModelGeneralContactInfo);
                    expect(data.contactDetail.phone).to.be.a('string');
                expect(data.contactDetail.phone).to.be("");
                expect(data.contactDetail.direct).to.be.a('string');
                expect(data.contactDetail.direct).to.be("");
                expect(data.contactDetail.mobile).to.be.a('string');
                expect(data.contactDetail.mobile).to.be("");
                expect(data.contactDetail.fax).to.be.a('string');
                expect(data.contactDetail.fax).to.be("");
                expect(data.contactDetail.telex).to.be.a('string');
                expect(data.contactDetail.telex).to.be("");
                expect(data.contactDetail.email).to.be.a('string');
                expect(data.contactDetail.email).to.be("");
                expect(data.contactDetail.URL).to.be.a('string');
                expect(data.contactDetail.URL).to.be("");
              expect(data.password).to.be.a('string');
              expect(data.password).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.tag).to.be.a('string');
              expect(data.tag).to.be("");
              expect(data.salesPerson).to.be.a('string');
              expect(data.salesPerson).to.be("");
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.paymentType).to.be.a('string');
              expect(data.paymentType).to.be("");
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.noVat).to.be.a('boolean');
              expect(data.noVat).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.points).to.be.a('number');
              expect(data.points).to.be(0.0);
              expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelMembersBankAccount);
                    expect(data.bankAccount.code).to.be.a('string');
                expect(data.bankAccount.code).to.be("");
                expect(data.bankAccount.owner).to.be.a('string');
                expect(data.bankAccount.owner).to.be("");
                expect(data.bankAccount.ownerName).to.be.a('string');
                expect(data.bankAccount.ownerName).to.be("");
                expect(data.bankAccount.accountType).to.be.a('string');
                expect(data.bankAccount.accountType).to.be("");
                expect(data.bankAccount.accountGroup).to.be.a('string');
                expect(data.bankAccount.accountGroup).to.be("");
                expect(data.bankAccount.account).to.be.a('string');
                expect(data.bankAccount.account).to.be("");
              expect(data.creditCard).to.be.a(DkPlusApi.DkCloudDataModelGeneralCreditCard);
                    expect(data.creditCard.cardType).to.be.a('number');
                expect(data.creditCard.cardType).to.be(0);
                expect(data.creditCard.cardNumber).to.be.a('string');
                expect(data.creditCard.cardNumber).to.be("");
                expect(data.creditCard.expDate).to.be.a(Date);
                expect(data.creditCard.expDate).to.be(new Date());
                expect(data.creditCard.sSNumber).to.be.a('string');
                expect(data.creditCard.sSNumber).to.be("");
                expect(data.creditCard.name).to.be.a('string');
                expect(data.creditCard.name).to.be("");
              expect(data.statistics).to.be.a(DkPlusApi.DkCloudDataModelMembersStatistics);
                    expect(data.statistics.memberAge).to.be.a('number');
                expect(data.statistics.memberAge).to.be(0.0);
                expect(data.statistics.careerAge).to.be.a('number');
                expect(data.statistics.careerAge).to.be(0.0);
                {
                  let dataCtr = data.statistics.extraProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.status).to.be.a(DkPlusApi.DkCloudDataModelMembersStatus);
                    expect(data.status.blocked).to.be.a('boolean');
                expect(data.status.blocked).to.be(false);
                expect(data.status.dead).to.be.a('boolean');
                expect(data.status.dead).to.be(false);
                expect(data.status.retired).to.be.a('boolean');
                expect(data.status.retired).to.be(false);
                expect(data.status.disabled).to.be.a('boolean');
                expect(data.status.disabled).to.be(false);
              expect(data.gender).to.be.a('string');
              expect(data.gender).to.be("Male");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.hasConfirmedTerms).to.be.a('boolean');
              expect(data.hasConfirmedTerms).to.be(false);
              expect(data.confirmedTermId).to.be.a('number');
              expect(data.confirmedTermId).to.be(0);
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGetByNumber', function() {
        it('should call memberGetByNumber successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGetByNumber call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberGetByNumber(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMember);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.address).to.be.a(DkPlusApi.DkCloudDataModelGeneralAddress);
                  expect(data.address.address1).to.be.a('string');
              expect(data.address.address1).to.be("");
              expect(data.address.address2).to.be.a('string');
              expect(data.address.address2).to.be("");
              expect(data.address.address3).to.be.a('string');
              expect(data.address.address3).to.be("");
              expect(data.address.address4).to.be.a('string');
              expect(data.address.address4).to.be("");
              expect(data.address.zipCode).to.be.a('string');
              expect(data.address.zipCode).to.be("");
              expect(data.address.city).to.be.a('string');
              expect(data.address.city).to.be("");
              expect(data.address.countryCode).to.be.a('string');
              expect(data.address.countryCode).to.be("");
              expect(data.address.countryName).to.be.a('string');
              expect(data.address.countryName).to.be("");
              expect(data.address.countyCode).to.be.a('string');
              expect(data.address.countyCode).to.be("");
            expect(data.contactDetail).to.be.a(DkPlusApi.DkCloudDataModelGeneralContactInfo);
                  expect(data.contactDetail.phone).to.be.a('string');
              expect(data.contactDetail.phone).to.be("");
              expect(data.contactDetail.direct).to.be.a('string');
              expect(data.contactDetail.direct).to.be("");
              expect(data.contactDetail.mobile).to.be.a('string');
              expect(data.contactDetail.mobile).to.be("");
              expect(data.contactDetail.fax).to.be.a('string');
              expect(data.contactDetail.fax).to.be("");
              expect(data.contactDetail.telex).to.be.a('string');
              expect(data.contactDetail.telex).to.be("");
              expect(data.contactDetail.email).to.be.a('string');
              expect(data.contactDetail.email).to.be("");
              expect(data.contactDetail.URL).to.be.a('string');
              expect(data.contactDetail.URL).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.salesPerson).to.be.a('string');
            expect(data.salesPerson).to.be("");
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.paymentType).to.be.a('string');
            expect(data.paymentType).to.be("");
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.noVat).to.be.a('boolean');
            expect(data.noVat).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.points).to.be.a('number');
            expect(data.points).to.be(0.0);
            expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelMembersBankAccount);
                  expect(data.bankAccount.code).to.be.a('string');
              expect(data.bankAccount.code).to.be("");
              expect(data.bankAccount.owner).to.be.a('string');
              expect(data.bankAccount.owner).to.be("");
              expect(data.bankAccount.ownerName).to.be.a('string');
              expect(data.bankAccount.ownerName).to.be("");
              expect(data.bankAccount.accountType).to.be.a('string');
              expect(data.bankAccount.accountType).to.be("");
              expect(data.bankAccount.accountGroup).to.be.a('string');
              expect(data.bankAccount.accountGroup).to.be("");
              expect(data.bankAccount.account).to.be.a('string');
              expect(data.bankAccount.account).to.be("");
            expect(data.creditCard).to.be.a(DkPlusApi.DkCloudDataModelGeneralCreditCard);
                  expect(data.creditCard.cardType).to.be.a('number');
              expect(data.creditCard.cardType).to.be(0);
              expect(data.creditCard.cardNumber).to.be.a('string');
              expect(data.creditCard.cardNumber).to.be("");
              expect(data.creditCard.expDate).to.be.a(Date);
              expect(data.creditCard.expDate).to.be(new Date());
              expect(data.creditCard.sSNumber).to.be.a('string');
              expect(data.creditCard.sSNumber).to.be("");
              expect(data.creditCard.name).to.be.a('string');
              expect(data.creditCard.name).to.be("");
            expect(data.statistics).to.be.a(DkPlusApi.DkCloudDataModelMembersStatistics);
                  expect(data.statistics.memberAge).to.be.a('number');
              expect(data.statistics.memberAge).to.be(0.0);
              expect(data.statistics.careerAge).to.be.a('number');
              expect(data.statistics.careerAge).to.be(0.0);
              {
                let dataCtr = data.statistics.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.status).to.be.a(DkPlusApi.DkCloudDataModelMembersStatus);
                  expect(data.status.blocked).to.be.a('boolean');
              expect(data.status.blocked).to.be(false);
              expect(data.status.dead).to.be.a('boolean');
              expect(data.status.dead).to.be(false);
              expect(data.status.retired).to.be.a('boolean');
              expect(data.status.retired).to.be(false);
              expect(data.status.disabled).to.be.a('boolean');
              expect(data.status.disabled).to.be(false);
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("Male");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.hasConfirmedTerms).to.be.a('boolean');
            expect(data.hasConfirmedTerms).to.be(false);
            expect(data.confirmedTermId).to.be.a('number');
            expect(data.confirmedTermId).to.be(0);
            {
              let dataCtr = data.extraProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGetCareer', function() {
        it('should call memberGetCareer successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGetCareer call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberGetCareer(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersCareer);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.company).to.be.a('string');
              expect(data.company).to.be("");
              expect(data.jobTitleCode).to.be.a('string');
              expect(data.jobTitleCode).to.be("");
              expect(data.jobTitle).to.be.a('string');
              expect(data.jobTitle).to.be("");
              expect(data.period).to.be.a(DkPlusApi.DkCloudDataModelGeneralDateRange);
                    expect(data.period.from).to.be.a(Date);
                expect(data.period.from).to.be(new Date());
                expect(data.period.to).to.be.a(Date);
                expect(data.period.to).to.be(new Date());
              expect(data.workPercentage).to.be.a('number');
              expect(data.workPercentage).to.be(0.0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.workplace).to.be.a('string');
              expect(data.workplace).to.be("");
              expect(data.workplaceName).to.be.a('string');
              expect(data.workplaceName).to.be("");
              expect(data.companyName).to.be.a('string');
              expect(data.companyName).to.be("");
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGetEducation', function() {
        it('should call memberGetEducation successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGetEducation call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberGetEducation(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersEducation);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.member).to.be.a('string');
              expect(data.member).to.be("");
              expect(data.institution).to.be.a('string');
              expect(data.institution).to.be("");
              expect(data.period).to.be.a(DkPlusApi.DkCloudDataModelGeneralDateRange);
                    expect(data.period.from).to.be.a(Date);
                expect(data.period.from).to.be(new Date());
                expect(data.period.to).to.be.a(Date);
                expect(data.period.to).to.be(new Date());
              expect(data.course).to.be.a(DkPlusApi.DkCloudDataModelMembersCourse);
                    expect(data.course.code).to.be.a('string');
                expect(data.course.code).to.be("");
                expect(data.course.text).to.be.a('string');
                expect(data.course.text).to.be("");
                expect(data.course.description).to.be.a('string');
                expect(data.course.description).to.be("");
              expect(data.graduation).to.be.a(DkPlusApi.DkCloudDataModelMembersGraduation);
                    expect(data.graduation.code).to.be.a('string');
                expect(data.graduation.code).to.be("");
                expect(data.graduation.text).to.be.a('string');
                expect(data.graduation.text).to.be("");
                expect(data.graduation.description).to.be.a('string');
                expect(data.graduation.description).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.masterSSNumber).to.be.a('string');
              expect(data.masterSSNumber).to.be("");
              expect(data.masterName).to.be.a('string');
              expect(data.masterName).to.be("");
              expect(data.companySSNumber).to.be.a('string');
              expect(data.companySSNumber).to.be("");
              expect(data.companyName).to.be.a('string');
              expect(data.companyName).to.be("");
              expect(data.institutionDesc).to.be.a('string');
              expect(data.institutionDesc).to.be("");
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGetFund', function() {
        it('should call memberGetFund successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGetFund call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberGetFund(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMemberFund);
            expect(data.batchId).to.be.a('number');
            expect(data.batchId).to.be(0);
            expect(data.journalDate).to.be.a(Date);
            expect(data.journalDate).to.be(new Date());
            expect(data.period).to.be.a(DkPlusApi.DkCloudDataModelGeneralDateRange);
                  expect(data.period.from).to.be.a(Date);
              expect(data.period.from).to.be(new Date());
              expect(data.period.to).to.be.a(Date);
              expect(data.period.to).to.be(new Date());
            expect(data.customer).to.be.a('string');
            expect(data.customer).to.be("");
            expect(data.workplaceId).to.be.a('string');
            expect(data.workplaceId).to.be("");
            expect(data.membershipCompany).to.be.a('string');
            expect(data.membershipCompany).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.totalAmount).to.be.a('number');
            expect(data.totalAmount).to.be(0.0);
            expect(data.customerName).to.be.a('string');
            expect(data.customerName).to.be("");
            expect(data.settled).to.be.a('boolean');
            expect(data.settled).to.be(false);
            {
              let dataCtr = data.payments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersPayment);
                expect(data.fundCode).to.be.a('string');
                expect(data.fundCode).to.be("");
                expect(data.fundName).to.be.a('string');
                expect(data.fundName).to.be("");
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);
                {
                  let dataCtr = data.extraProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            {
              let dataCtr = data.extraProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGetMembershipData', function() {
        it('should call memberGetMembershipData successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGetMembershipData call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberGetMembershipData(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMemberShipCompany);
              expect(data._number).to.be.a('number');
              expect(data._number).to.be(0);
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              {
                let dataCtr = data.funds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersFund);
                  expect(data.code).to.be.a('string');
                  expect(data.code).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.secondaryName).to.be.a('string');
                  expect(data.secondaryName).to.be("");
                  expect(data.company).to.be.a('string');
                  expect(data.company).to.be("");
                  {
                    let dataCtr = data.grants;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersGrant);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.allowsTravelCost).to.be.a('boolean');
                      expect(data.allowsTravelCost).to.be(false);
                      expect(data.amountPerUnitOfTravel).to.be.a('number');
                      expect(data.amountPerUnitOfTravel).to.be(0.0);
                      expect(data.attachment1).to.be.a('string');
                      expect(data.attachment1).to.be("");
                      expect(data.attachment2).to.be.a('string');
                      expect(data.attachment2).to.be("");
                      expect(data.attachment3).to.be.a('string');
                      expect(data.attachment3).to.be("");
                      expect(data.attachment4).to.be.a('string');
                      expect(data.attachment4).to.be("");
                      expect(data.attachmentRequired).to.be.a('boolean');
                      expect(data.attachmentRequired).to.be(false);
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.company).to.be.a('string');
                      expect(data.company).to.be("");
                      expect(data.text).to.be.a('string');
                      expect(data.text).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("GeneralAmount");
                      expect(data.rights).to.be.a(DkPlusApi.DkCloudDataModelMembersGrantRights);
                            expect(data.rights.type).to.be.a('string');
                        expect(data.rights.type).to.be("None");
                        expect(data.rights.availableAmount).to.be.a('number');
                        expect(data.rights.availableAmount).to.be(0.0);
                        expect(data.rights.availableCount).to.be.a('number');
                        expect(data.rights.availableCount).to.be(0);
                        expect(data.rights.conditionFailed).to.be.a('boolean');
                        expect(data.rights.conditionFailed).to.be(false);
                        expect(data.rights.maxAmount).to.be.a('number');
                        expect(data.rights.maxAmount).to.be(0.0);
                        expect(data.rights.minAmount).to.be.a('number');
                        expect(data.rights.minAmount).to.be(0.0);
                        expect(data.rights.ruleAmount).to.be.a('number');
                        expect(data.rights.ruleAmount).to.be(0.0);
                        expect(data.rights.ruleCount).to.be.a('number');
                        expect(data.rights.ruleCount).to.be(0);
                        expect(data.rights.taxPercent).to.be.a('number');
                        expect(data.rights.taxPercent).to.be(0.0);
                      expect(data.therapyType).to.be.a('string');
                      expect(data.therapyType).to.be("NoApplication");
                      expect(data.requirements).to.be.a(DkPlusApi.DkCloudDataModelMembersGrantFieldRequirements);
                            expect(data.requirements.amount).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.amount.required).to.be.a('boolean');
                          expect(data.requirements.amount.required).to.be(false);
                          expect(data.requirements.amount.description).to.be.a('string');
                          expect(data.requirements.amount.description).to.be("");
                          expect(data.requirements.amount.label).to.be.a('string');
                          expect(data.requirements.amount.label).to.be("");
                        expect(data.requirements.comment).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.comment.required).to.be.a('boolean');
                          expect(data.requirements.comment.required).to.be(false);
                          expect(data.requirements.comment.description).to.be.a('string');
                          expect(data.requirements.comment.description).to.be("");
                          expect(data.requirements.comment.label).to.be.a('string');
                          expect(data.requirements.comment.label).to.be("");
                        expect(data.requirements.description).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.description.required).to.be.a('boolean');
                          expect(data.requirements.description.required).to.be(false);
                          expect(data.requirements.description.description).to.be.a('string');
                          expect(data.requirements.description.description).to.be("");
                          expect(data.requirements.description.label).to.be.a('string');
                          expect(data.requirements.description.label).to.be("");
                        expect(data.requirements.grantCount).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.grantCount.required).to.be.a('boolean');
                          expect(data.requirements.grantCount.required).to.be(false);
                          expect(data.requirements.grantCount.description).to.be.a('string');
                          expect(data.requirements.grantCount.description).to.be("");
                          expect(data.requirements.grantCount.label).to.be.a('string');
                          expect(data.requirements.grantCount.label).to.be("");
                        expect(data.requirements.location).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.location.required).to.be.a('boolean');
                          expect(data.requirements.location.required).to.be(false);
                          expect(data.requirements.location.description).to.be.a('string');
                          expect(data.requirements.location.description).to.be("");
                          expect(data.requirements.location.label).to.be.a('string');
                          expect(data.requirements.location.label).to.be("");
                        expect(data.requirements.organizer).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.organizer.required).to.be.a('boolean');
                          expect(data.requirements.organizer.required).to.be(false);
                          expect(data.requirements.organizer.description).to.be.a('string');
                          expect(data.requirements.organizer.description).to.be("");
                          expect(data.requirements.organizer.label).to.be.a('string');
                          expect(data.requirements.organizer.label).to.be("");
                        expect(data.requirements.period).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.period.required).to.be.a('boolean');
                          expect(data.requirements.period.required).to.be(false);
                          expect(data.requirements.period.description).to.be.a('string');
                          expect(data.requirements.period.description).to.be("");
                          expect(data.requirements.period.label).to.be.a('string');
                          expect(data.requirements.period.label).to.be("");
                        expect(data.requirements.periodToRequired).to.be.a('boolean');
                        expect(data.requirements.periodToRequired).to.be(false);
                        expect(data.requirements.purpose).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.purpose.required).to.be.a('boolean');
                          expect(data.requirements.purpose.required).to.be(false);
                          expect(data.requirements.purpose.description).to.be.a('string');
                          expect(data.requirements.purpose.description).to.be("");
                          expect(data.requirements.purpose.label).to.be.a('string');
                          expect(data.requirements.purpose.label).to.be("");
                        expect(data.requirements.reference).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.reference.required).to.be.a('boolean');
                          expect(data.requirements.reference.required).to.be(false);
                          expect(data.requirements.reference.description).to.be.a('string');
                          expect(data.requirements.reference.description).to.be("");
                          expect(data.requirements.reference.label).to.be.a('string');
                          expect(data.requirements.reference.label).to.be("");
                        expect(data.requirements.text1).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.text1.required).to.be.a('boolean');
                          expect(data.requirements.text1.required).to.be(false);
                          expect(data.requirements.text1.description).to.be.a('string');
                          expect(data.requirements.text1.description).to.be("");
                          expect(data.requirements.text1.label).to.be.a('string');
                          expect(data.requirements.text1.label).to.be("");
                        expect(data.requirements.text2).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.text2.required).to.be.a('boolean');
                          expect(data.requirements.text2.required).to.be(false);
                          expect(data.requirements.text2.description).to.be.a('string');
                          expect(data.requirements.text2.description).to.be("");
                          expect(data.requirements.text2.label).to.be.a('string');
                          expect(data.requirements.text2.label).to.be("");
                        expect(data.requirements.unitCount).to.be.a(DkPlusApi.DkCloudDataModelMembersFieldRequirement);
                              expect(data.requirements.unitCount.required).to.be.a('boolean');
                          expect(data.requirements.unitCount.required).to.be(false);
                          expect(data.requirements.unitCount.description).to.be.a('string');
                          expect(data.requirements.unitCount.description).to.be("");
                          expect(data.requirements.unitCount.label).to.be.a('string');
                          expect(data.requirements.unitCount.label).to.be("");
                        expect(data.requirements.fundCodeRequired).to.be.a('boolean');
                        expect(data.requirements.fundCodeRequired).to.be(false);
                        expect(data.requirements.grantRequired).to.be.a('boolean');
                        expect(data.requirements.grantRequired).to.be(false);
                        expect(data.requirements.jobRatioRequired).to.be.a('boolean');
                        expect(data.requirements.jobRatioRequired).to.be(false);
                        expect(data.requirements.jobTitleRequired).to.be.a('boolean');
                        expect(data.requirements.jobTitleRequired).to.be(false);
                        expect(data.requirements.memberRequired).to.be.a('boolean');
                        expect(data.requirements.memberRequired).to.be(false);
                        expect(data.requirements.workplaceRequired).to.be.a('boolean');
                        expect(data.requirements.workplaceRequired).to.be(false);
                        expect(data.requirements.wPHistoryJobRatioRequired).to.be.a('boolean');
                        expect(data.requirements.wPHistoryJobRatioRequired).to.be(false);
                        expect(data.requirements.wPHistoryRequired).to.be.a('boolean');
                        expect(data.requirements.wPHistoryRequired).to.be(false);
                      expect(data.staticTravelAmount).to.be.a('number');
                      expect(data.staticTravelAmount).to.be(0.0);
      
                            }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGetResume', function() {
        it('should call memberGetResume successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGetResume call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberGetResume(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersResume);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.description2).to.be.a('string');
              expect(data.description2).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.resumeType).to.be.a('string');
              expect(data.resumeType).to.be("");
              expect(data.period).to.be.a(DkPlusApi.DkCloudDataModelGeneralDateRange);
                    expect(data.period.from).to.be.a(Date);
                expect(data.period.from).to.be(new Date());
                expect(data.period.to).to.be.a(Date);
                expect(data.period.to).to.be(new Date());
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberGetSubGroup', function() {
        it('should call memberGetSubGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for memberGetSubGroup call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberGetSubGroup(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMemberSubGroup);
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.subGroup).to.be.a('string');
              expect(data.subGroup).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.groupDescription).to.be.a('string');
              expect(data.groupDescription).to.be("");
              expect(data.defaultItemCode).to.be.a('string');
              expect(data.defaultItemCode).to.be("");
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberUpdateMember', function() {
        it('should call memberUpdateMember successfully', function(done) {
          // TODO: uncomment, update parameter values for memberUpdateMember call and complete the assertions
          /*
          var _number = "_number_example";
          var obj = new DkPlusApi.DkCloudDataModelMembersMember();
          obj.ID = 0;
          obj.created = new Date();
          obj.modified = new Date();
          obj._number = "";
          obj.name = "";
          obj.sSNumber = "";
          obj.address = new DkPlusApi.DkCloudDataModelGeneralAddress();
          obj.address.address1 = "";
          obj.address.address2 = "";
          obj.address.address3 = "";
          obj.address.address4 = "";
          obj.address.zipCode = "";
          obj.address.city = "";
          obj.address.countryCode = "";
          obj.address.countryName = "";
          obj.address.countyCode = "";
          obj.contactDetail = new DkPlusApi.DkCloudDataModelGeneralContactInfo();
          obj.contactDetail.phone = "";
          obj.contactDetail.direct = "";
          obj.contactDetail.mobile = "";
          obj.contactDetail.fax = "";
          obj.contactDetail.telex = "";
          obj.contactDetail.email = "";
          obj.contactDetail.URL = "";
          obj.password = "";
          obj.group = "";
          obj.tag = "";
          obj.salesPerson = "";
          obj.discount = 0.0;
          obj.paymentType = "";
          obj.currencyCode = "";
          obj.noVat = false;
          obj.ledgerCode = "";
          obj.points = 0.0;
          obj.bankAccount = new DkPlusApi.DkCloudDataModelMembersBankAccount();
          obj.bankAccount.code = "";
          obj.bankAccount.owner = "";
          obj.bankAccount.ownerName = "";
          obj.bankAccount.accountType = "";
          obj.bankAccount.accountGroup = "";
          obj.bankAccount.account = "";
          obj.creditCard = new DkPlusApi.DkCloudDataModelGeneralCreditCard();
          obj.creditCard.cardType = 0;
          obj.creditCard.cardNumber = "";
          obj.creditCard.expDate = new Date();
          obj.creditCard.sSNumber = "";
          obj.creditCard.name = "";
          obj.statistics = new DkPlusApi.DkCloudDataModelMembersStatistics();
          obj.statistics.memberAge = 0.0;
          obj.statistics.careerAge = 0.0;
          obj.statistics.extraProperties = {key: ""};
          obj.status = new DkPlusApi.DkCloudDataModelMembersStatus();
          obj.status.blocked = false;
          obj.status.dead = false;
          obj.status.retired = false;
          obj.status.disabled = false;
          obj.gender = "Male";
          obj.paymentMode = "";
          obj.hasConfirmedTerms = false;
          obj.confirmedTermId = 0;
          obj.extraProperties = {key: ""};

          instance.memberUpdateMember(_number, obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMember);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.address).to.be.a(DkPlusApi.DkCloudDataModelGeneralAddress);
                  expect(data.address.address1).to.be.a('string');
              expect(data.address.address1).to.be("");
              expect(data.address.address2).to.be.a('string');
              expect(data.address.address2).to.be("");
              expect(data.address.address3).to.be.a('string');
              expect(data.address.address3).to.be("");
              expect(data.address.address4).to.be.a('string');
              expect(data.address.address4).to.be("");
              expect(data.address.zipCode).to.be.a('string');
              expect(data.address.zipCode).to.be("");
              expect(data.address.city).to.be.a('string');
              expect(data.address.city).to.be("");
              expect(data.address.countryCode).to.be.a('string');
              expect(data.address.countryCode).to.be("");
              expect(data.address.countryName).to.be.a('string');
              expect(data.address.countryName).to.be("");
              expect(data.address.countyCode).to.be.a('string');
              expect(data.address.countyCode).to.be("");
            expect(data.contactDetail).to.be.a(DkPlusApi.DkCloudDataModelGeneralContactInfo);
                  expect(data.contactDetail.phone).to.be.a('string');
              expect(data.contactDetail.phone).to.be("");
              expect(data.contactDetail.direct).to.be.a('string');
              expect(data.contactDetail.direct).to.be("");
              expect(data.contactDetail.mobile).to.be.a('string');
              expect(data.contactDetail.mobile).to.be("");
              expect(data.contactDetail.fax).to.be.a('string');
              expect(data.contactDetail.fax).to.be("");
              expect(data.contactDetail.telex).to.be.a('string');
              expect(data.contactDetail.telex).to.be("");
              expect(data.contactDetail.email).to.be.a('string');
              expect(data.contactDetail.email).to.be("");
              expect(data.contactDetail.URL).to.be.a('string');
              expect(data.contactDetail.URL).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.salesPerson).to.be.a('string');
            expect(data.salesPerson).to.be("");
            expect(data.discount).to.be.a('number');
            expect(data.discount).to.be(0.0);
            expect(data.paymentType).to.be.a('string');
            expect(data.paymentType).to.be("");
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.noVat).to.be.a('boolean');
            expect(data.noVat).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.points).to.be.a('number');
            expect(data.points).to.be(0.0);
            expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelMembersBankAccount);
                  expect(data.bankAccount.code).to.be.a('string');
              expect(data.bankAccount.code).to.be("");
              expect(data.bankAccount.owner).to.be.a('string');
              expect(data.bankAccount.owner).to.be("");
              expect(data.bankAccount.ownerName).to.be.a('string');
              expect(data.bankAccount.ownerName).to.be("");
              expect(data.bankAccount.accountType).to.be.a('string');
              expect(data.bankAccount.accountType).to.be("");
              expect(data.bankAccount.accountGroup).to.be.a('string');
              expect(data.bankAccount.accountGroup).to.be("");
              expect(data.bankAccount.account).to.be.a('string');
              expect(data.bankAccount.account).to.be("");
            expect(data.creditCard).to.be.a(DkPlusApi.DkCloudDataModelGeneralCreditCard);
                  expect(data.creditCard.cardType).to.be.a('number');
              expect(data.creditCard.cardType).to.be(0);
              expect(data.creditCard.cardNumber).to.be.a('string');
              expect(data.creditCard.cardNumber).to.be("");
              expect(data.creditCard.expDate).to.be.a(Date);
              expect(data.creditCard.expDate).to.be(new Date());
              expect(data.creditCard.sSNumber).to.be.a('string');
              expect(data.creditCard.sSNumber).to.be("");
              expect(data.creditCard.name).to.be.a('string');
              expect(data.creditCard.name).to.be("");
            expect(data.statistics).to.be.a(DkPlusApi.DkCloudDataModelMembersStatistics);
                  expect(data.statistics.memberAge).to.be.a('number');
              expect(data.statistics.memberAge).to.be(0.0);
              expect(data.statistics.careerAge).to.be.a('number');
              expect(data.statistics.careerAge).to.be(0.0);
              {
                let dataCtr = data.statistics.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.status).to.be.a(DkPlusApi.DkCloudDataModelMembersStatus);
                  expect(data.status.blocked).to.be.a('boolean');
              expect(data.status.blocked).to.be(false);
              expect(data.status.dead).to.be.a('boolean');
              expect(data.status.dead).to.be(false);
              expect(data.status.retired).to.be.a('boolean');
              expect(data.status.retired).to.be(false);
              expect(data.status.disabled).to.be.a('boolean');
              expect(data.status.disabled).to.be(false);
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("Male");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("");
            expect(data.hasConfirmedTerms).to.be.a('boolean');
            expect(data.hasConfirmedTerms).to.be(false);
            expect(data.confirmedTermId).to.be.a('number');
            expect(data.confirmedTermId).to.be(0);
            {
              let dataCtr = data.extraProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
