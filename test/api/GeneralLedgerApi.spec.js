/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.GeneralLedgerApi();
  });

  describe('(package)', function() {
    describe('GeneralLedgerApi', function() {
      describe('generalLedgerAccountGet', function() {
        it('should call generalLedgerAccountGet successfully', function(done) {
          // TODO: uncomment generalLedgerAccountGet call and complete the assertions
          /*

          instance.generalLedgerAccountGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerAccount);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.group).to.be.a('number');
              expect(data.group).to.be(0);
              expect(data.accountType).to.be.a('number');
              expect(data.accountType).to.be(0);
              expect(data.taxCode).to.be.a('string');
              expect(data.taxCode).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.closed).to.be.a('boolean');
              expect(data.closed).to.be(false);
              expect(data.useCurrency).to.be.a('boolean');
              expect(data.useCurrency).to.be(false);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.sumReference).to.be.a('string');
              expect(data.sumReference).to.be("");
              expect(data.reverseAccount).to.be.a('string');
              expect(data.reverseAccount).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generalLedgerAccountGetAccount', function() {
        it('should call generalLedgerAccountGetAccount successfully', function(done) {
          // TODO: uncomment, update parameter values for generalLedgerAccountGetAccount call and complete the assertions
          /*
          var _number = "_number_example";

          instance.generalLedgerAccountGetAccount(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerAccount);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.group).to.be.a('number');
            expect(data.group).to.be(0);
            expect(data.accountType).to.be.a('number');
            expect(data.accountType).to.be(0);
            expect(data.taxCode).to.be.a('string');
            expect(data.taxCode).to.be("");
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.closed).to.be.a('boolean');
            expect(data.closed).to.be(false);
            expect(data.useCurrency).to.be.a('boolean');
            expect(data.useCurrency).to.be(false);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.sumReference).to.be.a('string');
            expect(data.sumReference).to.be("");
            expect(data.reverseAccount).to.be.a('string');
            expect(data.reverseAccount).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generalLedgerAccountGetTransactions', function() {
        it('should call generalLedgerAccountGetTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for generalLedgerAccountGetTransactions call and complete the assertions
          /*
          var id = "id_example";
          var page = 56;
          var count = 56;
          var opts = {};
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";

          instance.generalLedgerAccountGetTransactions(id, page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerTransaction);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be("0");
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be("0");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.account).to.be.a('string');
              expect(data.account).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.journalType).to.be.a('number');
              expect(data.journalType).to.be(0);
              expect(data.code).to.be.a('number');
              expect(data.code).to.be(0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.taxCode).to.be.a('string');
              expect(data.taxCode).to.be("");
              expect(data.taxGroup).to.be.a('number');
              expect(data.taxGroup).to.be(0);
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.hCode).to.be.a('string');
              expect(data.hCode).to.be("");
              expect(data.hType).to.be.a('number');
              expect(data.hType).to.be(0);
              expect(data.subAccount).to.be.a('string');
              expect(data.subAccount).to.be("");
              expect(data.isCredit).to.be.a('boolean');
              expect(data.isCredit).to.be(false);
              expect(data.krofunumer).to.be.a('string');
              expect(data.krofunumer).to.be("");
              expect(data.periodId).to.be.a('number');
              expect(data.periodId).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.numberOfQuantity).to.be.a('number');
              expect(data.numberOfQuantity).to.be(0.0);
              expect(data.quantityUnitCode).to.be.a('string');
              expect(data.quantityUnitCode).to.be("");
              expect(data.percentageOfVATUsed).to.be.a('number');
              expect(data.percentageOfVATUsed).to.be(0.0);
              expect(data.vATReportID).to.be.a('number');
              expect(data.vATReportID).to.be(0);
              expect(data.vATReportGroup).to.be.a('string');
              expect(data.vATReportGroup).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generalLedgerJournalGetGeneralLedgerJournal', function() {
        it('should call generalLedgerJournalGetGeneralLedgerJournal successfully', function(done) {
          // TODO: uncomment, update parameter values for generalLedgerJournalGetGeneralLedgerJournal call
          /*
          var value = new DkPlusApi.DkPlusAPIModelsGeneralLedgerHead();
          value.code = "";
          value.description = "";
          value.period = 0;
          value.option = new DkPlusApi.DkPlusAPIModelsGeneralLedgerOptions();
          value.option.post = false;
          value.option.generateVoucher = false;
          value.lines = [new DkPlusApi.DkPlusAPIModelsGeneralLedgerLine()];
          value.lines[0].account = "";
          value.lines[0].amount = 0.0;
          value.lines[0].currency = "";
          value.lines[0]._date = new Date();
          value.lines[0].dueDate = new Date();
          value.lines[0].dim1 = "";
          value.lines[0].reference = "";
          value.lines[0].text = "";
          value.lines[0].voucher = "";
          value.lines[0].type = "GeneralLedger";
          value.lines[0].properties = {key: ""};
          value.properties = {key: ""};

          instance.generalLedgerJournalGetGeneralLedgerJournal(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generalLedgerTransactionGetGeneralTransactionPage', function() {
        it('should call generalLedgerTransactionGetGeneralTransactionPage successfully', function(done) {
          // TODO: uncomment, update parameter values for generalLedgerTransactionGetGeneralTransactionPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.account = "account_example";
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;
          opts.include = "include_example";
          opts.sort = "sort_example";
          opts.sorttype = "sorttype_example";

          instance.generalLedgerTransactionGetGeneralTransactionPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerTransaction);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be("0");
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be("0");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.account).to.be.a('string');
              expect(data.account).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.journalType).to.be.a('number');
              expect(data.journalType).to.be(0);
              expect(data.code).to.be.a('number');
              expect(data.code).to.be(0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.taxCode).to.be.a('string');
              expect(data.taxCode).to.be("");
              expect(data.taxGroup).to.be.a('number');
              expect(data.taxGroup).to.be(0);
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.hCode).to.be.a('string');
              expect(data.hCode).to.be("");
              expect(data.hType).to.be.a('number');
              expect(data.hType).to.be(0);
              expect(data.subAccount).to.be.a('string');
              expect(data.subAccount).to.be("");
              expect(data.isCredit).to.be.a('boolean');
              expect(data.isCredit).to.be(false);
              expect(data.krofunumer).to.be.a('string');
              expect(data.krofunumer).to.be("");
              expect(data.periodId).to.be.a('number');
              expect(data.periodId).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.numberOfQuantity).to.be.a('number');
              expect(data.numberOfQuantity).to.be(0.0);
              expect(data.quantityUnitCode).to.be.a('string');
              expect(data.quantityUnitCode).to.be("");
              expect(data.percentageOfVATUsed).to.be.a('number');
              expect(data.percentageOfVATUsed).to.be(0.0);
              expect(data.vATReportID).to.be.a('number');
              expect(data.vATReportID).to.be(0);
              expect(data.vATReportGroup).to.be.a('string');
              expect(data.vATReportGroup).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
