/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.NationApi();
  });

  describe('(package)', function() {
    describe('NationApi', function() {
      describe('nationGet', function() {
        it('should call nationGet successfully', function(done) {
          // TODO: uncomment, update parameter values for nationGet call and complete the assertions
          /*
          var id = "id_example";

          instance.nationGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelNationEntry);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.address).to.be.a(DkPlusApi.DkCloudDataModelGeneralAddress);
                  expect(data.address.address1).to.be.a('string');
              expect(data.address.address1).to.be("");
              expect(data.address.address2).to.be.a('string');
              expect(data.address.address2).to.be("");
              expect(data.address.address3).to.be.a('string');
              expect(data.address.address3).to.be("");
              expect(data.address.address4).to.be.a('string');
              expect(data.address.address4).to.be("");
              expect(data.address.zipCode).to.be.a('string');
              expect(data.address.zipCode).to.be("");
              expect(data.address.city).to.be.a('string');
              expect(data.address.city).to.be("");
              expect(data.address.countryCode).to.be.a('string');
              expect(data.address.countryCode).to.be("");
              expect(data.address.countryName).to.be.a('string');
              expect(data.address.countryName).to.be("");
              expect(data.address.countyCode).to.be.a('string');
              expect(data.address.countyCode).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
