/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.TokenApi();
  });

  describe('(package)', function() {
    describe('TokenApi', function() {
      describe('tokenCreateToken', function() {
        it('should call tokenCreateToken successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenCreateToken call and complete the assertions
          /*
          var value = new DkPlusApi.DkPlusAPIModelsCreateTokenCredentialModel();
          value.company = "00000000-0000-0000-0000-000000000000";
          value.description = "";

          instance.tokenCreateToken(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelUserTokenModel);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("General");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.notify;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenDelete', function() {
        it('should call tokenDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenDelete call
          /*
          var id = "id_example";

          instance.tokenDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenGetMyCompaniesByToken', function() {
        it('should call tokenGetMyCompaniesByToken successfully', function(done) {
          // TODO: uncomment tokenGetMyCompaniesByToken call and complete the assertions
          /*

          instance.tokenGetMyCompaniesByToken(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsCompanyAccessModel);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenGetMyTokens', function() {
        it('should call tokenGetMyTokens successfully', function(done) {
          // TODO: uncomment tokenGetMyTokens call and complete the assertions
          /*

          instance.tokenGetMyTokens(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelUserTokenModel);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("General");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.notify;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenGetPDF', function() {
        it('should call tokenGetPDF successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenGetPDF call and complete the assertions
          /*
          var opts = {};
          opts.from = new Date("2013-10-20T19:20:30+01:00");
          opts.to = new Date("2013-10-20T19:20:30+01:00");

          instance.tokenGetPDF(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenGetTokenByID', function() {
        it('should call tokenGetTokenByID successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenGetTokenByID call and complete the assertions
          /*
          var id = "id_example";

          instance.tokenGetTokenByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelUserTokenModel);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("General");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.notify;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenGetTokenLogs', function() {
        it('should call tokenGetTokenLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenGetTokenLogs call and complete the assertions
          /*
          var opts = {};
          opts.from = new Date("2013-10-20T19:20:30+01:00");
          opts.to = new Date("2013-10-20T19:20:30+01:00");
          opts.statuscode = 56;
          opts.method = "method_example";
          opts.ip = "ip_example";

          instance.tokenGetTokenLogs(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelUserTokenRequestLogging);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
              expect(data.company).to.be.a('string');
              expect(data.company).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.requestSize).to.be.a('number');
              expect(data.requestSize).to.be("0");
              expect(data.responseSize).to.be.a('number');
              expect(data.responseSize).to.be("0");
              expect(data.method).to.be.a('string');
              expect(data.method).to.be("");
              expect(data.uri).to.be.a('string');
              expect(data.uri).to.be("");
              expect(data.query).to.be.a('string');
              expect(data.query).to.be("");
              expect(data.statusCode).to.be.a('number');
              expect(data.statusCode).to.be(0);
              expect(data.iPAddress).to.be.a('string');
              expect(data.iPAddress).to.be("");
              expect(data.agent).to.be.a('string');
              expect(data.agent).to.be("");
              expect(data.token).to.be.a('string');
              expect(data.token).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.error).to.be.a('string');
              expect(data.error).to.be("");
              expect(data.serviceType).to.be.a('string');
              expect(data.serviceType).to.be("dkPlusAPI");
              expect(data.timeTaken).to.be.a('number');
              expect(data.timeTaken).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenGetUserInfo', function() {
        it('should call tokenGetUserInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenGetUserInfo call and complete the assertions
          /*
          var userID = "userID_example";
          var companyID = "companyID_example";

          instance.tokenGetUserInfo(userID, companyID, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenSendEmail', function() {
        it('should call tokenSendEmail successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenSendEmail call and complete the assertions
          /*
          var message = new DkPlusApi.DkPlusMailModelMailInfo();
          message.displayName = "";
          message.to = "";
          message.CC = "";
          message.BCC = "";
          message.subject = "";
          message.body = "";
          message.priority = "None";
          message.attachments = [""];
          var opts = {};
          opts.from = new Date("2013-10-20T19:20:30+01:00");
          opts.to = new Date("2013-10-20T19:20:30+01:00");

          instance.tokenSendEmail(message, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tokenUpdateToken', function() {
        it('should call tokenUpdateToken successfully', function(done) {
          // TODO: uncomment, update parameter values for tokenUpdateToken call and complete the assertions
          /*
          var id = "id_example";
          var info = new DkPlusApi.DkPlusAPIModelsCreateTokenCredentialModel();
          info.company = "00000000-0000-0000-0000-000000000000";
          info.description = "";

          instance.tokenUpdateToken(id, info, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelUserTokenModel);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.company).to.be.a('string');
            expect(data.company).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("General");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.notify;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
