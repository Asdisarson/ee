/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.EmployeeApi();
  });

  describe('(package)', function() {
    describe('EmployeeApi', function() {
      describe('employeeCreateEmployee', function() {
        it('should call employeeCreateEmployee successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeCreateEmployee call and complete the assertions
          /*
          var employee = new DkPlusApi.DkCloudDataModelEmployeeEmployeeModel();
          employee._number = "";
          employee.name = "";
          employee.address1 = "";
          employee.address2 = "";
          employee.address3 = "";
          employee.zipCode = "";
          employee.city = "";
          employee.countryCode = "";
          employee.sSNumber = "";
          employee.comment = "";
          employee.stampStatus = 0;
          employee.stampType = "stInn";
          employee.phone = "";
          employee.phoneLocal = "";
          employee.phoneMobile = "";
          employee.fax = "";
          employee.email = "";
          employee.url = "";
          employee.tag = "";
          employee.status = 0;
          employee.supervisor = "";
          employee.dim1 = "";
          employee.dim2 = "";
          employee.dim3 = "";
          employee.gender = 0;
          employee.group = "";
          employee.spouseName = "";
          employee.shortName = "";
          employee.modified = new Date();
          employee.created = new Date();
          employee.scanTag = "";
          employee.bankAccount = new DkPlusApi.DkCloudDataModelGeneralBankAccountModel();
          employee.bankAccount.code = "";
          employee.bankAccount.owner = "";
          employee.bankAccount.ownerName = "";
          employee.bankAccount.accountType = "";
          employee.bankAccount.accountGroup = "";
          employee.bankAccount.account = "";
          employee.deleted = false;
          employee.salaryCode = "";
          employee.paymentFrequency = "Monthly";
          employee.paymentMode = "Monthly";
          employee.istarf95 = "";
          employee.iSAT95Status = "Monthly";
          employee.itemCodeForDayTime = "";
          employee.itemCodeForOverTime = "";

          instance.employeeCreateEmployee(employee, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelEmployeeEmployeeModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.address3).to.be.a('string');
            expect(data.address3).to.be("");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.countryCode).to.be.a('string');
            expect(data.countryCode).to.be("");
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.comment).to.be.a('string');
            expect(data.comment).to.be("");
            expect(data.stampStatus).to.be.a('number');
            expect(data.stampStatus).to.be(0);
            expect(data.stampType).to.be.a('string');
            expect(data.stampType).to.be("stInn");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.phoneLocal).to.be.a('string');
            expect(data.phoneLocal).to.be("");
            expect(data.phoneMobile).to.be.a('string');
            expect(data.phoneMobile).to.be("");
            expect(data.fax).to.be.a('string');
            expect(data.fax).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.supervisor).to.be.a('string');
            expect(data.supervisor).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.gender).to.be.a('number');
            expect(data.gender).to.be(0);
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.spouseName).to.be.a('string');
            expect(data.spouseName).to.be("");
            expect(data.shortName).to.be.a('string');
            expect(data.shortName).to.be("");
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.scanTag).to.be.a('string');
            expect(data.scanTag).to.be("");
            expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                  expect(data.bankAccount.code).to.be.a('string');
              expect(data.bankAccount.code).to.be("");
              expect(data.bankAccount.owner).to.be.a('string');
              expect(data.bankAccount.owner).to.be("");
              expect(data.bankAccount.ownerName).to.be.a('string');
              expect(data.bankAccount.ownerName).to.be("");
              expect(data.bankAccount.accountType).to.be.a('string');
              expect(data.bankAccount.accountType).to.be("");
              expect(data.bankAccount.accountGroup).to.be.a('string');
              expect(data.bankAccount.accountGroup).to.be("");
              expect(data.bankAccount.account).to.be.a('string');
              expect(data.bankAccount.account).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.salaryCode).to.be.a('string');
            expect(data.salaryCode).to.be("");
            expect(data.paymentFrequency).to.be.a('string');
            expect(data.paymentFrequency).to.be("Monthly");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("Monthly");
            expect(data.istarf95).to.be.a('string');
            expect(data.istarf95).to.be("");
            expect(data.iSAT95Status).to.be.a('string');
            expect(data.iSAT95Status).to.be("Monthly");
            expect(data.itemCodeForDayTime).to.be.a('string');
            expect(data.itemCodeForDayTime).to.be("");
            expect(data.itemCodeForOverTime).to.be.a('string');
            expect(data.itemCodeForOverTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('employeeGetEmployee', function() {
        it('should call employeeGetEmployee successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeGetEmployee call and complete the assertions
          /*
          var _number = "_number_example";

          instance.employeeGetEmployee(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelEmployeeEmployeeModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.address3).to.be.a('string');
            expect(data.address3).to.be("");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.countryCode).to.be.a('string');
            expect(data.countryCode).to.be("");
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.comment).to.be.a('string');
            expect(data.comment).to.be("");
            expect(data.stampStatus).to.be.a('number');
            expect(data.stampStatus).to.be(0);
            expect(data.stampType).to.be.a('string');
            expect(data.stampType).to.be("stInn");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.phoneLocal).to.be.a('string');
            expect(data.phoneLocal).to.be("");
            expect(data.phoneMobile).to.be.a('string');
            expect(data.phoneMobile).to.be("");
            expect(data.fax).to.be.a('string');
            expect(data.fax).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.supervisor).to.be.a('string');
            expect(data.supervisor).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.gender).to.be.a('number');
            expect(data.gender).to.be(0);
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.spouseName).to.be.a('string');
            expect(data.spouseName).to.be("");
            expect(data.shortName).to.be.a('string');
            expect(data.shortName).to.be("");
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.scanTag).to.be.a('string');
            expect(data.scanTag).to.be("");
            expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                  expect(data.bankAccount.code).to.be.a('string');
              expect(data.bankAccount.code).to.be("");
              expect(data.bankAccount.owner).to.be.a('string');
              expect(data.bankAccount.owner).to.be("");
              expect(data.bankAccount.ownerName).to.be.a('string');
              expect(data.bankAccount.ownerName).to.be("");
              expect(data.bankAccount.accountType).to.be.a('string');
              expect(data.bankAccount.accountType).to.be("");
              expect(data.bankAccount.accountGroup).to.be.a('string');
              expect(data.bankAccount.accountGroup).to.be("");
              expect(data.bankAccount.account).to.be.a('string');
              expect(data.bankAccount.account).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.salaryCode).to.be.a('string');
            expect(data.salaryCode).to.be("");
            expect(data.paymentFrequency).to.be.a('string');
            expect(data.paymentFrequency).to.be("Monthly");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("Monthly");
            expect(data.istarf95).to.be.a('string');
            expect(data.istarf95).to.be("");
            expect(data.iSAT95Status).to.be.a('string');
            expect(data.iSAT95Status).to.be("Monthly");
            expect(data.itemCodeForDayTime).to.be.a('string');
            expect(data.itemCodeForDayTime).to.be("");
            expect(data.itemCodeForOverTime).to.be.a('string');
            expect(data.itemCodeForOverTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('employeeGetEmployeeTimeClock', function() {
        it('should call employeeGetEmployeeTimeClock successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeGetEmployeeTimeClock call and complete the assertions
          /*
          var _number = "_number_example";
          var page = 56;
          var count = 56;

          instance.employeeGetEmployeeTimeClock(_number, page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryModel);
              expect(data.ID).to.be.a('string');
              expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
              expect(data.employee).to.be.a('string');
              expect(data.employee).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.comment).to.be.a('string');
              expect(data.comment).to.be("");
              expect(data.currentStatus).to.be.a('string');
              expect(data.currentStatus).to.be("Work");
              expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                    expect(data.entryType.ID).to.be.a('string');
                expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                expect(data.entryType.name).to.be.a('string');
                expect(data.entryType.name).to.be("");
                expect(data.entryType.dkType).to.be.a('number');
                expect(data.entryType.dkType).to.be(0);
                expect(data.entryType.type).to.be.a('string');
                expect(data.entryType.type).to.be("Work");
                expect(data.entryType.deleted).to.be.a('boolean');
                expect(data.entryType.deleted).to.be(false);
                expect(data.entryType.recurring).to.be.a('boolean');
                expect(data.entryType.recurring).to.be(false);
              expect(data.start).to.be.a(Date);
              expect(data.start).to.be(new Date());
              expect(data.end).to.be.a(Date);
              expect(data.end).to.be(new Date());
              expect(data.actualStart).to.be.a(Date);
              expect(data.actualStart).to.be(new Date());
              expect(data.actualEnd).to.be.a(Date);
              expect(data.actualEnd).to.be(new Date());
              expect(data.totalHours).to.be.a('number');
              expect(data.totalHours).to.be(0.0);
              expect(data.actualTotalHours).to.be.a('number');
              expect(data.actualTotalHours).to.be(0.0);
              expect(data.totalMinutes).to.be.a('number');
              expect(data.totalMinutes).to.be(0.0);
              expect(data.actualTotalMinutes).to.be.a('number');
              expect(data.actualTotalMinutes).to.be(0.0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelTimeClockChildEntryModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
                  expect(data.start).to.be.a(Date);
                  expect(data.start).to.be(new Date());
                  expect(data.end).to.be.a(Date);
                  expect(data.end).to.be(new Date());
                  expect(data.actualStart).to.be.a(Date);
                  expect(data.actualStart).to.be(new Date());
                  expect(data.actualEnd).to.be.a(Date);
                  expect(data.actualEnd).to.be(new Date());
                  expect(data.project).to.be.a('string');
                  expect(data.project).to.be("");
                  expect(data.phase).to.be.a('string');
                  expect(data.phase).to.be("");
                  expect(data.task).to.be.a('string');
                  expect(data.task).to.be("");
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.processed).to.be.a('boolean');
                  expect(data.processed).to.be(false);
                  expect(data.processedJournal).to.be.a('boolean');
                  expect(data.processedJournal).to.be(false);
                  expect(data.entryType).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryTypeModel);
                        expect(data.entryType.ID).to.be.a('string');
                    expect(data.entryType.ID).to.be("00000000-0000-0000-0000-000000000000");
                    expect(data.entryType.name).to.be.a('string');
                    expect(data.entryType.name).to.be("");
                    expect(data.entryType.dkType).to.be.a('number');
                    expect(data.entryType.dkType).to.be(0);
                    expect(data.entryType.type).to.be.a('string');
                    expect(data.entryType.type).to.be("Work");
                    expect(data.entryType.deleted).to.be.a('boolean');
                    expect(data.entryType.deleted).to.be(false);
                    expect(data.entryType.recurring).to.be.a('boolean');
                    expect(data.entryType.recurring).to.be(false);
                  expect(data.totalHours).to.be.a('number');
                  expect(data.totalHours).to.be(0.0);
                  expect(data.roundedTotalHours).to.be.a('number');
                  expect(data.roundedTotalHours).to.be(0.0);
                  expect(data.actualTotalHours).to.be.a('number');
                  expect(data.actualTotalHours).to.be(0.0);
                  expect(data.roundedActualTotalHours).to.be.a('number');
                  expect(data.roundedActualTotalHours).to.be(0.0);
                  expect(data.totalMinutes).to.be.a('number');
                  expect(data.totalMinutes).to.be(0.0);
                  expect(data.roundedTotalMinutes).to.be.a('number');
                  expect(data.roundedTotalMinutes).to.be(0.0);
                  expect(data.actualTotalMinutes).to.be.a('number');
                  expect(data.actualTotalMinutes).to.be(0.0);
                  expect(data.actualRoundedTotalMinutes).to.be.a('number');
                  expect(data.actualRoundedTotalMinutes).to.be(0.0);
  
                        }
              }
              expect(data.processed).to.be.a('boolean');
              expect(data.processed).to.be(false);
              expect(data.processedJournal).to.be.a('boolean');
              expect(data.processedJournal).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('employeeGetEmployees', function() {
        it('should call employeeGetEmployees successfully', function(done) {
          // TODO: uncomment employeeGetEmployees call and complete the assertions
          /*

          instance.employeeGetEmployees(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelEmployeeEmployeeModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.address1).to.be.a('string');
              expect(data.address1).to.be("");
              expect(data.address2).to.be.a('string');
              expect(data.address2).to.be("");
              expect(data.address3).to.be.a('string');
              expect(data.address3).to.be("");
              expect(data.zipCode).to.be.a('string');
              expect(data.zipCode).to.be("");
              expect(data.city).to.be.a('string');
              expect(data.city).to.be("");
              expect(data.countryCode).to.be.a('string');
              expect(data.countryCode).to.be("");
              expect(data.sSNumber).to.be.a('string');
              expect(data.sSNumber).to.be("");
              expect(data.comment).to.be.a('string');
              expect(data.comment).to.be("");
              expect(data.stampStatus).to.be.a('number');
              expect(data.stampStatus).to.be(0);
              expect(data.stampType).to.be.a('string');
              expect(data.stampType).to.be("stInn");
              expect(data.phone).to.be.a('string');
              expect(data.phone).to.be("");
              expect(data.phoneLocal).to.be.a('string');
              expect(data.phoneLocal).to.be("");
              expect(data.phoneMobile).to.be.a('string');
              expect(data.phoneMobile).to.be("");
              expect(data.fax).to.be.a('string');
              expect(data.fax).to.be("");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("");
              expect(data.url).to.be.a('string');
              expect(data.url).to.be("");
              expect(data.tag).to.be.a('string');
              expect(data.tag).to.be("");
              expect(data.status).to.be.a('number');
              expect(data.status).to.be(0);
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.gender).to.be.a('number');
              expect(data.gender).to.be(0);
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.spouseName).to.be.a('string');
              expect(data.spouseName).to.be("");
              expect(data.shortName).to.be.a('string');
              expect(data.shortName).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.scanTag).to.be.a('string');
              expect(data.scanTag).to.be("");
              expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                    expect(data.bankAccount.code).to.be.a('string');
                expect(data.bankAccount.code).to.be("");
                expect(data.bankAccount.owner).to.be.a('string');
                expect(data.bankAccount.owner).to.be("");
                expect(data.bankAccount.ownerName).to.be.a('string');
                expect(data.bankAccount.ownerName).to.be("");
                expect(data.bankAccount.accountType).to.be.a('string');
                expect(data.bankAccount.accountType).to.be("");
                expect(data.bankAccount.accountGroup).to.be.a('string');
                expect(data.bankAccount.accountGroup).to.be("");
                expect(data.bankAccount.account).to.be.a('string');
                expect(data.bankAccount.account).to.be("");
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.salaryCode).to.be.a('string');
              expect(data.salaryCode).to.be("");
              expect(data.paymentFrequency).to.be.a('string');
              expect(data.paymentFrequency).to.be("Monthly");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("Monthly");
              expect(data.istarf95).to.be.a('string');
              expect(data.istarf95).to.be("");
              expect(data.iSAT95Status).to.be.a('string');
              expect(data.iSAT95Status).to.be("Monthly");
              expect(data.itemCodeForDayTime).to.be.a('string');
              expect(data.itemCodeForDayTime).to.be("");
              expect(data.itemCodeForOverTime).to.be.a('string');
              expect(data.itemCodeForOverTime).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('employeeGetProjectSupervisor', function() {
        it('should call employeeGetProjectSupervisor successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeGetProjectSupervisor call and complete the assertions
          /*
          var _number = "_number_example";

          instance.employeeGetProjectSupervisor(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.masterJobNumber).to.be.a('string');
              expect(data.masterJobNumber).to.be("");
              expect(data.quotationNumber).to.be.a('number');
              expect(data.quotationNumber).to.be(0);
              expect(data.customerToBill).to.be.a('string');
              expect(data.customerToBill).to.be("");
              expect(data.customerNameToBill).to.be.a('string');
              expect(data.customerNameToBill).to.be("");
              expect(data.customerToRecieve).to.be.a('string');
              expect(data.customerToRecieve).to.be("");
              expect(data.founder).to.be.a('string');
              expect(data.founder).to.be("");
              expect(data.owner).to.be.a('string');
              expect(data.owner).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              expect(data.foundingDate).to.be.a(Date);
              expect(data.foundingDate).to.be(new Date());
              expect(data.estimatedBeginingDate).to.be.a(Date);
              expect(data.estimatedBeginingDate).to.be(new Date());
              expect(data.estimatedFinishDate).to.be.a(Date);
              expect(data.estimatedFinishDate).to.be(new Date());
              expect(data.actualBeginingDate).to.be.a(Date);
              expect(data.actualBeginingDate).to.be(new Date());
              expect(data.actualFinishDate).to.be.a(Date);
              expect(data.actualFinishDate).to.be(new Date());
              expect(data.optimistDate).to.be.a(Date);
              expect(data.optimistDate).to.be(new Date());
              expect(data.pessimistDate).to.be.a(Date);
              expect(data.pessimistDate).to.be(new Date());
              expect(data.jobType).to.be.a('string');
              expect(data.jobType).to.be("_cbTimeJob");
              expect(data.jobStatus).to.be.a('string');
              expect(data.jobStatus).to.be("NotStarted");
              expect(data.jobBillingMode).to.be.a('string');
              expect(data.jobBillingMode).to.be("Monthly");
              expect(data.phaseId).to.be.a('string');
              expect(data.phaseId).to.be("");
              expect(data.phaseRequired).to.be.a('boolean');
              expect(data.phaseRequired).to.be(false);
              expect(data.taskId).to.be.a('string');
              expect(data.taskId).to.be("");
              expect(data.taskRequired).to.be.a('boolean');
              expect(data.taskRequired).to.be(false);
              expect(data.foreignName).to.be.a('string');
              expect(data.foreignName).to.be("");
              expect(data.jobContactName).to.be.a('string');
              expect(data.jobContactName).to.be("");
              expect(data.quotationAmount).to.be.a('number');
              expect(data.quotationAmount).to.be(0.0);
              expect(data.serialnumber).to.be.a('string');
              expect(data.serialnumber).to.be("");
              expect(data.quotationAmountWithVAT).to.be.a('boolean');
              expect(data.quotationAmountWithVAT).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.discountType).to.be.a('string');
              expect(data.discountType).to.be("CustomerDiscount");
              expect(data.jobDiscountPercent).to.be.a('number');
              expect(data.jobDiscountPercent).to.be(0.0);
              expect(data.discountOfTime).to.be.a('boolean');
              expect(data.discountOfTime).to.be(false);
              expect(data.discountOfDriveTime).to.be.a('boolean');
              expect(data.discountOfDriveTime).to.be(false);
              expect(data.discountOfCost).to.be.a('boolean');
              expect(data.discountOfCost).to.be(false);
              expect(data.foreignPriceForWork).to.be.a('number');
              expect(data.foreignPriceForWork).to.be(0.0);
              expect(data.skipTaxOnInvoice).to.be.a('boolean');
              expect(data.skipTaxOnInvoice).to.be(false);
              expect(data.quotationCurrencyCode).to.be.a('string');
              expect(data.quotationCurrencyCode).to.be("");
              expect(data.quotationWorkingHours).to.be.a('number');
              expect(data.quotationWorkingHours).to.be(0.0);
              expect(data.quotationWorkingAmount).to.be.a('number');
              expect(data.quotationWorkingAmount).to.be(0.0);
              expect(data.quotationCostAmount).to.be.a('number');
              expect(data.quotationCostAmount).to.be(0.0);
              expect(data.quotationLicenceAmount).to.be.a('number');
              expect(data.quotationLicenceAmount).to.be(0.0);
              {
                let dataCtr = data.linkedPhases;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                  expect(data.phaseID).to.be.a('string');
                  expect(data.phaseID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
              {
                let dataCtr = data.linkedTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                  expect(data.taskID).to.be.a('string');
                  expect(data.taskID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('employeeGetProjectWorker', function() {
        it('should call employeeGetProjectWorker successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeGetProjectWorker call and complete the assertions
          /*
          var _number = "_number_example";

          instance.employeeGetProjectWorker(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.masterJobNumber).to.be.a('string');
              expect(data.masterJobNumber).to.be("");
              expect(data.quotationNumber).to.be.a('number');
              expect(data.quotationNumber).to.be(0);
              expect(data.customerToBill).to.be.a('string');
              expect(data.customerToBill).to.be("");
              expect(data.customerNameToBill).to.be.a('string');
              expect(data.customerNameToBill).to.be("");
              expect(data.customerToRecieve).to.be.a('string');
              expect(data.customerToRecieve).to.be("");
              expect(data.founder).to.be.a('string');
              expect(data.founder).to.be("");
              expect(data.owner).to.be.a('string');
              expect(data.owner).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              expect(data.foundingDate).to.be.a(Date);
              expect(data.foundingDate).to.be(new Date());
              expect(data.estimatedBeginingDate).to.be.a(Date);
              expect(data.estimatedBeginingDate).to.be(new Date());
              expect(data.estimatedFinishDate).to.be.a(Date);
              expect(data.estimatedFinishDate).to.be(new Date());
              expect(data.actualBeginingDate).to.be.a(Date);
              expect(data.actualBeginingDate).to.be(new Date());
              expect(data.actualFinishDate).to.be.a(Date);
              expect(data.actualFinishDate).to.be(new Date());
              expect(data.optimistDate).to.be.a(Date);
              expect(data.optimistDate).to.be(new Date());
              expect(data.pessimistDate).to.be.a(Date);
              expect(data.pessimistDate).to.be(new Date());
              expect(data.jobType).to.be.a('string');
              expect(data.jobType).to.be("_cbTimeJob");
              expect(data.jobStatus).to.be.a('string');
              expect(data.jobStatus).to.be("NotStarted");
              expect(data.jobBillingMode).to.be.a('string');
              expect(data.jobBillingMode).to.be("Monthly");
              expect(data.phaseId).to.be.a('string');
              expect(data.phaseId).to.be("");
              expect(data.phaseRequired).to.be.a('boolean');
              expect(data.phaseRequired).to.be(false);
              expect(data.taskId).to.be.a('string');
              expect(data.taskId).to.be("");
              expect(data.taskRequired).to.be.a('boolean');
              expect(data.taskRequired).to.be(false);
              expect(data.foreignName).to.be.a('string');
              expect(data.foreignName).to.be("");
              expect(data.jobContactName).to.be.a('string');
              expect(data.jobContactName).to.be("");
              expect(data.quotationAmount).to.be.a('number');
              expect(data.quotationAmount).to.be(0.0);
              expect(data.serialnumber).to.be.a('string');
              expect(data.serialnumber).to.be("");
              expect(data.quotationAmountWithVAT).to.be.a('boolean');
              expect(data.quotationAmountWithVAT).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.discountType).to.be.a('string');
              expect(data.discountType).to.be("CustomerDiscount");
              expect(data.jobDiscountPercent).to.be.a('number');
              expect(data.jobDiscountPercent).to.be(0.0);
              expect(data.discountOfTime).to.be.a('boolean');
              expect(data.discountOfTime).to.be(false);
              expect(data.discountOfDriveTime).to.be.a('boolean');
              expect(data.discountOfDriveTime).to.be(false);
              expect(data.discountOfCost).to.be.a('boolean');
              expect(data.discountOfCost).to.be(false);
              expect(data.foreignPriceForWork).to.be.a('number');
              expect(data.foreignPriceForWork).to.be(0.0);
              expect(data.skipTaxOnInvoice).to.be.a('boolean');
              expect(data.skipTaxOnInvoice).to.be(false);
              expect(data.quotationCurrencyCode).to.be.a('string');
              expect(data.quotationCurrencyCode).to.be("");
              expect(data.quotationWorkingHours).to.be.a('number');
              expect(data.quotationWorkingHours).to.be(0.0);
              expect(data.quotationWorkingAmount).to.be.a('number');
              expect(data.quotationWorkingAmount).to.be(0.0);
              expect(data.quotationCostAmount).to.be.a('number');
              expect(data.quotationCostAmount).to.be(0.0);
              expect(data.quotationLicenceAmount).to.be.a('number');
              expect(data.quotationLicenceAmount).to.be(0.0);
              {
                let dataCtr = data.linkedPhases;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                  expect(data.phaseID).to.be.a('string');
                  expect(data.phaseID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
              {
                let dataCtr = data.linkedTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                  expect(data.taskID).to.be.a('string');
                  expect(data.taskID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('employeeUpdateEmployee', function() {
        it('should call employeeUpdateEmployee successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeUpdateEmployee call and complete the assertions
          /*
          var _number = "_number_example";
          var employee = new DkPlusApi.DkCloudDataModelEmployeeEmployeeModel();
          employee._number = "";
          employee.name = "";
          employee.address1 = "";
          employee.address2 = "";
          employee.address3 = "";
          employee.zipCode = "";
          employee.city = "";
          employee.countryCode = "";
          employee.sSNumber = "";
          employee.comment = "";
          employee.stampStatus = 0;
          employee.stampType = "stInn";
          employee.phone = "";
          employee.phoneLocal = "";
          employee.phoneMobile = "";
          employee.fax = "";
          employee.email = "";
          employee.url = "";
          employee.tag = "";
          employee.status = 0;
          employee.supervisor = "";
          employee.dim1 = "";
          employee.dim2 = "";
          employee.dim3 = "";
          employee.gender = 0;
          employee.group = "";
          employee.spouseName = "";
          employee.shortName = "";
          employee.modified = new Date();
          employee.created = new Date();
          employee.scanTag = "";
          employee.bankAccount = new DkPlusApi.DkCloudDataModelGeneralBankAccountModel();
          employee.bankAccount.code = "";
          employee.bankAccount.owner = "";
          employee.bankAccount.ownerName = "";
          employee.bankAccount.accountType = "";
          employee.bankAccount.accountGroup = "";
          employee.bankAccount.account = "";
          employee.deleted = false;
          employee.salaryCode = "";
          employee.paymentFrequency = "Monthly";
          employee.paymentMode = "Monthly";
          employee.istarf95 = "";
          employee.iSAT95Status = "Monthly";
          employee.itemCodeForDayTime = "";
          employee.itemCodeForOverTime = "";

          instance.employeeUpdateEmployee(_number, employee, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelEmployeeEmployeeModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.address1).to.be.a('string');
            expect(data.address1).to.be("");
            expect(data.address2).to.be.a('string');
            expect(data.address2).to.be("");
            expect(data.address3).to.be.a('string');
            expect(data.address3).to.be("");
            expect(data.zipCode).to.be.a('string');
            expect(data.zipCode).to.be("");
            expect(data.city).to.be.a('string');
            expect(data.city).to.be("");
            expect(data.countryCode).to.be.a('string');
            expect(data.countryCode).to.be("");
            expect(data.sSNumber).to.be.a('string');
            expect(data.sSNumber).to.be("");
            expect(data.comment).to.be.a('string');
            expect(data.comment).to.be("");
            expect(data.stampStatus).to.be.a('number');
            expect(data.stampStatus).to.be(0);
            expect(data.stampType).to.be.a('string');
            expect(data.stampType).to.be("stInn");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.phoneLocal).to.be.a('string');
            expect(data.phoneLocal).to.be("");
            expect(data.phoneMobile).to.be.a('string');
            expect(data.phoneMobile).to.be("");
            expect(data.fax).to.be.a('string');
            expect(data.fax).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.status).to.be.a('number');
            expect(data.status).to.be(0);
            expect(data.supervisor).to.be.a('string');
            expect(data.supervisor).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.gender).to.be.a('number');
            expect(data.gender).to.be(0);
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.spouseName).to.be.a('string');
            expect(data.spouseName).to.be("");
            expect(data.shortName).to.be.a('string');
            expect(data.shortName).to.be("");
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.scanTag).to.be.a('string');
            expect(data.scanTag).to.be("");
            expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelGeneralBankAccountModel);
                  expect(data.bankAccount.code).to.be.a('string');
              expect(data.bankAccount.code).to.be("");
              expect(data.bankAccount.owner).to.be.a('string');
              expect(data.bankAccount.owner).to.be("");
              expect(data.bankAccount.ownerName).to.be.a('string');
              expect(data.bankAccount.ownerName).to.be("");
              expect(data.bankAccount.accountType).to.be.a('string');
              expect(data.bankAccount.accountType).to.be("");
              expect(data.bankAccount.accountGroup).to.be.a('string');
              expect(data.bankAccount.accountGroup).to.be("");
              expect(data.bankAccount.account).to.be.a('string');
              expect(data.bankAccount.account).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.salaryCode).to.be.a('string');
            expect(data.salaryCode).to.be("");
            expect(data.paymentFrequency).to.be.a('string');
            expect(data.paymentFrequency).to.be("Monthly");
            expect(data.paymentMode).to.be.a('string');
            expect(data.paymentMode).to.be("Monthly");
            expect(data.istarf95).to.be.a('string');
            expect(data.istarf95).to.be("");
            expect(data.iSAT95Status).to.be.a('string');
            expect(data.iSAT95Status).to.be("Monthly");
            expect(data.itemCodeForDayTime).to.be.a('string');
            expect(data.itemCodeForDayTime).to.be("");
            expect(data.itemCodeForOverTime).to.be.a('string');
            expect(data.itemCodeForOverTime).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('employeeWorkCreateEmployeeWork', function() {
        it('should call employeeWorkCreateEmployeeWork successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeWorkCreateEmployeeWork call
          /*
          var employee = "employee_example";
          var lines = [new DkPlusApi.DkPlusAPIModelsEmployeeEmployeeWork()];
          lines[0]._date = new Date();
          lines[0].text = "";
          lines[0].project = "";
          lines[0].phase = "";
          lines[0].task = "";
          lines[0].dayTime = 0.0;
          lines[0].driveTime = 0.0;
          lines[0].overTime = 0.0;
          lines[0].billable = false;
          var opts = {};
          opts.post = true;

          instance.employeeWorkCreateEmployeeWork(employee, lines, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
