/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.TransactionApi();
  });

  describe('(package)', function() {
    describe('TransactionApi', function() {
      describe('customerTransactionGetCustomerTransactions', function() {
        it('should call customerTransactionGetCustomerTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for customerTransactionGetCustomerTransactions call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;
          opts.include = "include_example";
          opts.customer = "customer_example";

          instance.customerTransactionGetCustomerTransactions(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersTransactionModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be("0");
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be("0");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.journalHeadCode).to.be.a('string');
              expect(data.journalHeadCode).to.be("");
              expect(data.settledCurrencyAmount).to.be.a('number');
              expect(data.settledCurrencyAmount).to.be(0.0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.settledStatus).to.be.a('number');
              expect(data.settledStatus).to.be(0.0);
              expect(data.settled).to.be.a('boolean');
              expect(data.settled).to.be(false);
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.currencyAmount).to.be.a('number');
              expect(data.currencyAmount).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.code).to.be.a('number');
              expect(data.code).to.be(0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.recordType).to.be.a('string');
              expect(data.recordType).to.be("DebetJournal");
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("GeneralLedger");
              expect(data.settleId).to.be.a('number');
              expect(data.settleId).to.be(0);
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('generalLedgerTransactionGetGeneralTransactionPage', function() {
        it('should call generalLedgerTransactionGetGeneralTransactionPage successfully', function(done) {
          // TODO: uncomment, update parameter values for generalLedgerTransactionGetGeneralTransactionPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.account = "account_example";
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;
          opts.include = "include_example";
          opts.sort = "sort_example";
          opts.sorttype = "sorttype_example";

          instance.generalLedgerTransactionGetGeneralTransactionPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerTransaction);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be("0");
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be("0");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.account).to.be.a('string');
              expect(data.account).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.journalType).to.be.a('number');
              expect(data.journalType).to.be(0);
              expect(data.code).to.be.a('number');
              expect(data.code).to.be(0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.taxCode).to.be.a('string');
              expect(data.taxCode).to.be("");
              expect(data.taxGroup).to.be.a('number');
              expect(data.taxGroup).to.be(0);
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.hCode).to.be.a('string');
              expect(data.hCode).to.be("");
              expect(data.hType).to.be.a('number');
              expect(data.hType).to.be(0);
              expect(data.subAccount).to.be.a('string');
              expect(data.subAccount).to.be("");
              expect(data.isCredit).to.be.a('boolean');
              expect(data.isCredit).to.be(false);
              expect(data.krofunumer).to.be.a('string');
              expect(data.krofunumer).to.be("");
              expect(data.periodId).to.be.a('number');
              expect(data.periodId).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.numberOfQuantity).to.be.a('number');
              expect(data.numberOfQuantity).to.be(0.0);
              expect(data.quantityUnitCode).to.be.a('string');
              expect(data.quantityUnitCode).to.be("");
              expect(data.percentageOfVATUsed).to.be.a('number');
              expect(data.percentageOfVATUsed).to.be(0.0);
              expect(data.vATReportID).to.be.a('number');
              expect(data.vATReportID).to.be(0);
              expect(data.vATReportGroup).to.be.a('string');
              expect(data.vATReportGroup).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('productTransactionGetInventoryTransactionsPage', function() {
        it('should call productTransactionGetInventoryTransactionsPage successfully', function(done) {
          // TODO: uncomment, update parameter values for productTransactionGetInventoryTransactionsPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.itemcode = "itemcode_example";
          opts.warehouse = "warehouse_example";
          opts.currency = "currency_example";
          opts.reference = "reference_example";
          opts.include = "include_example";

          instance.productTransactionGetInventoryTransactionsPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsTransactionsModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.origin).to.be.a('string');
              expect(data.origin).to.be("GLJournal");
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be(0);
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be(0);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.warehouse).to.be.a('string');
              expect(data.warehouse).to.be("");
              expect(data.subGroup1).to.be.a('string');
              expect(data.subGroup1).to.be("");
              expect(data.subGroup2).to.be.a('string');
              expect(data.subGroup2).to.be("");
              expect(data.subGroup3).to.be.a('string');
              expect(data.subGroup3).to.be("");
              expect(data.subGroup4).to.be.a('string');
              expect(data.subGroup4).to.be("");
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.transactionCode).to.be.a('string');
              expect(data.transactionCode).to.be("InTransactionJournal");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("Manual");
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.purchasePrice).to.be.a('number');
              expect(data.purchasePrice).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.costPrice).to.be.a('number');
              expect(data.costPrice).to.be(0.0);
              expect(data.costAmount).to.be.a('number');
              expect(data.costAmount).to.be(0.0);
              expect(data.salesAmount).to.be.a('number');
              expect(data.salesAmount).to.be(0.0);
              expect(data.inventOnHand).to.be.a('number');
              expect(data.inventOnHand).to.be(0.0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.netWeight).to.be.a('number');
              expect(data.netWeight).to.be(0.0);
              expect(data.unitVolume).to.be.a('number');
              expect(data.unitVolume).to.be(0.0);
              expect(data.numberOfPackages).to.be.a('number');
              expect(data.numberOfPackages).to.be(0.0);
              expect(data.countedQuantity).to.be.a('number');
              expect(data.countedQuantity).to.be(0.0);
              expect(data.jobNumber).to.be.a('string');
              expect(data.jobNumber).to.be("");
              expect(data.vendorPrice).to.be.a('number');
              expect(data.vendorPrice).to.be(0.0);
              expect(data.vendorDiscount).to.be.a('number');
              expect(data.vendorDiscount).to.be(0.0);
              expect(data.fabrication).to.be.a('number');
              expect(data.fabrication).to.be(0);
              expect(data.batch).to.be.a('string');
              expect(data.batch).to.be("");
              expect(data.batchExpiry).to.be.a(Date);
              expect(data.batchExpiry).to.be(new Date());
              expect(data._typeOf).to.be.a('string');
              expect(data._typeOf).to.be("NotDefined");
              expect(data.purchaseAmount).to.be.a('number');
              expect(data.purchaseAmount).to.be(0.0);
              expect(data.unitCode).to.be.a('string');
              expect(data.unitCode).to.be("");
              expect(data.iNPUnitCode).to.be.a('string');
              expect(data.iNPUnitCode).to.be("");
              expect(data.poBatchId).to.be.a('number');
              expect(data.poBatchId).to.be(0);
              expect(data.jobRequestId).to.be.a('string');
              expect(data.jobRequestId).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectTransactionGetProjectTransactionPage', function() {
        it('should call projectTransactionGetProjectTransactionPage successfully', function(done) {
          // TODO: uncomment, update parameter values for projectTransactionGetProjectTransactionPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.project = "project_example";
          opts.account = "account_example";
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;
          opts.origin = "origin_example";
          opts.include = "include_example";
          opts.sort = "sort_example";
          opts.sorttype = "sorttype_example";

          instance.projectTransactionGetProjectTransactionPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerTransaction);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be("0");
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be("0");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.account).to.be.a('string');
              expect(data.account).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.journalType).to.be.a('number');
              expect(data.journalType).to.be(0);
              expect(data.code).to.be.a('number');
              expect(data.code).to.be(0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.taxCode).to.be.a('string');
              expect(data.taxCode).to.be("");
              expect(data.taxGroup).to.be.a('number');
              expect(data.taxGroup).to.be(0);
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.hCode).to.be.a('string');
              expect(data.hCode).to.be("");
              expect(data.hType).to.be.a('number');
              expect(data.hType).to.be(0);
              expect(data.subAccount).to.be.a('string');
              expect(data.subAccount).to.be("");
              expect(data.isCredit).to.be.a('boolean');
              expect(data.isCredit).to.be(false);
              expect(data.krofunumer).to.be.a('string');
              expect(data.krofunumer).to.be("");
              expect(data.periodId).to.be.a('number');
              expect(data.periodId).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.numberOfQuantity).to.be.a('number');
              expect(data.numberOfQuantity).to.be(0.0);
              expect(data.quantityUnitCode).to.be.a('string');
              expect(data.quantityUnitCode).to.be("");
              expect(data.percentageOfVATUsed).to.be.a('number');
              expect(data.percentageOfVATUsed).to.be(0.0);
              expect(data.vATReportID).to.be.a('number');
              expect(data.vATReportID).to.be(0);
              expect(data.vATReportGroup).to.be.a('string');
              expect(data.vATReportGroup).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorTransactionGetVendorTransactions', function() {
        it('should call vendorTransactionGetVendorTransactions successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorTransactionGetVendorTransactions call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dueAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;

          instance.vendorTransactionGetVendorTransactions(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsTransaction);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.ledgerAccount).to.be.a('string');
              expect(data.ledgerAccount).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.journalType).to.be.a('string');
              expect(data.journalType).to.be("GeneralLedger");
              expect(data.journalHeadType).to.be.a('string');
              expect(data.journalHeadType).to.be("Manual");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.currencyAmount).to.be.a('number');
              expect(data.currencyAmount).to.be(0.0);
              expect(data.settleAmount).to.be.a('number');
              expect(data.settleAmount).to.be(0.0);
              expect(data.settledCurrencyAmount).to.be.a('number');
              expect(data.settledCurrencyAmount).to.be(0.0);
              expect(data.settleId).to.be.a('number');
              expect(data.settleId).to.be(0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.origin).to.be.a('string');
              expect(data.origin).to.be("GLJournal");
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("Ordinary");
              expect(data.transactionType).to.be.a('string');
              expect(data.transactionType).to.be("Debit");
              expect(data.recordType).to.be.a('string');
              expect(data.recordType).to.be("DebitJournal");
              expect(data.paymentSlip).to.be.a('string');
              expect(data.paymentSlip).to.be("BankTransfer");
              expect(data.paymentStatus).to.be.a('string');
              expect(data.paymentStatus).to.be("StatusNone");
              expect(data.journalHeadCode).to.be.a('string');
              expect(data.journalHeadCode).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
