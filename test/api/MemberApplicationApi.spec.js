/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.MemberApplicationApi();
  });

  describe('(package)', function() {
    describe('MemberApplicationApi', function() {
      describe('memberApplicationGetApplicationAttachmentContent', function() {
        it('should call memberApplicationGetApplicationAttachmentContent successfully', function(done) {
          // TODO: uncomment, update parameter values for memberApplicationGetApplicationAttachmentContent call and complete the assertions
          /*
          var fund = "fund_example";
          var application = 56;
          var id = 56;

          instance.memberApplicationGetApplicationAttachmentContent(fund, application, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.SystemWebMvcFileContentResult);
            expect(data.fileContents).to.be.a(Blob);
            expect(data.fileContents).to.be(""undefined);
            expect(data.contentType).to.be.a('string');
            expect(data.contentType).to.be("");
            expect(data.fileDownloadName).to.be.a('string');
            expect(data.fileDownloadName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberApplicationGetApplicationAttachments', function() {
        it('should call memberApplicationGetApplicationAttachments successfully', function(done) {
          // TODO: uncomment, update parameter values for memberApplicationGetApplicationAttachments call and complete the assertions
          /*
          var fund = "fund_example";
          var id = 56;

          instance.memberApplicationGetApplicationAttachments(fund, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.SystemIOStream);
            expect(data.canRead).to.be.a('boolean');
            expect(data.canRead).to.be(false);
            expect(data.canSeek).to.be.a('boolean');
            expect(data.canSeek).to.be(false);
            expect(data.canTimeout).to.be.a('boolean');
            expect(data.canTimeout).to.be(false);
            expect(data.canWrite).to.be.a('boolean');
            expect(data.canWrite).to.be(false);
            expect(data.length).to.be.a('number');
            expect(data.length).to.be("0");
            expect(data.position).to.be.a('number');
            expect(data.position).to.be("0");
            expect(data.readTimeout).to.be.a('number');
            expect(data.readTimeout).to.be(0);
            expect(data.writeTimeout).to.be.a('number');
            expect(data.writeTimeout).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberApplicationGetApplications', function() {
        it('should call memberApplicationGetApplications successfully', function(done) {
          // TODO: uncomment, update parameter values for memberApplicationGetApplications call and complete the assertions
          /*
          var _number = "_number_example";

          instance.memberApplicationGetApplications(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersApplication);
              expect(data.member).to.be.a('string');
              expect(data.member).to.be("");
              expect(data.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelMembersApplicationBankAccount);
                    expect(data.bankAccount.code).to.be.a('string');
                expect(data.bankAccount.code).to.be("");
                expect(data.bankAccount.group).to.be.a('string');
                expect(data.bankAccount.group).to.be("");
                expect(data.bankAccount.account).to.be.a('string');
                expect(data.bankAccount.account).to.be("");
              expect(data.contact).to.be.a(DkPlusApi.DkCloudDataModelMembersApplicationContact);
                    expect(data.contact._number).to.be.a('string');
                expect(data.contact._number).to.be("");
                expect(data.contact.name).to.be.a('string');
                expect(data.contact.name).to.be("");
                expect(data.contact.phone).to.be.a('string');
                expect(data.contact.phone).to.be("");
                expect(data.contact.mobile).to.be.a('string');
                expect(data.contact.mobile).to.be("");
                expect(data.contact.email).to.be.a('string');
                expect(data.contact.email).to.be("");
                expect(data.contact.bankAccount).to.be.a(DkPlusApi.DkCloudDataModelMembersApplicationContactBankAccount);
                      expect(data.contact.bankAccount.group).to.be.a('string');
                  expect(data.contact.bankAccount.group).to.be("");
                  expect(data.contact.bankAccount.account).to.be.a('string');
                  expect(data.contact.bankAccount.account).to.be("");
                  expect(data.contact.bankAccount.accountId).to.be.a('string');
                  expect(data.contact.bankAccount.accountId).to.be("");
                  expect(data.contact.bankAccount.code).to.be.a('string');
                  expect(data.contact.bankAccount.code).to.be("");
                {
                  let dataCtr = data.contact.extraProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.fund).to.be.a('string');
              expect(data.fund).to.be("");
              expect(data.grantDescription).to.be.a('string');
              expect(data.grantDescription).to.be("");
              expect(data.grant).to.be.a('string');
              expect(data.grant).to.be("");
              expect(data.purpose).to.be.a('string');
              expect(data.purpose).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data._number).to.be.a('number');
              expect(data._number).to.be(0);
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("InProgress");
              expect(data.managedBy).to.be.a('string');
              expect(data.managedBy).to.be("Employee");
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(new Date());
              expect(data.dateOfMeeting).to.be.a(Date);
              expect(data.dateOfMeeting).to.be(new Date());
              expect(data.denialCode).to.be.a('string');
              expect(data.denialCode).to.be("");
              expect(data.denialCodeDescription).to.be.a('string');
              expect(data.denialCodeDescription).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.subGroup).to.be.a('string');
              expect(data.subGroup).to.be("");
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.period).to.be.a(DkPlusApi.DkCloudDataModelGeneralDateRange);
                    expect(data.period.from).to.be.a(Date);
                expect(data.period.from).to.be(new Date());
                expect(data.period.to).to.be.a(Date);
                expect(data.period.to).to.be(new Date());
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.posted).to.be.a(Date);
              expect(data.posted).to.be(new Date());
              expect(data.comment).to.be.a('string');
              expect(data.comment).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.membershipRulesOK).to.be.a('boolean');
              expect(data.membershipRulesOK).to.be(false);
              expect(data.grantRulesOK).to.be.a('boolean');
              expect(data.grantRulesOK).to.be(false);
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.jobRatio).to.be.a('number');
              expect(data.jobRatio).to.be(0.0);
              expect(data.periodDesc).to.be.a('string');
              expect(data.periodDesc).to.be("");
              expect(data.communicationMemo).to.be.a('string');
              expect(data.communicationMemo).to.be("");
              expect(data.grantCount).to.be.a('number');
              expect(data.grantCount).to.be(0);
              expect(data.unitCount).to.be.a('number');
              expect(data.unitCount).to.be(0);
              expect(data.location).to.be.a('string');
              expect(data.location).to.be("");
              expect(data.periodDescription).to.be.a('string');
              expect(data.periodDescription).to.be("");
              expect(data.organizer).to.be.a('string');
              expect(data.organizer).to.be("");
              expect(data.workPlace).to.be.a('string');
              expect(data.workPlace).to.be("");
              expect(data.workPlaceNumber).to.be.a('string');
              expect(data.workPlaceNumber).to.be("");
              expect(data.voucherTag).to.be.a('string');
              expect(data.voucherTag).to.be("");
              {
                let dataCtr = data.details;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersApplicationDetail);
                  expect(data.typeOfPayment).to.be.a('string');
                  expect(data.typeOfPayment).to.be("Normal");
                  expect(data.actualPaymentDate).to.be.a(Date);
                  expect(data.actualPaymentDate).to.be(new Date());
                  expect(data.paymentAmount).to.be.a('number');
                  expect(data.paymentAmount).to.be(0.0);
                  expect(data.paymentPaid).to.be.a('boolean');
                  expect(data.paymentPaid).to.be(false);
                  expect(data.amountPaid).to.be.a('number');
                  expect(data.amountPaid).to.be(0.0);
                  expect(data.taxAmountPaid).to.be.a('number');
                  expect(data.taxAmountPaid).to.be(0.0);
                  {
                    let dataCtr = data.extraProperties;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
  
                        }
              }
              {
                let dataCtr = data.workPlaceHistory;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersWorkPlaceHistory);
                  expect(data.workPlaceNumber).to.be.a('string');
                  expect(data.workPlaceNumber).to.be("");
                  expect(data.workPlaceName).to.be.a('string');
                  expect(data.workPlaceName).to.be("");
                  expect(data.dateFrom).to.be.a(Date);
                  expect(data.dateFrom).to.be(new Date());
                  expect(data.dateTo).to.be.a(Date);
                  expect(data.dateTo).to.be(new Date());
                  expect(data.jobRatio).to.be.a('number');
                  expect(data.jobRatio).to.be(0.0);
                  {
                    let dataCtr = data.extraProperties;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
  
                        }
              }
              {
                let dataCtr = data.maternityLeaves;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelMembersMaternityLeave);
                  expect(data.dateFrom).to.be.a(Date);
                  expect(data.dateFrom).to.be(new Date());
                  expect(data.dateTo).to.be.a(Date);
                  expect(data.dateTo).to.be(new Date());
                  expect(data.jobRatio).to.be.a('number');
                  expect(data.jobRatio).to.be(0.0);
                  {
                    let dataCtr = data.extraProperties;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
  
                        }
              }
              expect(data.amountTraveled).to.be.a('number');
              expect(data.amountTraveled).to.be(0.0);
              expect(data.travelCost).to.be.a('number');
              expect(data.travelCost).to.be(0.0);
              expect(data.companyID).to.be.a('string');
              expect(data.companyID).to.be("");
              {
                let dataCtr = data.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              expect(data.termsConsentGiven).to.be.a('boolean');
              expect(data.termsConsentGiven).to.be(false);
              expect(data.termId).to.be.a('number');
              expect(data.termId).to.be(0);
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberApplicationPostApplication', function() {
        it('should call memberApplicationPostApplication successfully', function(done) {
          // TODO: uncomment, update parameter values for memberApplicationPostApplication call and complete the assertions
          /*
          var _number = "_number_example";
          var obj = new DkPlusApi.DkCloudDataModelMembersApplication();
          obj.member = "";
          obj.bankAccount = new DkPlusApi.DkCloudDataModelMembersApplicationBankAccount();
          obj.bankAccount.code = "";
          obj.bankAccount.group = "";
          obj.bankAccount.account = "";
          obj.contact = new DkPlusApi.DkCloudDataModelMembersApplicationContact();
          obj.contact._number = "";
          obj.contact.name = "";
          obj.contact.phone = "";
          obj.contact.mobile = "";
          obj.contact.email = "";
          obj.contact.bankAccount = new DkPlusApi.DkCloudDataModelMembersApplicationContactBankAccount();
          obj.contact.bankAccount.group = "";
          obj.contact.bankAccount.account = "";
          obj.contact.bankAccount.accountId = "";
          obj.contact.bankAccount.code = "";
          obj.contact.extraProperties = {key: ""};
          obj.fund = "";
          obj.grantDescription = "";
          obj.grant = "";
          obj.purpose = "";
          obj.description = "";
          obj._number = 0;
          obj.status = "InProgress";
          obj.managedBy = "Employee";
          obj._date = new Date();
          obj.dateOfMeeting = new Date();
          obj.denialCode = "";
          obj.denialCodeDescription = "";
          obj.group = "";
          obj.subGroup = "";
          obj.totalAmount = 0.0;
          obj.period = new DkPlusApi.DkCloudDataModelGeneralDateRange();
          obj.period.from = new Date();
          obj.period.to = new Date();
          obj.amount = 0.0;
          obj.posted = new Date();
          obj.comment = "";
          obj.text1 = "";
          obj.text2 = "";
          obj.membershipRulesOK = false;
          obj.grantRulesOK = false;
          obj.reference = "";
          obj.jobRatio = 0.0;
          obj.periodDesc = "";
          obj.communicationMemo = "";
          obj.grantCount = 0;
          obj.unitCount = 0;
          obj.location = "";
          obj.periodDescription = "";
          obj.organizer = "";
          obj.workPlace = "";
          obj.workPlaceNumber = "";
          obj.voucherTag = "";
          obj.details = [new DkPlusApi.DkCloudDataModelMembersApplicationDetail()];
          obj.details[0].typeOfPayment = "Normal";
          obj.details[0].actualPaymentDate = new Date();
          obj.details[0].paymentAmount = 0.0;
          obj.details[0].paymentPaid = false;
          obj.details[0].amountPaid = 0.0;
          obj.details[0].taxAmountPaid = 0.0;
          obj.details[0].extraProperties = {key: ""};
          obj.workPlaceHistory = [new DkPlusApi.DkCloudDataModelMembersWorkPlaceHistory()];
          obj.workPlaceHistory[0].workPlaceNumber = "";
          obj.workPlaceHistory[0].workPlaceName = "";
          obj.workPlaceHistory[0].dateFrom = new Date();
          obj.workPlaceHistory[0].dateTo = new Date();
          obj.workPlaceHistory[0].jobRatio = 0.0;
          obj.workPlaceHistory[0].extraProperties = {key: ""};
          obj.maternityLeaves = [new DkPlusApi.DkCloudDataModelMembersMaternityLeave()];
          obj.maternityLeaves[0].dateFrom = new Date();
          obj.maternityLeaves[0].dateTo = new Date();
          obj.maternityLeaves[0].jobRatio = 0.0;
          obj.maternityLeaves[0].extraProperties = {key: ""};
          obj.amountTraveled = 0.0;
          obj.travelCost = 0.0;
          obj.companyID = "";
          obj.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          obj.attachments[0].ID = 0;
          obj.attachments[0].name = "";
          obj.attachments[0].size = 0;
          obj.attachments[0].linked = new Date();
          obj.attachments[0].mD5Hash = "";
          obj.attachments[0].showOnWeb = false;
          obj.termsConsentGiven = false;
          obj.termId = 0;
          obj.extraProperties = {key: ""};

          instance.memberApplicationPostApplication(_number, obj, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsMemberMemberApplicationCreated);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            expect(data.taxAmount).to.be.a('number');
            expect(data.taxAmount).to.be(0.0);
            expect(data.taxPercent).to.be.a('number');
            expect(data.taxPercent).to.be(0.0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberApplicationUpdateApplicationStatus', function() {
        it('should call memberApplicationUpdateApplicationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for memberApplicationUpdateApplicationStatus call
          /*
          var _number = "_number_example";
          var id = 56;
          var status = "status_example";
          var fund = "fund_example";

          instance.memberApplicationUpdateApplicationStatus(_number, id, status, fund, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memberApplicationUploadFile', function() {
        it('should call memberApplicationUploadFile successfully', function(done) {
          // TODO: uncomment, update parameter values for memberApplicationUploadFile call and complete the assertions
          /*
          var _number = "_number_example";
          var id = 56;

          instance.memberApplicationUploadFile(_number, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
