/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.VendorInvoiceApi();
  });

  describe('(package)', function() {
    describe('VendorInvoiceApi', function() {
      describe('vendorInvoiceApprovalGetBooked', function() {
        it('should call vendorInvoiceApprovalGetBooked successfully', function(done) {
          // TODO: uncomment vendorInvoiceApprovalGetBooked call and complete the assertions
          /*

          instance.vendorInvoiceApprovalGetBooked(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.receivedDate).to.be.a(Date);
              expect(data.receivedDate).to.be(new Date());
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.invoiceType).to.be.a('number');
              expect(data.invoiceType).to.be(0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.hasAttachment).to.be.a('boolean');
              expect(data.hasAttachment).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.approvedBy1).to.be.a('string');
              expect(data.approvedBy1).to.be("");
              expect(data.fromApprovement1).to.be.a(Date);
              expect(data.fromApprovement1).to.be(new Date());
              expect(data.toApprovement1).to.be.a(Date);
              expect(data.toApprovement1).to.be(new Date());
              expect(data.approvedStatus1).to.be.a('number');
              expect(data.approvedStatus1).to.be(0);
              expect(data.approvedBy2).to.be.a('string');
              expect(data.approvedBy2).to.be("");
              expect(data.fromApprovement2).to.be.a(Date);
              expect(data.fromApprovement2).to.be(new Date());
              expect(data.toApprovement2).to.be.a(Date);
              expect(data.toApprovement2).to.be(new Date());
              expect(data.approvedStatus2).to.be.a('number');
              expect(data.approvedStatus2).to.be(0);
              expect(data.approvedBy3).to.be.a('string');
              expect(data.approvedBy3).to.be("");
              expect(data.fromApprovement3).to.be.a(Date);
              expect(data.fromApprovement3).to.be(new Date());
              expect(data.toApprovement3).to.be.a(Date);
              expect(data.toApprovement3).to.be(new Date());
              expect(data.approvedStatus3).to.be.a('number');
              expect(data.approvedStatus3).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.posted).to.be.a('boolean');
              expect(data.posted).to.be(false);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
                  expect(data.headID).to.be.a('number');
                  expect(data.headID).to.be(0);
                  expect(data.sequenceID).to.be.a('number');
                  expect(data.sequenceID).to.be(0);
                  expect(data.account).to.be.a('string');
                  expect(data.account).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.voucher).to.be.a('string');
                  expect(data.voucher).to.be("");
                  expect(data.taxPercent).to.be.a('number');
                  expect(data.taxPercent).to.be(0.0);
                  expect(data.lineType).to.be.a('number');
                  expect(data.lineType).to.be(0);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0.0);
                  expect(data.code).to.be.a('number');
                  expect(data.code).to.be(0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
  
                        }
              }
              expect(data.dueDateHours).to.be.a('number');
              expect(data.dueDateHours).to.be(0.0);
              expect(data.dueDateDays).to.be.a('number');
              expect(data.dueDateDays).to.be(0.0);
              expect(data.isApproved).to.be.a('boolean');
              expect(data.isApproved).to.be(false);
              expect(data.approvalStatus).to.be.a('number');
              expect(data.approvalStatus).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceApprovalGetMyUnApproved', function() {
        it('should call vendorInvoiceApprovalGetMyUnApproved successfully', function(done) {
          // TODO: uncomment vendorInvoiceApprovalGetMyUnApproved call and complete the assertions
          /*

          instance.vendorInvoiceApprovalGetMyUnApproved(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.receivedDate).to.be.a(Date);
              expect(data.receivedDate).to.be(new Date());
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.invoiceType).to.be.a('number');
              expect(data.invoiceType).to.be(0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.hasAttachment).to.be.a('boolean');
              expect(data.hasAttachment).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.approvedBy1).to.be.a('string');
              expect(data.approvedBy1).to.be("");
              expect(data.fromApprovement1).to.be.a(Date);
              expect(data.fromApprovement1).to.be(new Date());
              expect(data.toApprovement1).to.be.a(Date);
              expect(data.toApprovement1).to.be(new Date());
              expect(data.approvedStatus1).to.be.a('number');
              expect(data.approvedStatus1).to.be(0);
              expect(data.approvedBy2).to.be.a('string');
              expect(data.approvedBy2).to.be("");
              expect(data.fromApprovement2).to.be.a(Date);
              expect(data.fromApprovement2).to.be(new Date());
              expect(data.toApprovement2).to.be.a(Date);
              expect(data.toApprovement2).to.be(new Date());
              expect(data.approvedStatus2).to.be.a('number');
              expect(data.approvedStatus2).to.be(0);
              expect(data.approvedBy3).to.be.a('string');
              expect(data.approvedBy3).to.be("");
              expect(data.fromApprovement3).to.be.a(Date);
              expect(data.fromApprovement3).to.be(new Date());
              expect(data.toApprovement3).to.be.a(Date);
              expect(data.toApprovement3).to.be(new Date());
              expect(data.approvedStatus3).to.be.a('number');
              expect(data.approvedStatus3).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.posted).to.be.a('boolean');
              expect(data.posted).to.be(false);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
                  expect(data.headID).to.be.a('number');
                  expect(data.headID).to.be(0);
                  expect(data.sequenceID).to.be.a('number');
                  expect(data.sequenceID).to.be(0);
                  expect(data.account).to.be.a('string');
                  expect(data.account).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.voucher).to.be.a('string');
                  expect(data.voucher).to.be("");
                  expect(data.taxPercent).to.be.a('number');
                  expect(data.taxPercent).to.be(0.0);
                  expect(data.lineType).to.be.a('number');
                  expect(data.lineType).to.be(0);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0.0);
                  expect(data.code).to.be.a('number');
                  expect(data.code).to.be(0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
  
                        }
              }
              expect(data.dueDateHours).to.be.a('number');
              expect(data.dueDateHours).to.be(0.0);
              expect(data.dueDateDays).to.be.a('number');
              expect(data.dueDateDays).to.be(0.0);
              expect(data.isApproved).to.be.a('boolean');
              expect(data.isApproved).to.be(false);
              expect(data.approvalStatus).to.be.a('number');
              expect(data.approvalStatus).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceApprovalUpdateApproval', function() {
        it('should call vendorInvoiceApprovalUpdateApproval successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorInvoiceApprovalUpdateApproval call
          /*
          var id = 56;
          var value = new DkPlusApi.DkPlusAPIModelsVendorInvoiceApprovalRequestModel();
          value.approvalAction = 0;
          value.description = "";
          value.reference = "";
          value.dim1 = "";
          value.dim2 = "";
          value.dim3 = "";

          instance.vendorInvoiceApprovalUpdateApproval(id, value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceCreatedVendorInvoice', function() {
        it('should call vendorInvoiceCreatedVendorInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorInvoiceCreatedVendorInvoice call and complete the assertions
          /*
          var _number = "_number_example";
          var value = new DkPlusApi.DkPlusAPIModelsVendorInvoiceInvoice();
          value.vendor = "";
          value._number = "";
          value._date = new Date();
          value.dueDate = new Date();
          value.receivedDate = new Date();
          value.voucher = "";
          value.description = "";
          value.text = "";
          value.reference = "";
          value.amount = 0.0;
          value.currency = "";
          value.exchange = 0.0;
          value.dim1 = "";
          value.dim2 = "";
          value.dim3 = "";
          value.lines = [new DkPlusApi.DkPlusAPIModelsVendorInvoiceLine()];
          value.lines[0].account = "";
          value.lines[0].text = "";
          value.lines[0].reference = "";
          value.lines[0].voucher = "";
          value.lines[0].taxPercent = 0.0;
          value.lines[0].type = "Expenses";
          value.lines[0].amount = 0.0;
          value.lines[0].code = 0;
          value.lines[0].dim1 = "";
          value.lines[0].dim2 = "";
          value.lines[0].dim3 = "";
          value.approval1 = new DkPlusApi.DkPlusAPIModelsVendorInvoiceApproval();
          value.approval1.approver = "";
          value.approval2 = new DkPlusApi.DkPlusAPIModelsVendorInvoiceApproval();
          value.approval2.approver = "";
          value.approval3 = new DkPlusApi.DkPlusAPIModelsVendorInvoiceApproval();
          value.approval3.approver = "";
          value.files = [new DkPlusApi.DkPlusAPIModelsFile()];
          value.files[0].name = "";
          value.files[0].content = ""undefined;

          instance.vendorInvoiceCreatedVendorInvoice(_number, value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.vendor).to.be.a('string');
            expect(data.vendor).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.invoiceNumber).to.be.a('string');
            expect(data.invoiceNumber).to.be("");
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.invoiceDate).to.be.a(Date);
            expect(data.invoiceDate).to.be(new Date());
            expect(data.receivedDate).to.be.a(Date);
            expect(data.receivedDate).to.be(new Date());
            expect(data.voucher).to.be.a('string');
            expect(data.voucher).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.invoiceType).to.be.a('number');
            expect(data.invoiceType).to.be(0);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.hasAttachment).to.be.a('boolean');
            expect(data.hasAttachment).to.be(false);
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.approvedBy1).to.be.a('string');
            expect(data.approvedBy1).to.be("");
            expect(data.fromApprovement1).to.be.a(Date);
            expect(data.fromApprovement1).to.be(new Date());
            expect(data.toApprovement1).to.be.a(Date);
            expect(data.toApprovement1).to.be(new Date());
            expect(data.approvedStatus1).to.be.a('number');
            expect(data.approvedStatus1).to.be(0);
            expect(data.approvedBy2).to.be.a('string');
            expect(data.approvedBy2).to.be("");
            expect(data.fromApprovement2).to.be.a(Date);
            expect(data.fromApprovement2).to.be(new Date());
            expect(data.toApprovement2).to.be.a(Date);
            expect(data.toApprovement2).to.be(new Date());
            expect(data.approvedStatus2).to.be.a('number');
            expect(data.approvedStatus2).to.be(0);
            expect(data.approvedBy3).to.be.a('string');
            expect(data.approvedBy3).to.be("");
            expect(data.fromApprovement3).to.be.a(Date);
            expect(data.fromApprovement3).to.be(new Date());
            expect(data.toApprovement3).to.be.a(Date);
            expect(data.toApprovement3).to.be(new Date());
            expect(data.approvedStatus3).to.be.a('number');
            expect(data.approvedStatus3).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.posted).to.be.a('boolean');
            expect(data.posted).to.be(false);
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
                expect(data.headID).to.be.a('number');
                expect(data.headID).to.be(0);
                expect(data.sequenceID).to.be.a('number');
                expect(data.sequenceID).to.be(0);
                expect(data.account).to.be.a('string');
                expect(data.account).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.voucher).to.be.a('string');
                expect(data.voucher).to.be("");
                expect(data.taxPercent).to.be.a('number');
                expect(data.taxPercent).to.be(0.0);
                expect(data.lineType).to.be.a('number');
                expect(data.lineType).to.be(0);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);
                expect(data.code).to.be.a('number');
                expect(data.code).to.be(0);
                expect(data.dim1).to.be.a('string');
                expect(data.dim1).to.be("");
                expect(data.dim2).to.be.a('string');
                expect(data.dim2).to.be("");
                expect(data.dim3).to.be.a('string');
                expect(data.dim3).to.be("");

                      }
            }
            expect(data.dueDateHours).to.be.a('number');
            expect(data.dueDateHours).to.be(0.0);
            expect(data.dueDateDays).to.be.a('number');
            expect(data.dueDateDays).to.be(0.0);
            expect(data.isApproved).to.be.a('boolean');
            expect(data.isApproved).to.be(false);
            expect(data.approvalStatus).to.be.a('number');
            expect(data.approvalStatus).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceGetProcessedInvoices', function() {
        it('should call vendorInvoiceGetProcessedInvoices successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorInvoiceGetProcessedInvoices call and complete the assertions
          /*
          var page = 56;
          var count = 56;

          instance.vendorInvoiceGetProcessedInvoices(page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.receivedDate).to.be.a(Date);
              expect(data.receivedDate).to.be(new Date());
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.invoiceType).to.be.a('number');
              expect(data.invoiceType).to.be(0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.hasAttachment).to.be.a('boolean');
              expect(data.hasAttachment).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.approvedBy1).to.be.a('string');
              expect(data.approvedBy1).to.be("");
              expect(data.fromApprovement1).to.be.a(Date);
              expect(data.fromApprovement1).to.be(new Date());
              expect(data.toApprovement1).to.be.a(Date);
              expect(data.toApprovement1).to.be(new Date());
              expect(data.approvedStatus1).to.be.a('number');
              expect(data.approvedStatus1).to.be(0);
              expect(data.approvedBy2).to.be.a('string');
              expect(data.approvedBy2).to.be("");
              expect(data.fromApprovement2).to.be.a(Date);
              expect(data.fromApprovement2).to.be(new Date());
              expect(data.toApprovement2).to.be.a(Date);
              expect(data.toApprovement2).to.be(new Date());
              expect(data.approvedStatus2).to.be.a('number');
              expect(data.approvedStatus2).to.be(0);
              expect(data.approvedBy3).to.be.a('string');
              expect(data.approvedBy3).to.be("");
              expect(data.fromApprovement3).to.be.a(Date);
              expect(data.fromApprovement3).to.be(new Date());
              expect(data.toApprovement3).to.be.a(Date);
              expect(data.toApprovement3).to.be(new Date());
              expect(data.approvedStatus3).to.be.a('number');
              expect(data.approvedStatus3).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.posted).to.be.a('boolean');
              expect(data.posted).to.be(false);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
                  expect(data.headID).to.be.a('number');
                  expect(data.headID).to.be(0);
                  expect(data.sequenceID).to.be.a('number');
                  expect(data.sequenceID).to.be(0);
                  expect(data.account).to.be.a('string');
                  expect(data.account).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.voucher).to.be.a('string');
                  expect(data.voucher).to.be("");
                  expect(data.taxPercent).to.be.a('number');
                  expect(data.taxPercent).to.be(0.0);
                  expect(data.lineType).to.be.a('number');
                  expect(data.lineType).to.be(0);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0.0);
                  expect(data.code).to.be.a('number');
                  expect(data.code).to.be(0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
  
                        }
              }
              expect(data.dueDateHours).to.be.a('number');
              expect(data.dueDateHours).to.be(0.0);
              expect(data.dueDateDays).to.be.a('number');
              expect(data.dueDateDays).to.be(0.0);
              expect(data.isApproved).to.be.a('boolean');
              expect(data.isApproved).to.be(false);
              expect(data.approvalStatus).to.be.a('number');
              expect(data.approvalStatus).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceGetVendorInvoice', function() {
        it('should call vendorInvoiceGetVendorInvoice successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorInvoiceGetVendorInvoice call and complete the assertions
          /*
          var id = 56;

          instance.vendorInvoiceGetVendorInvoice(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.vendor).to.be.a('string');
            expect(data.vendor).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.invoiceNumber).to.be.a('string');
            expect(data.invoiceNumber).to.be("");
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.invoiceDate).to.be.a(Date);
            expect(data.invoiceDate).to.be(new Date());
            expect(data.receivedDate).to.be.a(Date);
            expect(data.receivedDate).to.be(new Date());
            expect(data.voucher).to.be.a('string');
            expect(data.voucher).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.invoiceType).to.be.a('number');
            expect(data.invoiceType).to.be(0);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.hasAttachment).to.be.a('boolean');
            expect(data.hasAttachment).to.be(false);
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.approvedBy1).to.be.a('string');
            expect(data.approvedBy1).to.be("");
            expect(data.fromApprovement1).to.be.a(Date);
            expect(data.fromApprovement1).to.be(new Date());
            expect(data.toApprovement1).to.be.a(Date);
            expect(data.toApprovement1).to.be(new Date());
            expect(data.approvedStatus1).to.be.a('number');
            expect(data.approvedStatus1).to.be(0);
            expect(data.approvedBy2).to.be.a('string');
            expect(data.approvedBy2).to.be("");
            expect(data.fromApprovement2).to.be.a(Date);
            expect(data.fromApprovement2).to.be(new Date());
            expect(data.toApprovement2).to.be.a(Date);
            expect(data.toApprovement2).to.be(new Date());
            expect(data.approvedStatus2).to.be.a('number');
            expect(data.approvedStatus2).to.be(0);
            expect(data.approvedBy3).to.be.a('string');
            expect(data.approvedBy3).to.be("");
            expect(data.fromApprovement3).to.be.a(Date);
            expect(data.fromApprovement3).to.be(new Date());
            expect(data.toApprovement3).to.be.a(Date);
            expect(data.toApprovement3).to.be(new Date());
            expect(data.approvedStatus3).to.be.a('number');
            expect(data.approvedStatus3).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.posted).to.be.a('boolean');
            expect(data.posted).to.be(false);
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
                expect(data.headID).to.be.a('number');
                expect(data.headID).to.be(0);
                expect(data.sequenceID).to.be.a('number');
                expect(data.sequenceID).to.be(0);
                expect(data.account).to.be.a('string');
                expect(data.account).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.voucher).to.be.a('string');
                expect(data.voucher).to.be("");
                expect(data.taxPercent).to.be.a('number');
                expect(data.taxPercent).to.be(0.0);
                expect(data.lineType).to.be.a('number');
                expect(data.lineType).to.be(0);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);
                expect(data.code).to.be.a('number');
                expect(data.code).to.be(0);
                expect(data.dim1).to.be.a('string');
                expect(data.dim1).to.be("");
                expect(data.dim2).to.be.a('string');
                expect(data.dim2).to.be("");
                expect(data.dim3).to.be.a('string');
                expect(data.dim3).to.be("");

                      }
            }
            expect(data.dueDateHours).to.be.a('number');
            expect(data.dueDateHours).to.be(0.0);
            expect(data.dueDateDays).to.be.a('number');
            expect(data.dueDateDays).to.be(0.0);
            expect(data.isApproved).to.be.a('boolean');
            expect(data.isApproved).to.be(false);
            expect(data.approvalStatus).to.be.a('number');
            expect(data.approvalStatus).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceGetVendorInvoiceAttachment', function() {
        it('should call vendorInvoiceGetVendorInvoiceAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorInvoiceGetVendorInvoiceAttachment call and complete the assertions
          /*
          var id = 56;

          instance.vendorInvoiceGetVendorInvoiceAttachment(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceUnProcessedGetAttachment', function() {
        it('should call vendorInvoiceUnProcessedGetAttachment successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorInvoiceUnProcessedGetAttachment call and complete the assertions
          /*
          var id = 56;

          instance.vendorInvoiceUnProcessedGetAttachment(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceUnProcessedGetUnProcessedInvoices', function() {
        it('should call vendorInvoiceUnProcessedGetUnProcessedInvoices successfully', function(done) {
          // TODO: uncomment vendorInvoiceUnProcessedGetUnProcessedInvoices call and complete the assertions
          /*

          instance.vendorInvoiceUnProcessedGetUnProcessedInvoices(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.vendor).to.be.a('string');
              expect(data.vendor).to.be("");
              expect(data.vendorName).to.be.a('string');
              expect(data.vendorName).to.be("");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.receivedDate).to.be.a(Date);
              expect(data.receivedDate).to.be(new Date());
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.invoiceType).to.be.a('number');
              expect(data.invoiceType).to.be(0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.currencyCode).to.be.a('string');
              expect(data.currencyCode).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.hasAttachment).to.be.a('boolean');
              expect(data.hasAttachment).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.approvedBy1).to.be.a('string');
              expect(data.approvedBy1).to.be("");
              expect(data.fromApprovement1).to.be.a(Date);
              expect(data.fromApprovement1).to.be(new Date());
              expect(data.toApprovement1).to.be.a(Date);
              expect(data.toApprovement1).to.be(new Date());
              expect(data.approvedStatus1).to.be.a('number');
              expect(data.approvedStatus1).to.be(0);
              expect(data.approvedBy2).to.be.a('string');
              expect(data.approvedBy2).to.be("");
              expect(data.fromApprovement2).to.be.a(Date);
              expect(data.fromApprovement2).to.be(new Date());
              expect(data.toApprovement2).to.be.a(Date);
              expect(data.toApprovement2).to.be(new Date());
              expect(data.approvedStatus2).to.be.a('number');
              expect(data.approvedStatus2).to.be(0);
              expect(data.approvedBy3).to.be.a('string');
              expect(data.approvedBy3).to.be("");
              expect(data.fromApprovement3).to.be.a(Date);
              expect(data.fromApprovement3).to.be(new Date());
              expect(data.toApprovement3).to.be.a(Date);
              expect(data.toApprovement3).to.be(new Date());
              expect(data.approvedStatus3).to.be.a('number');
              expect(data.approvedStatus3).to.be(0);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.posted).to.be.a('boolean');
              expect(data.posted).to.be(false);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
                  expect(data.headID).to.be.a('number');
                  expect(data.headID).to.be(0);
                  expect(data.sequenceID).to.be.a('number');
                  expect(data.sequenceID).to.be(0);
                  expect(data.account).to.be.a('string');
                  expect(data.account).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.reference).to.be.a('string');
                  expect(data.reference).to.be("");
                  expect(data.voucher).to.be.a('string');
                  expect(data.voucher).to.be("");
                  expect(data.taxPercent).to.be.a('number');
                  expect(data.taxPercent).to.be(0.0);
                  expect(data.lineType).to.be.a('number');
                  expect(data.lineType).to.be(0);
                  expect(data.amount).to.be.a('number');
                  expect(data.amount).to.be(0.0);
                  expect(data.code).to.be.a('number');
                  expect(data.code).to.be(0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  expect(data.dim2).to.be.a('string');
                  expect(data.dim2).to.be("");
                  expect(data.dim3).to.be.a('string');
                  expect(data.dim3).to.be("");
  
                        }
              }
              expect(data.dueDateHours).to.be.a('number');
              expect(data.dueDateHours).to.be(0.0);
              expect(data.dueDateDays).to.be.a('number');
              expect(data.dueDateDays).to.be(0.0);
              expect(data.isApproved).to.be.a('boolean');
              expect(data.isApproved).to.be(false);
              expect(data.approvalStatus).to.be.a('number');
              expect(data.approvalStatus).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('vendorInvoiceUnProcessedGetUnProcessedInvoicesById', function() {
        it('should call vendorInvoiceUnProcessedGetUnProcessedInvoicesById successfully', function(done) {
          // TODO: uncomment, update parameter values for vendorInvoiceUnProcessedGetUnProcessedInvoicesById call and complete the assertions
          /*
          var id = 56;

          instance.vendorInvoiceUnProcessedGetUnProcessedInvoicesById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
            expect(data.ID).to.be.a('number');
            expect(data.ID).to.be(0);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.vendor).to.be.a('string');
            expect(data.vendor).to.be("");
            expect(data.vendorName).to.be.a('string');
            expect(data.vendorName).to.be("");
            expect(data.invoiceNumber).to.be.a('string');
            expect(data.invoiceNumber).to.be("");
            expect(data.dueDate).to.be.a(Date);
            expect(data.dueDate).to.be(new Date());
            expect(data.invoiceDate).to.be.a(Date);
            expect(data.invoiceDate).to.be(new Date());
            expect(data.receivedDate).to.be.a(Date);
            expect(data.receivedDate).to.be(new Date());
            expect(data.voucher).to.be.a('string');
            expect(data.voucher).to.be("");
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.invoiceType).to.be.a('number');
            expect(data.invoiceType).to.be(0);
            expect(data.amount).to.be.a('number');
            expect(data.amount).to.be(0.0);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.hasAttachment).to.be.a('boolean');
            expect(data.hasAttachment).to.be(false);
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.approvedBy1).to.be.a('string');
            expect(data.approvedBy1).to.be("");
            expect(data.fromApprovement1).to.be.a(Date);
            expect(data.fromApprovement1).to.be(new Date());
            expect(data.toApprovement1).to.be.a(Date);
            expect(data.toApprovement1).to.be(new Date());
            expect(data.approvedStatus1).to.be.a('number');
            expect(data.approvedStatus1).to.be(0);
            expect(data.approvedBy2).to.be.a('string');
            expect(data.approvedBy2).to.be("");
            expect(data.fromApprovement2).to.be.a(Date);
            expect(data.fromApprovement2).to.be(new Date());
            expect(data.toApprovement2).to.be.a(Date);
            expect(data.toApprovement2).to.be(new Date());
            expect(data.approvedStatus2).to.be.a('number');
            expect(data.approvedStatus2).to.be(0);
            expect(data.approvedBy3).to.be.a('string');
            expect(data.approvedBy3).to.be("");
            expect(data.fromApprovement3).to.be.a(Date);
            expect(data.fromApprovement3).to.be(new Date());
            expect(data.toApprovement3).to.be.a(Date);
            expect(data.toApprovement3).to.be(new Date());
            expect(data.approvedStatus3).to.be.a('number');
            expect(data.approvedStatus3).to.be(0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.posted).to.be.a('boolean');
            expect(data.posted).to.be(false);
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
                expect(data.headID).to.be.a('number');
                expect(data.headID).to.be(0);
                expect(data.sequenceID).to.be.a('number');
                expect(data.sequenceID).to.be(0);
                expect(data.account).to.be.a('string');
                expect(data.account).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.voucher).to.be.a('string');
                expect(data.voucher).to.be("");
                expect(data.taxPercent).to.be.a('number');
                expect(data.taxPercent).to.be(0.0);
                expect(data.lineType).to.be.a('number');
                expect(data.lineType).to.be(0);
                expect(data.amount).to.be.a('number');
                expect(data.amount).to.be(0.0);
                expect(data.code).to.be.a('number');
                expect(data.code).to.be(0);
                expect(data.dim1).to.be.a('string');
                expect(data.dim1).to.be("");
                expect(data.dim2).to.be.a('string');
                expect(data.dim2).to.be("");
                expect(data.dim3).to.be.a('string');
                expect(data.dim3).to.be("");

                      }
            }
            expect(data.dueDateHours).to.be.a('number');
            expect(data.dueDateHours).to.be(0.0);
            expect(data.dueDateDays).to.be.a('number');
            expect(data.dueDateDays).to.be(0.0);
            expect(data.isApproved).to.be.a('boolean');
            expect(data.isApproved).to.be(false);
            expect(data.approvalStatus).to.be.a('number');
            expect(data.approvalStatus).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
