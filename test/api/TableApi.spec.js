/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.TableApi();
  });

  describe('(package)', function() {
    describe('TableApi', function() {
      describe('tableCreateRecord', function() {
        it('should call tableCreateRecord successfully', function(done) {
          // TODO: uncomment, update parameter values for tableCreateRecord call
          /*
          var name = "name_example";
          var values = null;

          instance.tableCreateRecord(name, values, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tableDeleteRecord', function() {
        it('should call tableDeleteRecord successfully', function(done) {
          // TODO: uncomment, update parameter values for tableDeleteRecord call and complete the assertions
          /*
          var name = "name_example";
          var value = "value_example";
          var opts = {};
          opts.key = "key_example";

          instance.tableDeleteRecord(name, value, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tableGetDeleted', function() {
        it('should call tableGetDeleted successfully', function(done) {
          // TODO: uncomment, update parameter values for tableGetDeleted call and complete the assertions
          /*
          var name = "name_example";
          var opts = {};
          opts.from = new Date("2013-10-20T19:20:30+01:00");
          opts.max = 56;

          instance.tableGetDeleted(name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsRecordDeletedInfo);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.uniqueId).to.be.a('number');
              expect(data.uniqueId).to.be(0);
              expect(data.sequenceId).to.be.a('number');
              expect(data.sequenceId).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tableGetRecordChangeCount', function() {
        it('should call tableGetRecordChangeCount successfully', function(done) {
          // TODO: uncomment, update parameter values for tableGetRecordChangeCount call and complete the assertions
          /*
          var name = "name_example";
          var opts = {};
          opts.modified = new Date("2013-10-20T19:20:30+01:00");

          instance.tableGetRecordChangeCount(name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkPlusAPIModelsTableChangeResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tableGetRecordsFromTable', function() {
        it('should call tableGetRecordsFromTable successfully', function(done) {
          // TODO: uncomment, update parameter values for tableGetRecordsFromTable call and complete the assertions
          /*
          var name = "name_example";
          var fields = "fields_example";
          var opts = {};
          opts.output = "output_example";
          opts.modified = new Date("2013-10-20T19:20:30+01:00");
          opts.count = 56;
          opts.key = "key_example";
          opts.value = "value_example";

          instance.tableGetRecordsFromTable(name, fields, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tableGetTableFields', function() {
        it('should call tableGetTableFields successfully', function(done) {
          // TODO: uncomment, update parameter values for tableGetTableFields call and complete the assertions
          /*
          var name = "name_example";

          instance.tableGetTableFields(name, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tableUpdateRecord', function() {
        it('should call tableUpdateRecord successfully', function(done) {
          // TODO: uncomment, update parameter values for tableUpdateRecord call
          /*
          var values = null;
          var name = "name_example";
          var key = "key_example";

          instance.tableUpdateRecord(values, name, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
