/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.QuoteApi();
  });

  describe('(package)', function() {
    describe('QuoteApi', function() {
      describe('quoteCreateSalesOrder', function() {
        it('should call quoteCreateSalesOrder successfully', function(done) {
          // TODO: uncomment, update parameter values for quoteCreateSalesOrder call and complete the assertions
          /*
          var value = new DkPlusApi.DkCloudDataModelSalesQuoteHead();
          value._number = "";
          value.customer = new DkPlusApi.DkCloudDataModelCustomersCustomerModel();
          value.customer.deleted = false;
          value.customer.contacts = [new DkPlusApi.DkCloudDataModelCustomersContactModel()];
          value.customer.contacts[0]._number = "";
          value.customer.contacts[0].name = "";
          value.customer.contacts[0].title = "";
          value.customer.contacts[0].address1 = "";
          value.customer.contacts[0].address2 = "";
          value.customer.contacts[0].address3 = "";
          value.customer.contacts[0].city = "";
          value.customer.contacts[0].zipCode = "";
          value.customer.contacts[0].countryCode = "";
          value.customer.contacts[0].department = "";
          value.customer.contacts[0].sSNumber = "";
          value.customer.contacts[0].phone = "";
          value.customer.contacts[0].phoneLocal = "";
          value.customer.contacts[0].phoneMobile = "";
          value.customer.contacts[0].fax = "";
          value.customer.contacts[0].telex = "";
          value.customer.contacts[0].email = "";
          value.customer.contacts[0].URL = "";
          value.customer.contacts[0].jobTitleCode = "";
          value.customer.contacts[0].modified = new Date();
          value.customer.recivers = [new DkPlusApi.DkCloudDataModelCustomersItemReciverModel()];
          value.customer.recivers[0]._number = "";
          value.customer.recivers[0].name = "";
          value.customer.recivers[0].address1 = "";
          value.customer.recivers[0].address2 = "";
          value.customer.recivers[0].address3 = "";
          value.customer.recivers[0].address4 = "";
          value.customer.recivers[0].city = "";
          value.customer.recivers[0].zipCode = "";
          value.customer.recivers[0].countryCode = "";
          value.customer.recivers[0].sSNumber = "";
          value.customer.recivers[0].phone = "";
          value.customer.recivers[0].phoneLocal = "";
          value.customer.recivers[0].phoneMobile = "";
          value.customer.recivers[0].fax = "";
          value.customer.recivers[0].telex = "";
          value.customer.recivers[0].email = "";
          value.customer.recivers[0].URL = "";
          value.customer.recivers[0].eANNumber = "";
          value.customer.recivers[0].vATNumber = "";
          value.customer.recivers[0].blocked = false;
          value.customer.recivers[0].modified = new Date();
          value.customer.memos = [new DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel()];
          value.customer.memos[0].pageName = "";
          value.customer.memos[0].plainText = "";
          value.customer.memos[0].modified = new Date();
          value.customer.memos[0].recordID = "0";
          value.customer.properties = [new DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel()];
          value.customer.properties[0].ID = "";
          value.customer.properties[0].attribute = "";
          value.customer.properties[0].option = "";
          value.customer.properties[0].comment = "";
          value.customer.properties[0].modified = new Date();
          value.customer.changes = [new DkPlusApi.DkCloudDataModelGeneralChangesModel()];
          value.customer.changes[0].modified = new Date();
          value.customer.changes[0].by = "";
          value.customer.changes[0].fields = [new DkPlusApi.DkCloudDataModelGeneralFieldChangeModel()];
          value.customer.changes[0].fields[0].name = "";
          value.customer.changes[0].fields[0].value = "";
          value.customer.attachments = [new DkPlusApi.DkCloudDataModelGeneralAttachmentModel()];
          value.customer.attachments[0].ID = 0;
          value.customer.attachments[0].name = "";
          value.customer.attachments[0].size = 0;
          value.customer.attachments[0].linked = new Date();
          value.customer.attachments[0].mD5Hash = "";
          value.customer.attachments[0].showOnWeb = false;
          value.customer.conditions = new DkPlusApi.DkCloudDataModelCustomersCustomerCondition();
          value.customer.conditions.creditLimit = 0.0;
          value.customer.conditions.creditMax = 0.0;
          value.customer.conditions.disableSale = false;
          value.customer.conditions.disableRetail = false;
          value.customer.sendTo = new DkPlusApi.DkCloudDataModelCustomersCustomerSendTo();
          value.customer.sendTo.printer = false;
          value.customer.sendTo.claimToPrinter = false;
          value.customer.sendTo.email = false;
          value.customer.sendTo.eDIInvoice = false;
          value.customer.sendTo.publishingSystem = false;
          value.customer.recordID = "0";
          value.customer._number = "";
          value.customer.name = "";
          value.customer.alias = "";
          value.customer.address1 = "";
          value.customer.address2 = "";
          value.customer.address3 = "";
          value.customer.zipCode = "";
          value.customer.balanceAmount = 0.0;
          value.customer.phone = "";
          value.customer.phoneLocal = "";
          value.customer.phoneMobile = "";
          value.customer.phoneFax = "";
          value.customer.countryCode = "";
          value.customer.originCountryCode = "";
          value.customer.email = "";
          value.customer.password = "";
          value.customer.group = "";
          value.customer.salesPerson = "";
          value.customer.discount = 0.0;
          value.customer.useItemRecivers = false;
          value.customer.paymentTerm = "";
          value.customer.paymentMode = "";
          value.customer.currencyCode = "";
          value.customer.noVat = false;
          value.customer.ledgerCode = "";
          value.customer.blocked = false;
          value.customer.gender = "Male";
          value.customer.priceGroup = 0;
          value.customer.billingFee = 0.0;
          value.customer.modified = new Date();
          value.contact = new DkPlusApi.DkCloudDataModelCustomersContactModel();
          value.contact._number = "";
          value.contact.name = "";
          value.contact.title = "";
          value.contact.address1 = "";
          value.contact.address2 = "";
          value.contact.address3 = "";
          value.contact.city = "";
          value.contact.zipCode = "";
          value.contact.countryCode = "";
          value.contact.department = "";
          value.contact.sSNumber = "";
          value.contact.phone = "";
          value.contact.phoneLocal = "";
          value.contact.phoneMobile = "";
          value.contact.fax = "";
          value.contact.telex = "";
          value.contact.email = "";
          value.contact.URL = "";
          value.contact.jobTitleCode = "";
          value.contact.modified = new Date();
          value._date = new Date();
          value.totalAmount = 0.0;
          value.currency = "";
          value.reference = "";
          value.salePerson = "";
          value.text1 = "";
          value.text2 = "";
          value.dim1 = "";
          value.origin = 0;
          value.paymentTerm = "";
          value.exchange = 0.0;
          value.deliverTo = new DkPlusApi.DkCloudDataModelCustomersItemReciverModel();
          value.deliverTo._number = "";
          value.deliverTo.name = "";
          value.deliverTo.address1 = "";
          value.deliverTo.address2 = "";
          value.deliverTo.address3 = "";
          value.deliverTo.address4 = "";
          value.deliverTo.city = "";
          value.deliverTo.zipCode = "";
          value.deliverTo.countryCode = "";
          value.deliverTo.sSNumber = "";
          value.deliverTo.phone = "";
          value.deliverTo.phoneLocal = "";
          value.deliverTo.phoneMobile = "";
          value.deliverTo.fax = "";
          value.deliverTo.telex = "";
          value.deliverTo.email = "";
          value.deliverTo.URL = "";
          value.deliverTo.eANNumber = "";
          value.deliverTo.vATNumber = "";
          value.deliverTo.blocked = false;
          value.deliverTo.modified = new Date();
          value.lines = [new DkPlusApi.DkCloudDataModelSalesQuoteLine()];
          value.lines[0].sequenceNumber = 0;
          value.lines[0].itemCode = "";
          value.lines[0].text = "";
          value.lines[0].text2 = "";
          value.lines[0].warehouse = "";
          value.lines[0].quantity = 0.0;
          value.lines[0].unitPrice = 0.0;
          value.lines[0].unitPriceWithTax = 0.0;
          value.lines[0].unitCode = "";
          value.lines[0].discount = 0.0;
          value.lines[0].discountPercent = 0.0;
          value.lines[0].totalAmount = 0.0;
          value.lines[0].totalAmountWithTax = 0.0;
          value.lines[0].reference = "";
          value.lines[0].memo = "";

          instance.quoteCreateSalesOrder(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesQuoteHead);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.customer).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
                  expect(data.customer.deleted).to.be.a('boolean');
              expect(data.customer.deleted).to.be(false);
              {
                let dataCtr = data.customer.contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.title).to.be.a('string');
                  expect(data.title).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.department).to.be.a('string');
                  expect(data.department).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.jobTitleCode).to.be.a('string');
                  expect(data.jobTitleCode).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.customer.recivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.address4).to.be.a('string');
                  expect(data.address4).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.eANNumber).to.be.a('string');
                  expect(data.eANNumber).to.be("");
                  expect(data.vATNumber).to.be.a('string');
                  expect(data.vATNumber).to.be("");
                  expect(data.blocked).to.be.a('boolean');
                  expect(data.blocked).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.customer.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.customer.properties;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  expect(data.attribute).to.be.a('string');
                  expect(data.attribute).to.be("");
                  expect(data.option).to.be.a('string');
                  expect(data.option).to.be("");
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.customer.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.customer.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              expect(data.customer.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                    expect(data.customer.conditions.creditLimit).to.be.a('number');
                expect(data.customer.conditions.creditLimit).to.be(0.0);
                expect(data.customer.conditions.creditMax).to.be.a('number');
                expect(data.customer.conditions.creditMax).to.be(0.0);
                expect(data.customer.conditions.disableSale).to.be.a('boolean');
                expect(data.customer.conditions.disableSale).to.be(false);
                expect(data.customer.conditions.disableRetail).to.be.a('boolean');
                expect(data.customer.conditions.disableRetail).to.be(false);
              expect(data.customer.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                    expect(data.customer.sendTo.printer).to.be.a('boolean');
                expect(data.customer.sendTo.printer).to.be(false);
                expect(data.customer.sendTo.claimToPrinter).to.be.a('boolean');
                expect(data.customer.sendTo.claimToPrinter).to.be(false);
                expect(data.customer.sendTo.email).to.be.a('boolean');
                expect(data.customer.sendTo.email).to.be(false);
                expect(data.customer.sendTo.eDIInvoice).to.be.a('boolean');
                expect(data.customer.sendTo.eDIInvoice).to.be(false);
                expect(data.customer.sendTo.publishingSystem).to.be.a('boolean');
                expect(data.customer.sendTo.publishingSystem).to.be(false);
              expect(data.customer.recordID).to.be.a('number');
              expect(data.customer.recordID).to.be("0");
              expect(data.customer._number).to.be.a('string');
              expect(data.customer._number).to.be("");
              expect(data.customer.name).to.be.a('string');
              expect(data.customer.name).to.be("");
              expect(data.customer.alias).to.be.a('string');
              expect(data.customer.alias).to.be("");
              expect(data.customer.address1).to.be.a('string');
              expect(data.customer.address1).to.be("");
              expect(data.customer.address2).to.be.a('string');
              expect(data.customer.address2).to.be("");
              expect(data.customer.address3).to.be.a('string');
              expect(data.customer.address3).to.be("");
              expect(data.customer.zipCode).to.be.a('string');
              expect(data.customer.zipCode).to.be("");
              expect(data.customer.balanceAmount).to.be.a('number');
              expect(data.customer.balanceAmount).to.be(0.0);
              expect(data.customer.phone).to.be.a('string');
              expect(data.customer.phone).to.be("");
              expect(data.customer.phoneLocal).to.be.a('string');
              expect(data.customer.phoneLocal).to.be("");
              expect(data.customer.phoneMobile).to.be.a('string');
              expect(data.customer.phoneMobile).to.be("");
              expect(data.customer.phoneFax).to.be.a('string');
              expect(data.customer.phoneFax).to.be("");
              expect(data.customer.countryCode).to.be.a('string');
              expect(data.customer.countryCode).to.be("");
              expect(data.customer.originCountryCode).to.be.a('string');
              expect(data.customer.originCountryCode).to.be("");
              expect(data.customer.email).to.be.a('string');
              expect(data.customer.email).to.be("");
              expect(data.customer.password).to.be.a('string');
              expect(data.customer.password).to.be("");
              expect(data.customer.group).to.be.a('string');
              expect(data.customer.group).to.be("");
              expect(data.customer.salesPerson).to.be.a('string');
              expect(data.customer.salesPerson).to.be("");
              expect(data.customer.discount).to.be.a('number');
              expect(data.customer.discount).to.be(0.0);
              expect(data.customer.useItemRecivers).to.be.a('boolean');
              expect(data.customer.useItemRecivers).to.be(false);
              expect(data.customer.paymentTerm).to.be.a('string');
              expect(data.customer.paymentTerm).to.be("");
              expect(data.customer.paymentMode).to.be.a('string');
              expect(data.customer.paymentMode).to.be("");
              expect(data.customer.currencyCode).to.be.a('string');
              expect(data.customer.currencyCode).to.be("");
              expect(data.customer.noVat).to.be.a('boolean');
              expect(data.customer.noVat).to.be(false);
              expect(data.customer.ledgerCode).to.be.a('string');
              expect(data.customer.ledgerCode).to.be("");
              expect(data.customer.blocked).to.be.a('boolean');
              expect(data.customer.blocked).to.be(false);
              expect(data.customer.gender).to.be.a('string');
              expect(data.customer.gender).to.be("Male");
              expect(data.customer.priceGroup).to.be.a('number');
              expect(data.customer.priceGroup).to.be(0);
              expect(data.customer.billingFee).to.be.a('number');
              expect(data.customer.billingFee).to.be(0.0);
              expect(data.customer.modified).to.be.a(Date);
              expect(data.customer.modified).to.be(new Date());
            expect(data.contact).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data.contact._number).to.be.a('string');
              expect(data.contact._number).to.be("");
              expect(data.contact.name).to.be.a('string');
              expect(data.contact.name).to.be("");
              expect(data.contact.title).to.be.a('string');
              expect(data.contact.title).to.be("");
              expect(data.contact.address1).to.be.a('string');
              expect(data.contact.address1).to.be("");
              expect(data.contact.address2).to.be.a('string');
              expect(data.contact.address2).to.be("");
              expect(data.contact.address3).to.be.a('string');
              expect(data.contact.address3).to.be("");
              expect(data.contact.city).to.be.a('string');
              expect(data.contact.city).to.be("");
              expect(data.contact.zipCode).to.be.a('string');
              expect(data.contact.zipCode).to.be("");
              expect(data.contact.countryCode).to.be.a('string');
              expect(data.contact.countryCode).to.be("");
              expect(data.contact.department).to.be.a('string');
              expect(data.contact.department).to.be("");
              expect(data.contact.sSNumber).to.be.a('string');
              expect(data.contact.sSNumber).to.be("");
              expect(data.contact.phone).to.be.a('string');
              expect(data.contact.phone).to.be("");
              expect(data.contact.phoneLocal).to.be.a('string');
              expect(data.contact.phoneLocal).to.be("");
              expect(data.contact.phoneMobile).to.be.a('string');
              expect(data.contact.phoneMobile).to.be("");
              expect(data.contact.fax).to.be.a('string');
              expect(data.contact.fax).to.be("");
              expect(data.contact.telex).to.be.a('string');
              expect(data.contact.telex).to.be("");
              expect(data.contact.email).to.be.a('string');
              expect(data.contact.email).to.be("");
              expect(data.contact.URL).to.be.a('string');
              expect(data.contact.URL).to.be("");
              expect(data.contact.jobTitleCode).to.be.a('string');
              expect(data.contact.jobTitleCode).to.be("");
              expect(data.contact.modified).to.be.a(Date);
              expect(data.contact.modified).to.be(new Date());
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(new Date());
            expect(data.totalAmount).to.be.a('number');
            expect(data.totalAmount).to.be(0.0);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.salePerson).to.be.a('string');
            expect(data.salePerson).to.be("");
            expect(data.text1).to.be.a('string');
            expect(data.text1).to.be("");
            expect(data.text2).to.be.a('string');
            expect(data.text2).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.deliverTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data.deliverTo._number).to.be.a('string');
              expect(data.deliverTo._number).to.be("");
              expect(data.deliverTo.name).to.be.a('string');
              expect(data.deliverTo.name).to.be("");
              expect(data.deliverTo.address1).to.be.a('string');
              expect(data.deliverTo.address1).to.be("");
              expect(data.deliverTo.address2).to.be.a('string');
              expect(data.deliverTo.address2).to.be("");
              expect(data.deliverTo.address3).to.be.a('string');
              expect(data.deliverTo.address3).to.be("");
              expect(data.deliverTo.address4).to.be.a('string');
              expect(data.deliverTo.address4).to.be("");
              expect(data.deliverTo.city).to.be.a('string');
              expect(data.deliverTo.city).to.be("");
              expect(data.deliverTo.zipCode).to.be.a('string');
              expect(data.deliverTo.zipCode).to.be("");
              expect(data.deliverTo.countryCode).to.be.a('string');
              expect(data.deliverTo.countryCode).to.be("");
              expect(data.deliverTo.sSNumber).to.be.a('string');
              expect(data.deliverTo.sSNumber).to.be("");
              expect(data.deliverTo.phone).to.be.a('string');
              expect(data.deliverTo.phone).to.be("");
              expect(data.deliverTo.phoneLocal).to.be.a('string');
              expect(data.deliverTo.phoneLocal).to.be("");
              expect(data.deliverTo.phoneMobile).to.be.a('string');
              expect(data.deliverTo.phoneMobile).to.be("");
              expect(data.deliverTo.fax).to.be.a('string');
              expect(data.deliverTo.fax).to.be("");
              expect(data.deliverTo.telex).to.be.a('string');
              expect(data.deliverTo.telex).to.be("");
              expect(data.deliverTo.email).to.be.a('string');
              expect(data.deliverTo.email).to.be("");
              expect(data.deliverTo.URL).to.be.a('string');
              expect(data.deliverTo.URL).to.be("");
              expect(data.deliverTo.eANNumber).to.be.a('string');
              expect(data.deliverTo.eANNumber).to.be("");
              expect(data.deliverTo.vATNumber).to.be.a('string');
              expect(data.deliverTo.vATNumber).to.be("");
              expect(data.deliverTo.blocked).to.be.a('boolean');
              expect(data.deliverTo.blocked).to.be(false);
              expect(data.deliverTo.modified).to.be.a(Date);
              expect(data.deliverTo.modified).to.be(new Date());
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesQuoteLine);
                expect(data.sequenceNumber).to.be.a('number');
                expect(data.sequenceNumber).to.be(0);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.text2).to.be.a('string');
                expect(data.text2).to.be("");
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.discount).to.be.a('number');
                expect(data.discount).to.be(0.0);
                expect(data.discountPercent).to.be.a('number');
                expect(data.discountPercent).to.be(0.0);
                expect(data.totalAmount).to.be.a('number');
                expect(data.totalAmount).to.be(0.0);
                expect(data.totalAmountWithTax).to.be.a('number');
                expect(data.totalAmountWithTax).to.be(0.0);
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.memo).to.be.a('string');
                expect(data.memo).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('quoteGetHtml', function() {
        it('should call quoteGetHtml successfully', function(done) {
          // TODO: uncomment, update parameter values for quoteGetHtml call and complete the assertions
          /*
          var _number = 56;

          instance.quoteGetHtml(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('quoteGetPDF', function() {
        it('should call quoteGetPDF successfully', function(done) {
          // TODO: uncomment, update parameter values for quoteGetPDF call and complete the assertions
          /*
          var _number = 56;

          instance.quoteGetPDF(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('quoteGetSalesQuote', function() {
        it('should call quoteGetSalesQuote successfully', function(done) {
          // TODO: uncomment, update parameter values for quoteGetSalesQuote call and complete the assertions
          /*
          var id = 56;

          instance.quoteGetSalesQuote(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesQuoteHead);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.customer).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerModel);
                  expect(data.customer.deleted).to.be.a('boolean');
              expect(data.customer.deleted).to.be(false);
              {
                let dataCtr = data.customer.contacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.title).to.be.a('string');
                  expect(data.title).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.department).to.be.a('string');
                  expect(data.department).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.jobTitleCode).to.be.a('string');
                  expect(data.jobTitleCode).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.customer.recivers;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data._number).to.be.a('string');
                  expect(data._number).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.address1).to.be.a('string');
                  expect(data.address1).to.be("");
                  expect(data.address2).to.be.a('string');
                  expect(data.address2).to.be("");
                  expect(data.address3).to.be.a('string');
                  expect(data.address3).to.be("");
                  expect(data.address4).to.be.a('string');
                  expect(data.address4).to.be("");
                  expect(data.city).to.be.a('string');
                  expect(data.city).to.be("");
                  expect(data.zipCode).to.be.a('string');
                  expect(data.zipCode).to.be("");
                  expect(data.countryCode).to.be.a('string');
                  expect(data.countryCode).to.be("");
                  expect(data.sSNumber).to.be.a('string');
                  expect(data.sSNumber).to.be("");
                  expect(data.phone).to.be.a('string');
                  expect(data.phone).to.be("");
                  expect(data.phoneLocal).to.be.a('string');
                  expect(data.phoneLocal).to.be("");
                  expect(data.phoneMobile).to.be.a('string');
                  expect(data.phoneMobile).to.be("");
                  expect(data.fax).to.be.a('string');
                  expect(data.fax).to.be("");
                  expect(data.telex).to.be.a('string');
                  expect(data.telex).to.be("");
                  expect(data.email).to.be.a('string');
                  expect(data.email).to.be("");
                  expect(data.URL).to.be.a('string');
                  expect(data.URL).to.be("");
                  expect(data.eANNumber).to.be.a('string');
                  expect(data.eANNumber).to.be("");
                  expect(data.vATNumber).to.be.a('string');
                  expect(data.vATNumber).to.be("");
                  expect(data.blocked).to.be.a('boolean');
                  expect(data.blocked).to.be(false);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.customer.memos;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerMemoModel);
                  expect(data.pageName).to.be.a('string');
                  expect(data.pageName).to.be("");
                  expect(data.plainText).to.be.a('string');
                  expect(data.plainText).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.recordID).to.be.a('number');
                  expect(data.recordID).to.be("0");
  
                        }
              }
              {
                let dataCtr = data.customer.properties;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerPropertyModel);
                  expect(data.ID).to.be.a('string');
                  expect(data.ID).to.be("");
                  expect(data.attribute).to.be.a('string');
                  expect(data.attribute).to.be("");
                  expect(data.option).to.be.a('string');
                  expect(data.option).to.be("");
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("");
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
  
                        }
              }
              {
                let dataCtr = data.customer.changes;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralChangesModel);
                  expect(data.modified).to.be.a(Date);
                  expect(data.modified).to.be(new Date());
                  expect(data.by).to.be.a('string');
                  expect(data.by).to.be("");
                  {
                    let dataCtr = data.fields;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralFieldChangeModel);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.customer.attachments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralAttachmentModel);
                  expect(data.ID).to.be.a('number');
                  expect(data.ID).to.be(0);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.size).to.be.a('number');
                  expect(data.size).to.be(0);
                  expect(data.linked).to.be.a(Date);
                  expect(data.linked).to.be(new Date());
                  expect(data.mD5Hash).to.be.a('string');
                  expect(data.mD5Hash).to.be("");
                  expect(data.showOnWeb).to.be.a('boolean');
                  expect(data.showOnWeb).to.be(false);
  
                        }
              }
              expect(data.customer.conditions).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerCondition);
                    expect(data.customer.conditions.creditLimit).to.be.a('number');
                expect(data.customer.conditions.creditLimit).to.be(0.0);
                expect(data.customer.conditions.creditMax).to.be.a('number');
                expect(data.customer.conditions.creditMax).to.be(0.0);
                expect(data.customer.conditions.disableSale).to.be.a('boolean');
                expect(data.customer.conditions.disableSale).to.be(false);
                expect(data.customer.conditions.disableRetail).to.be.a('boolean');
                expect(data.customer.conditions.disableRetail).to.be(false);
              expect(data.customer.sendTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersCustomerSendTo);
                    expect(data.customer.sendTo.printer).to.be.a('boolean');
                expect(data.customer.sendTo.printer).to.be(false);
                expect(data.customer.sendTo.claimToPrinter).to.be.a('boolean');
                expect(data.customer.sendTo.claimToPrinter).to.be(false);
                expect(data.customer.sendTo.email).to.be.a('boolean');
                expect(data.customer.sendTo.email).to.be(false);
                expect(data.customer.sendTo.eDIInvoice).to.be.a('boolean');
                expect(data.customer.sendTo.eDIInvoice).to.be(false);
                expect(data.customer.sendTo.publishingSystem).to.be.a('boolean');
                expect(data.customer.sendTo.publishingSystem).to.be(false);
              expect(data.customer.recordID).to.be.a('number');
              expect(data.customer.recordID).to.be("0");
              expect(data.customer._number).to.be.a('string');
              expect(data.customer._number).to.be("");
              expect(data.customer.name).to.be.a('string');
              expect(data.customer.name).to.be("");
              expect(data.customer.alias).to.be.a('string');
              expect(data.customer.alias).to.be("");
              expect(data.customer.address1).to.be.a('string');
              expect(data.customer.address1).to.be("");
              expect(data.customer.address2).to.be.a('string');
              expect(data.customer.address2).to.be("");
              expect(data.customer.address3).to.be.a('string');
              expect(data.customer.address3).to.be("");
              expect(data.customer.zipCode).to.be.a('string');
              expect(data.customer.zipCode).to.be("");
              expect(data.customer.balanceAmount).to.be.a('number');
              expect(data.customer.balanceAmount).to.be(0.0);
              expect(data.customer.phone).to.be.a('string');
              expect(data.customer.phone).to.be("");
              expect(data.customer.phoneLocal).to.be.a('string');
              expect(data.customer.phoneLocal).to.be("");
              expect(data.customer.phoneMobile).to.be.a('string');
              expect(data.customer.phoneMobile).to.be("");
              expect(data.customer.phoneFax).to.be.a('string');
              expect(data.customer.phoneFax).to.be("");
              expect(data.customer.countryCode).to.be.a('string');
              expect(data.customer.countryCode).to.be("");
              expect(data.customer.originCountryCode).to.be.a('string');
              expect(data.customer.originCountryCode).to.be("");
              expect(data.customer.email).to.be.a('string');
              expect(data.customer.email).to.be("");
              expect(data.customer.password).to.be.a('string');
              expect(data.customer.password).to.be("");
              expect(data.customer.group).to.be.a('string');
              expect(data.customer.group).to.be("");
              expect(data.customer.salesPerson).to.be.a('string');
              expect(data.customer.salesPerson).to.be("");
              expect(data.customer.discount).to.be.a('number');
              expect(data.customer.discount).to.be(0.0);
              expect(data.customer.useItemRecivers).to.be.a('boolean');
              expect(data.customer.useItemRecivers).to.be(false);
              expect(data.customer.paymentTerm).to.be.a('string');
              expect(data.customer.paymentTerm).to.be("");
              expect(data.customer.paymentMode).to.be.a('string');
              expect(data.customer.paymentMode).to.be("");
              expect(data.customer.currencyCode).to.be.a('string');
              expect(data.customer.currencyCode).to.be("");
              expect(data.customer.noVat).to.be.a('boolean');
              expect(data.customer.noVat).to.be(false);
              expect(data.customer.ledgerCode).to.be.a('string');
              expect(data.customer.ledgerCode).to.be("");
              expect(data.customer.blocked).to.be.a('boolean');
              expect(data.customer.blocked).to.be(false);
              expect(data.customer.gender).to.be.a('string');
              expect(data.customer.gender).to.be("Male");
              expect(data.customer.priceGroup).to.be.a('number');
              expect(data.customer.priceGroup).to.be(0);
              expect(data.customer.billingFee).to.be.a('number');
              expect(data.customer.billingFee).to.be(0.0);
              expect(data.customer.modified).to.be.a(Date);
              expect(data.customer.modified).to.be(new Date());
            expect(data.contact).to.be.a(DkPlusApi.DkCloudDataModelCustomersContactModel);
                  expect(data.contact._number).to.be.a('string');
              expect(data.contact._number).to.be("");
              expect(data.contact.name).to.be.a('string');
              expect(data.contact.name).to.be("");
              expect(data.contact.title).to.be.a('string');
              expect(data.contact.title).to.be("");
              expect(data.contact.address1).to.be.a('string');
              expect(data.contact.address1).to.be("");
              expect(data.contact.address2).to.be.a('string');
              expect(data.contact.address2).to.be("");
              expect(data.contact.address3).to.be.a('string');
              expect(data.contact.address3).to.be("");
              expect(data.contact.city).to.be.a('string');
              expect(data.contact.city).to.be("");
              expect(data.contact.zipCode).to.be.a('string');
              expect(data.contact.zipCode).to.be("");
              expect(data.contact.countryCode).to.be.a('string');
              expect(data.contact.countryCode).to.be("");
              expect(data.contact.department).to.be.a('string');
              expect(data.contact.department).to.be("");
              expect(data.contact.sSNumber).to.be.a('string');
              expect(data.contact.sSNumber).to.be("");
              expect(data.contact.phone).to.be.a('string');
              expect(data.contact.phone).to.be("");
              expect(data.contact.phoneLocal).to.be.a('string');
              expect(data.contact.phoneLocal).to.be("");
              expect(data.contact.phoneMobile).to.be.a('string');
              expect(data.contact.phoneMobile).to.be("");
              expect(data.contact.fax).to.be.a('string');
              expect(data.contact.fax).to.be("");
              expect(data.contact.telex).to.be.a('string');
              expect(data.contact.telex).to.be("");
              expect(data.contact.email).to.be.a('string');
              expect(data.contact.email).to.be("");
              expect(data.contact.URL).to.be.a('string');
              expect(data.contact.URL).to.be("");
              expect(data.contact.jobTitleCode).to.be.a('string');
              expect(data.contact.jobTitleCode).to.be("");
              expect(data.contact.modified).to.be.a(Date);
              expect(data.contact.modified).to.be(new Date());
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(new Date());
            expect(data.totalAmount).to.be.a('number');
            expect(data.totalAmount).to.be(0.0);
            expect(data.currency).to.be.a('string');
            expect(data.currency).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.salePerson).to.be.a('string');
            expect(data.salePerson).to.be("");
            expect(data.text1).to.be.a('string');
            expect(data.text1).to.be("");
            expect(data.text2).to.be.a('string');
            expect(data.text2).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.origin).to.be.a('number');
            expect(data.origin).to.be(0);
            expect(data.paymentTerm).to.be.a('string');
            expect(data.paymentTerm).to.be("");
            expect(data.exchange).to.be.a('number');
            expect(data.exchange).to.be(0.0);
            expect(data.deliverTo).to.be.a(DkPlusApi.DkCloudDataModelCustomersItemReciverModel);
                  expect(data.deliverTo._number).to.be.a('string');
              expect(data.deliverTo._number).to.be("");
              expect(data.deliverTo.name).to.be.a('string');
              expect(data.deliverTo.name).to.be("");
              expect(data.deliverTo.address1).to.be.a('string');
              expect(data.deliverTo.address1).to.be("");
              expect(data.deliverTo.address2).to.be.a('string');
              expect(data.deliverTo.address2).to.be("");
              expect(data.deliverTo.address3).to.be.a('string');
              expect(data.deliverTo.address3).to.be("");
              expect(data.deliverTo.address4).to.be.a('string');
              expect(data.deliverTo.address4).to.be("");
              expect(data.deliverTo.city).to.be.a('string');
              expect(data.deliverTo.city).to.be("");
              expect(data.deliverTo.zipCode).to.be.a('string');
              expect(data.deliverTo.zipCode).to.be("");
              expect(data.deliverTo.countryCode).to.be.a('string');
              expect(data.deliverTo.countryCode).to.be("");
              expect(data.deliverTo.sSNumber).to.be.a('string');
              expect(data.deliverTo.sSNumber).to.be("");
              expect(data.deliverTo.phone).to.be.a('string');
              expect(data.deliverTo.phone).to.be("");
              expect(data.deliverTo.phoneLocal).to.be.a('string');
              expect(data.deliverTo.phoneLocal).to.be("");
              expect(data.deliverTo.phoneMobile).to.be.a('string');
              expect(data.deliverTo.phoneMobile).to.be("");
              expect(data.deliverTo.fax).to.be.a('string');
              expect(data.deliverTo.fax).to.be("");
              expect(data.deliverTo.telex).to.be.a('string');
              expect(data.deliverTo.telex).to.be("");
              expect(data.deliverTo.email).to.be.a('string');
              expect(data.deliverTo.email).to.be("");
              expect(data.deliverTo.URL).to.be.a('string');
              expect(data.deliverTo.URL).to.be("");
              expect(data.deliverTo.eANNumber).to.be.a('string');
              expect(data.deliverTo.eANNumber).to.be("");
              expect(data.deliverTo.vATNumber).to.be.a('string');
              expect(data.deliverTo.vATNumber).to.be("");
              expect(data.deliverTo.blocked).to.be.a('boolean');
              expect(data.deliverTo.blocked).to.be(false);
              expect(data.deliverTo.modified).to.be.a(Date);
              expect(data.deliverTo.modified).to.be(new Date());
            {
              let dataCtr = data.lines;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesQuoteLine);
                expect(data.sequenceNumber).to.be.a('number');
                expect(data.sequenceNumber).to.be(0);
                expect(data.itemCode).to.be.a('string');
                expect(data.itemCode).to.be("");
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.text2).to.be.a('string');
                expect(data.text2).to.be("");
                expect(data.warehouse).to.be.a('string');
                expect(data.warehouse).to.be("");
                expect(data.quantity).to.be.a('number');
                expect(data.quantity).to.be(0.0);
                expect(data.unitPrice).to.be.a('number');
                expect(data.unitPrice).to.be(0.0);
                expect(data.unitPriceWithTax).to.be.a('number');
                expect(data.unitPriceWithTax).to.be(0.0);
                expect(data.unitCode).to.be.a('string');
                expect(data.unitCode).to.be("");
                expect(data.discount).to.be.a('number');
                expect(data.discount).to.be(0.0);
                expect(data.discountPercent).to.be.a('number');
                expect(data.discountPercent).to.be(0.0);
                expect(data.totalAmount).to.be.a('number');
                expect(data.totalAmount).to.be(0.0);
                expect(data.totalAmountWithTax).to.be.a('number');
                expect(data.totalAmountWithTax).to.be(0.0);
                expect(data.reference).to.be.a('string');
                expect(data.reference).to.be("");
                expect(data.memo).to.be.a('string');
                expect(data.memo).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('quoteSendEmail', function() {
        it('should call quoteSendEmail successfully', function(done) {
          // TODO: uncomment, update parameter values for quoteSendEmail call
          /*
          var _number = 56;
          var message = new DkPlusApi.DkPlusMailModelMailInfo();
          message.displayName = "";
          message.to = "";
          message.CC = "";
          message.BCC = "";
          message.subject = "";
          message.body = "";
          message.priority = "None";
          message.attachments = [""];

          instance.quoteSendEmail(_number, message, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
