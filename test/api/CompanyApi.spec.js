/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.CompanyApi();
  });

  describe('(package)', function() {
    describe('CompanyApi', function() {
      describe('companyGet', function() {
        it('should call companyGet successfully', function(done) {
          // TODO: uncomment companyGet call and complete the assertions
          /*

          instance.companyGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSettingsSettingsModel);
            expect(data.information).to.be.a(DkPlusApi.DkCloudDataModelSettingsInformationModel);
                  expect(data.information.owner).to.be.a('string');
              expect(data.information.owner).to.be("");
              expect(data.information.ownerName).to.be.a('string');
              expect(data.information.ownerName).to.be("");
              expect(data.information.license).to.be.a('string');
              expect(data.information.license).to.be("");
              expect(data.information.company).to.be.a(DkPlusApi.DkCloudDataModelSettingsCompanyModel);
                    expect(data.information.company._number).to.be.a('string');
                expect(data.information.company._number).to.be("");
                expect(data.information.company.name).to.be.a('string');
                expect(data.information.company.name).to.be("");
                expect(data.information.company.sSNumber).to.be.a('string');
                expect(data.information.company.sSNumber).to.be("");
                expect(data.information.company.address1).to.be.a('string');
                expect(data.information.company.address1).to.be("");
                expect(data.information.company.address2).to.be.a('string');
                expect(data.information.company.address2).to.be("");
                expect(data.information.company.address3).to.be.a('string');
                expect(data.information.company.address3).to.be("");
                expect(data.information.company.zipCode).to.be.a('string');
                expect(data.information.company.zipCode).to.be("");
                expect(data.information.company.country).to.be.a('string');
                expect(data.information.company.country).to.be("");
                expect(data.information.company.bankCode).to.be.a('string');
                expect(data.information.company.bankCode).to.be("");
                expect(data.information.company.bankAccGroup).to.be.a('string');
                expect(data.information.company.bankAccGroup).to.be("");
                expect(data.information.company.bankAccount).to.be.a('string');
                expect(data.information.company.bankAccount).to.be("");
                expect(data.information.company.vATNumber).to.be.a('string');
                expect(data.information.company.vATNumber).to.be("");
                expect(data.information.company.phone).to.be.a('string');
                expect(data.information.company.phone).to.be("");
                expect(data.information.company.mobile).to.be.a('string');
                expect(data.information.company.mobile).to.be("");
                expect(data.information.company.fax).to.be.a('string');
                expect(data.information.company.fax).to.be("");
                expect(data.information.company.email).to.be.a('string');
                expect(data.information.company.email).to.be("");
                expect(data.information.company.url).to.be.a('string');
                expect(data.information.company.url).to.be("");
                expect(data.information.company.swift).to.be.a('string');
                expect(data.information.company.swift).to.be("");
                expect(data.information.company.IBAN).to.be.a('string');
                expect(data.information.company.IBAN).to.be("");
                expect(data.information.company.city).to.be.a('string');
                expect(data.information.company.city).to.be("");
            expect(data.customer).to.be.a(DkPlusApi.DkCloudDataModelSettingsCustomerSettings);
                  expect(data.customer.enabled).to.be.a('boolean');
              expect(data.customer.enabled).to.be(false);
            expect(data.product).to.be.a(DkPlusApi.DkCloudDataModelSettingsProductSetting);
                  expect(data.product.enabled).to.be.a('boolean');
              expect(data.product.enabled).to.be(false);
              expect(data.product.warehouse).to.be.a(DkPlusApi.DkCloudDataModelSettingsWarehouseModel);
                    expect(data.product.warehouse.enabled).to.be.a('boolean');
                expect(data.product.warehouse.enabled).to.be(false);
                expect(data.product.warehouse._default).to.be.a('string');
                expect(data.product.warehouse._default).to.be("");
              expect(data.product.categories).to.be.a('boolean');
              expect(data.product.categories).to.be(false);
            expect(data.vendor).to.be.a(DkPlusApi.DkCloudDataModelSettingsVendorSetting);
                  expect(data.vendor.enabled).to.be.a('boolean');
              expect(data.vendor.enabled).to.be(false);
              expect(data.vendor.confirmation).to.be.a('boolean');
              expect(data.vendor.confirmation).to.be(false);
            expect(data.sale).to.be.a(DkPlusApi.DkCloudDataModelSettingsSaleSetting);
                  expect(data.sale.enabled).to.be.a('boolean');
              expect(data.sale.enabled).to.be(false);
            expect(data.project).to.be.a(DkPlusApi.DkCloudDataModelSettingsProjectSetting);
                  expect(data.project.enabled).to.be.a('boolean');
              expect(data.project.enabled).to.be(false);
              expect(data.project.phaseEnabled).to.be.a('boolean');
              expect(data.project.phaseEnabled).to.be(false);
              expect(data.project.taskEnabled).to.be.a('boolean');
              expect(data.project.taskEnabled).to.be(false);
              expect(data.project.enterDriveInJournal).to.be.a('boolean');
              expect(data.project.enterDriveInJournal).to.be(false);
              expect(data.project.defaultDriveUnit).to.be.a('number');
              expect(data.project.defaultDriveUnit).to.be(0);
            expect(data.dimmension).to.be.a(DkPlusApi.DkCloudDataModelSettingsDimmensionSetting);
                  expect(data.dimmension.dim1Enabled).to.be.a('boolean');
              expect(data.dimmension.dim1Enabled).to.be(false);
              expect(data.dimmension.dim2Enabled).to.be.a('boolean');
              expect(data.dimmension.dim2Enabled).to.be(false);
              expect(data.dimmension.dim3Enabled).to.be.a('boolean');
              expect(data.dimmension.dim3Enabled).to.be(false);
            expect(data.general).to.be.a(DkPlusApi.DkCloudDataModelSettingsGeneralSetting);
                  expect(data.general.currencyEnabled).to.be.a('boolean');
              expect(data.general.currencyEnabled).to.be(false);
              expect(data.general.defaultCurrency).to.be.a('string');
              expect(data.general.defaultCurrency).to.be("");
              expect(data.general.attachments).to.be.a('boolean');
              expect(data.general.attachments).to.be(false);
            expect(data.member).to.be.a(DkPlusApi.DkCloudDataModelSettingsMemberSetting);
                  expect(data.member.enabled).to.be.a('boolean');
              expect(data.member.enabled).to.be(false);
            expect(data.webServiceVersion).to.be.a('string');
            expect(data.webServiceVersion).to.be("");
            expect(data.dkVersion).to.be.a('string');
            expect(data.dkVersion).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('companyGetTestConnection', function() {
        it('should call companyGetTestConnection successfully', function(done) {
          // TODO: uncomment companyGetTestConnection call and complete the assertions
          /*

          instance.companyGetTestConnection(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('boolean');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
