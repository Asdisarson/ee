/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.ProjectApi();
  });

  describe('(package)', function() {
    describe('ProjectApi', function() {
      describe('employeeWorkCreateEmployeeWork', function() {
        it('should call employeeWorkCreateEmployeeWork successfully', function(done) {
          // TODO: uncomment, update parameter values for employeeWorkCreateEmployeeWork call
          /*
          var employee = "employee_example";
          var lines = [new DkPlusApi.DkPlusAPIModelsEmployeeEmployeeWork()];
          lines[0]._date = new Date();
          lines[0].text = "";
          lines[0].project = "";
          lines[0].phase = "";
          lines[0].task = "";
          lines[0].dayTime = 0.0;
          lines[0].driveTime = 0.0;
          lines[0].overTime = 0.0;
          lines[0].billable = false;
          var opts = {};
          opts.post = true;

          instance.employeeWorkCreateEmployeeWork(employee, lines, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('phasesCreatePhase', function() {
        it('should call phasesCreatePhase successfully', function(done) {
          // TODO: uncomment, update parameter values for phasesCreatePhase call
          /*
          var model = new DkPlusApi.DkCloudDataModelProjectPhaseModel();
          model._number = "";
          model.name = "";
          model.modified = new Date();
          model.type = "Work";
          model.enabled = false;
          model.dim1Required = false;
          model.dim2Required = false;
          model.dim3Required = false;
          model.extraProperties = {key: ""};

          instance.phasesCreatePhase(model, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('phasesGetPhase', function() {
        it('should call phasesGetPhase successfully', function(done) {
          // TODO: uncomment, update parameter values for phasesGetPhase call and complete the assertions
          /*
          var _number = "_number_example";
          var opts = {};
          opts.include = "include_example";

          instance.phasesGetPhase(_number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectPhaseModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("Work");
              expect(data.enabled).to.be.a('boolean');
              expect(data.enabled).to.be(false);
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('phasesGetPhases', function() {
        it('should call phasesGetPhases successfully', function(done) {
          // TODO: uncomment, update parameter values for phasesGetPhases call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.include = "include_example";

          instance.phasesGetPhases(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectPhaseModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("Work");
              expect(data.enabled).to.be.a('boolean');
              expect(data.enabled).to.be(false);
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('phasesUpdatePhase', function() {
        it('should call phasesUpdatePhase successfully', function(done) {
          // TODO: uncomment, update parameter values for phasesUpdatePhase call
          /*
          var _number = "_number_example";
          var model = new DkPlusApi.DkCloudDataModelProjectPhaseModel();
          model._number = "";
          model.name = "";
          model.modified = new Date();
          model.type = "Work";
          model.enabled = false;
          model.dim1Required = false;
          model.dim2Required = false;
          model.dim3Required = false;
          model.extraProperties = {key: ""};

          instance.phasesUpdatePhase(_number, model, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectCreateProject', function() {
        it('should call projectCreateProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectCreateProject call and complete the assertions
          /*
          var model = new DkPlusApi.DkCloudDataModelProjectProjectModel();
          model.modified = new Date();
          model._number = "";
          model.name = "";
          model.group = "";
          model.masterJobNumber = "";
          model.quotationNumber = 0;
          model.customerToBill = "";
          model.customerNameToBill = "";
          model.customerToRecieve = "";
          model.founder = "";
          model.owner = "";
          model.supervisor = "";
          model.worker = "";
          model.dim1 = "";
          model.dim2 = "";
          model.dim3 = "";
          model.dim1Required = false;
          model.dim2Required = false;
          model.dim3Required = false;
          model.foundingDate = new Date();
          model.estimatedBeginingDate = new Date();
          model.estimatedFinishDate = new Date();
          model.actualBeginingDate = new Date();
          model.actualFinishDate = new Date();
          model.optimistDate = new Date();
          model.pessimistDate = new Date();
          model.jobType = "_cbTimeJob";
          model.jobStatus = "NotStarted";
          model.jobBillingMode = "Monthly";
          model.phaseId = "";
          model.phaseRequired = false;
          model.taskId = "";
          model.taskRequired = false;
          model.foreignName = "";
          model.jobContactName = "";
          model.quotationAmount = 0.0;
          model.serialnumber = "";
          model.quotationAmountWithVAT = false;
          model.ledgerCode = "";
          model.discountType = "CustomerDiscount";
          model.jobDiscountPercent = 0.0;
          model.discountOfTime = false;
          model.discountOfDriveTime = false;
          model.discountOfCost = false;
          model.foreignPriceForWork = 0.0;
          model.skipTaxOnInvoice = false;
          model.quotationCurrencyCode = "";
          model.quotationWorkingHours = 0.0;
          model.quotationWorkingAmount = 0.0;
          model.quotationCostAmount = 0.0;
          model.quotationLicenceAmount = 0.0;
          model.linkedPhases = [new DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel()];
          model.linkedPhases[0].phaseID = "";
          model.linkedPhases[0].description = "";
          model.linkedTasks = [new DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel()];
          model.linkedTasks[0].taskID = "";
          model.linkedTasks[0].description = "";

          instance.projectCreateProject(model, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.masterJobNumber).to.be.a('string');
            expect(data.masterJobNumber).to.be("");
            expect(data.quotationNumber).to.be.a('number');
            expect(data.quotationNumber).to.be(0);
            expect(data.customerToBill).to.be.a('string');
            expect(data.customerToBill).to.be("");
            expect(data.customerNameToBill).to.be.a('string');
            expect(data.customerNameToBill).to.be("");
            expect(data.customerToRecieve).to.be.a('string');
            expect(data.customerToRecieve).to.be("");
            expect(data.founder).to.be.a('string');
            expect(data.founder).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.supervisor).to.be.a('string');
            expect(data.supervisor).to.be("");
            expect(data.worker).to.be.a('string');
            expect(data.worker).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.dim1Required).to.be.a('boolean');
            expect(data.dim1Required).to.be(false);
            expect(data.dim2Required).to.be.a('boolean');
            expect(data.dim2Required).to.be(false);
            expect(data.dim3Required).to.be.a('boolean');
            expect(data.dim3Required).to.be(false);
            expect(data.foundingDate).to.be.a(Date);
            expect(data.foundingDate).to.be(new Date());
            expect(data.estimatedBeginingDate).to.be.a(Date);
            expect(data.estimatedBeginingDate).to.be(new Date());
            expect(data.estimatedFinishDate).to.be.a(Date);
            expect(data.estimatedFinishDate).to.be(new Date());
            expect(data.actualBeginingDate).to.be.a(Date);
            expect(data.actualBeginingDate).to.be(new Date());
            expect(data.actualFinishDate).to.be.a(Date);
            expect(data.actualFinishDate).to.be(new Date());
            expect(data.optimistDate).to.be.a(Date);
            expect(data.optimistDate).to.be(new Date());
            expect(data.pessimistDate).to.be.a(Date);
            expect(data.pessimistDate).to.be(new Date());
            expect(data.jobType).to.be.a('string');
            expect(data.jobType).to.be("_cbTimeJob");
            expect(data.jobStatus).to.be.a('string');
            expect(data.jobStatus).to.be("NotStarted");
            expect(data.jobBillingMode).to.be.a('string');
            expect(data.jobBillingMode).to.be("Monthly");
            expect(data.phaseId).to.be.a('string');
            expect(data.phaseId).to.be("");
            expect(data.phaseRequired).to.be.a('boolean');
            expect(data.phaseRequired).to.be(false);
            expect(data.taskId).to.be.a('string');
            expect(data.taskId).to.be("");
            expect(data.taskRequired).to.be.a('boolean');
            expect(data.taskRequired).to.be(false);
            expect(data.foreignName).to.be.a('string');
            expect(data.foreignName).to.be("");
            expect(data.jobContactName).to.be.a('string');
            expect(data.jobContactName).to.be("");
            expect(data.quotationAmount).to.be.a('number');
            expect(data.quotationAmount).to.be(0.0);
            expect(data.serialnumber).to.be.a('string');
            expect(data.serialnumber).to.be("");
            expect(data.quotationAmountWithVAT).to.be.a('boolean');
            expect(data.quotationAmountWithVAT).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.discountType).to.be.a('string');
            expect(data.discountType).to.be("CustomerDiscount");
            expect(data.jobDiscountPercent).to.be.a('number');
            expect(data.jobDiscountPercent).to.be(0.0);
            expect(data.discountOfTime).to.be.a('boolean');
            expect(data.discountOfTime).to.be(false);
            expect(data.discountOfDriveTime).to.be.a('boolean');
            expect(data.discountOfDriveTime).to.be(false);
            expect(data.discountOfCost).to.be.a('boolean');
            expect(data.discountOfCost).to.be(false);
            expect(data.foreignPriceForWork).to.be.a('number');
            expect(data.foreignPriceForWork).to.be(0.0);
            expect(data.skipTaxOnInvoice).to.be.a('boolean');
            expect(data.skipTaxOnInvoice).to.be(false);
            expect(data.quotationCurrencyCode).to.be.a('string');
            expect(data.quotationCurrencyCode).to.be("");
            expect(data.quotationWorkingHours).to.be.a('number');
            expect(data.quotationWorkingHours).to.be(0.0);
            expect(data.quotationWorkingAmount).to.be.a('number');
            expect(data.quotationWorkingAmount).to.be(0.0);
            expect(data.quotationCostAmount).to.be.a('number');
            expect(data.quotationCostAmount).to.be(0.0);
            expect(data.quotationLicenceAmount).to.be.a('number');
            expect(data.quotationLicenceAmount).to.be(0.0);
            {
              let dataCtr = data.linkedPhases;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                expect(data.phaseID).to.be.a('string');
                expect(data.phaseID).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }
            {
              let dataCtr = data.linkedTasks;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                expect(data.taskID).to.be.a('string');
                expect(data.taskID).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectGetModified', function() {
        it('should call projectGetModified successfully', function(done) {
          // TODO: uncomment, update parameter values for projectGetModified call and complete the assertions
          /*
          var modified = new Date("2013-10-20T19:20:30+01:00");
          var page = 56;
          var count = 56;

          instance.projectGetModified(modified, page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.masterJobNumber).to.be.a('string');
              expect(data.masterJobNumber).to.be("");
              expect(data.quotationNumber).to.be.a('number');
              expect(data.quotationNumber).to.be(0);
              expect(data.customerToBill).to.be.a('string');
              expect(data.customerToBill).to.be("");
              expect(data.customerNameToBill).to.be.a('string');
              expect(data.customerNameToBill).to.be("");
              expect(data.customerToRecieve).to.be.a('string');
              expect(data.customerToRecieve).to.be("");
              expect(data.founder).to.be.a('string');
              expect(data.founder).to.be("");
              expect(data.owner).to.be.a('string');
              expect(data.owner).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              expect(data.foundingDate).to.be.a(Date);
              expect(data.foundingDate).to.be(new Date());
              expect(data.estimatedBeginingDate).to.be.a(Date);
              expect(data.estimatedBeginingDate).to.be(new Date());
              expect(data.estimatedFinishDate).to.be.a(Date);
              expect(data.estimatedFinishDate).to.be(new Date());
              expect(data.actualBeginingDate).to.be.a(Date);
              expect(data.actualBeginingDate).to.be(new Date());
              expect(data.actualFinishDate).to.be.a(Date);
              expect(data.actualFinishDate).to.be(new Date());
              expect(data.optimistDate).to.be.a(Date);
              expect(data.optimistDate).to.be(new Date());
              expect(data.pessimistDate).to.be.a(Date);
              expect(data.pessimistDate).to.be(new Date());
              expect(data.jobType).to.be.a('string');
              expect(data.jobType).to.be("_cbTimeJob");
              expect(data.jobStatus).to.be.a('string');
              expect(data.jobStatus).to.be("NotStarted");
              expect(data.jobBillingMode).to.be.a('string');
              expect(data.jobBillingMode).to.be("Monthly");
              expect(data.phaseId).to.be.a('string');
              expect(data.phaseId).to.be("");
              expect(data.phaseRequired).to.be.a('boolean');
              expect(data.phaseRequired).to.be(false);
              expect(data.taskId).to.be.a('string');
              expect(data.taskId).to.be("");
              expect(data.taskRequired).to.be.a('boolean');
              expect(data.taskRequired).to.be(false);
              expect(data.foreignName).to.be.a('string');
              expect(data.foreignName).to.be("");
              expect(data.jobContactName).to.be.a('string');
              expect(data.jobContactName).to.be("");
              expect(data.quotationAmount).to.be.a('number');
              expect(data.quotationAmount).to.be(0.0);
              expect(data.serialnumber).to.be.a('string');
              expect(data.serialnumber).to.be("");
              expect(data.quotationAmountWithVAT).to.be.a('boolean');
              expect(data.quotationAmountWithVAT).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.discountType).to.be.a('string');
              expect(data.discountType).to.be("CustomerDiscount");
              expect(data.jobDiscountPercent).to.be.a('number');
              expect(data.jobDiscountPercent).to.be(0.0);
              expect(data.discountOfTime).to.be.a('boolean');
              expect(data.discountOfTime).to.be(false);
              expect(data.discountOfDriveTime).to.be.a('boolean');
              expect(data.discountOfDriveTime).to.be(false);
              expect(data.discountOfCost).to.be.a('boolean');
              expect(data.discountOfCost).to.be(false);
              expect(data.foreignPriceForWork).to.be.a('number');
              expect(data.foreignPriceForWork).to.be(0.0);
              expect(data.skipTaxOnInvoice).to.be.a('boolean');
              expect(data.skipTaxOnInvoice).to.be(false);
              expect(data.quotationCurrencyCode).to.be.a('string');
              expect(data.quotationCurrencyCode).to.be("");
              expect(data.quotationWorkingHours).to.be.a('number');
              expect(data.quotationWorkingHours).to.be(0.0);
              expect(data.quotationWorkingAmount).to.be.a('number');
              expect(data.quotationWorkingAmount).to.be(0.0);
              expect(data.quotationCostAmount).to.be.a('number');
              expect(data.quotationCostAmount).to.be(0.0);
              expect(data.quotationLicenceAmount).to.be.a('number');
              expect(data.quotationLicenceAmount).to.be(0.0);
              {
                let dataCtr = data.linkedPhases;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                  expect(data.phaseID).to.be.a('string');
                  expect(data.phaseID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
              {
                let dataCtr = data.linkedTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                  expect(data.taskID).to.be.a('string');
                  expect(data.taskID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectGetPage', function() {
        it('should call projectGetPage successfully', function(done) {
          // TODO: uncomment, update parameter values for projectGetPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.customer = "customer_example";
          opts.group = "group_example";
          opts.dim1 = "dim1_example";
          opts.dim2 = "dim2_example";
          opts.dim3 = "dim3_example";
          opts.type = 56;
          opts.status = 56;
          opts.include = "include_example";

          instance.projectGetPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.masterJobNumber).to.be.a('string');
              expect(data.masterJobNumber).to.be("");
              expect(data.quotationNumber).to.be.a('number');
              expect(data.quotationNumber).to.be(0);
              expect(data.customerToBill).to.be.a('string');
              expect(data.customerToBill).to.be("");
              expect(data.customerNameToBill).to.be.a('string');
              expect(data.customerNameToBill).to.be("");
              expect(data.customerToRecieve).to.be.a('string');
              expect(data.customerToRecieve).to.be("");
              expect(data.founder).to.be.a('string');
              expect(data.founder).to.be("");
              expect(data.owner).to.be.a('string');
              expect(data.owner).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              expect(data.foundingDate).to.be.a(Date);
              expect(data.foundingDate).to.be(new Date());
              expect(data.estimatedBeginingDate).to.be.a(Date);
              expect(data.estimatedBeginingDate).to.be(new Date());
              expect(data.estimatedFinishDate).to.be.a(Date);
              expect(data.estimatedFinishDate).to.be(new Date());
              expect(data.actualBeginingDate).to.be.a(Date);
              expect(data.actualBeginingDate).to.be(new Date());
              expect(data.actualFinishDate).to.be.a(Date);
              expect(data.actualFinishDate).to.be(new Date());
              expect(data.optimistDate).to.be.a(Date);
              expect(data.optimistDate).to.be(new Date());
              expect(data.pessimistDate).to.be.a(Date);
              expect(data.pessimistDate).to.be(new Date());
              expect(data.jobType).to.be.a('string');
              expect(data.jobType).to.be("_cbTimeJob");
              expect(data.jobStatus).to.be.a('string');
              expect(data.jobStatus).to.be("NotStarted");
              expect(data.jobBillingMode).to.be.a('string');
              expect(data.jobBillingMode).to.be("Monthly");
              expect(data.phaseId).to.be.a('string');
              expect(data.phaseId).to.be("");
              expect(data.phaseRequired).to.be.a('boolean');
              expect(data.phaseRequired).to.be(false);
              expect(data.taskId).to.be.a('string');
              expect(data.taskId).to.be("");
              expect(data.taskRequired).to.be.a('boolean');
              expect(data.taskRequired).to.be(false);
              expect(data.foreignName).to.be.a('string');
              expect(data.foreignName).to.be("");
              expect(data.jobContactName).to.be.a('string');
              expect(data.jobContactName).to.be("");
              expect(data.quotationAmount).to.be.a('number');
              expect(data.quotationAmount).to.be(0.0);
              expect(data.serialnumber).to.be.a('string');
              expect(data.serialnumber).to.be("");
              expect(data.quotationAmountWithVAT).to.be.a('boolean');
              expect(data.quotationAmountWithVAT).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.discountType).to.be.a('string');
              expect(data.discountType).to.be("CustomerDiscount");
              expect(data.jobDiscountPercent).to.be.a('number');
              expect(data.jobDiscountPercent).to.be(0.0);
              expect(data.discountOfTime).to.be.a('boolean');
              expect(data.discountOfTime).to.be(false);
              expect(data.discountOfDriveTime).to.be.a('boolean');
              expect(data.discountOfDriveTime).to.be(false);
              expect(data.discountOfCost).to.be.a('boolean');
              expect(data.discountOfCost).to.be(false);
              expect(data.foreignPriceForWork).to.be.a('number');
              expect(data.foreignPriceForWork).to.be(0.0);
              expect(data.skipTaxOnInvoice).to.be.a('boolean');
              expect(data.skipTaxOnInvoice).to.be(false);
              expect(data.quotationCurrencyCode).to.be.a('string');
              expect(data.quotationCurrencyCode).to.be("");
              expect(data.quotationWorkingHours).to.be.a('number');
              expect(data.quotationWorkingHours).to.be(0.0);
              expect(data.quotationWorkingAmount).to.be.a('number');
              expect(data.quotationWorkingAmount).to.be(0.0);
              expect(data.quotationCostAmount).to.be.a('number');
              expect(data.quotationCostAmount).to.be(0.0);
              expect(data.quotationLicenceAmount).to.be.a('number');
              expect(data.quotationLicenceAmount).to.be(0.0);
              {
                let dataCtr = data.linkedPhases;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                  expect(data.phaseID).to.be.a('string');
                  expect(data.phaseID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
              {
                let dataCtr = data.linkedTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                  expect(data.taskID).to.be.a('string');
                  expect(data.taskID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectGetProject', function() {
        it('should call projectGetProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectGetProject call and complete the assertions
          /*
          var _number = "_number_example";

          instance.projectGetProject(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.group).to.be.a('string');
            expect(data.group).to.be("");
            expect(data.masterJobNumber).to.be.a('string');
            expect(data.masterJobNumber).to.be("");
            expect(data.quotationNumber).to.be.a('number');
            expect(data.quotationNumber).to.be(0);
            expect(data.customerToBill).to.be.a('string');
            expect(data.customerToBill).to.be("");
            expect(data.customerNameToBill).to.be.a('string');
            expect(data.customerNameToBill).to.be("");
            expect(data.customerToRecieve).to.be.a('string');
            expect(data.customerToRecieve).to.be("");
            expect(data.founder).to.be.a('string');
            expect(data.founder).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.supervisor).to.be.a('string');
            expect(data.supervisor).to.be("");
            expect(data.worker).to.be.a('string');
            expect(data.worker).to.be("");
            expect(data.dim1).to.be.a('string');
            expect(data.dim1).to.be("");
            expect(data.dim2).to.be.a('string');
            expect(data.dim2).to.be("");
            expect(data.dim3).to.be.a('string');
            expect(data.dim3).to.be("");
            expect(data.dim1Required).to.be.a('boolean');
            expect(data.dim1Required).to.be(false);
            expect(data.dim2Required).to.be.a('boolean');
            expect(data.dim2Required).to.be(false);
            expect(data.dim3Required).to.be.a('boolean');
            expect(data.dim3Required).to.be(false);
            expect(data.foundingDate).to.be.a(Date);
            expect(data.foundingDate).to.be(new Date());
            expect(data.estimatedBeginingDate).to.be.a(Date);
            expect(data.estimatedBeginingDate).to.be(new Date());
            expect(data.estimatedFinishDate).to.be.a(Date);
            expect(data.estimatedFinishDate).to.be(new Date());
            expect(data.actualBeginingDate).to.be.a(Date);
            expect(data.actualBeginingDate).to.be(new Date());
            expect(data.actualFinishDate).to.be.a(Date);
            expect(data.actualFinishDate).to.be(new Date());
            expect(data.optimistDate).to.be.a(Date);
            expect(data.optimistDate).to.be(new Date());
            expect(data.pessimistDate).to.be.a(Date);
            expect(data.pessimistDate).to.be(new Date());
            expect(data.jobType).to.be.a('string');
            expect(data.jobType).to.be("_cbTimeJob");
            expect(data.jobStatus).to.be.a('string');
            expect(data.jobStatus).to.be("NotStarted");
            expect(data.jobBillingMode).to.be.a('string');
            expect(data.jobBillingMode).to.be("Monthly");
            expect(data.phaseId).to.be.a('string');
            expect(data.phaseId).to.be("");
            expect(data.phaseRequired).to.be.a('boolean');
            expect(data.phaseRequired).to.be(false);
            expect(data.taskId).to.be.a('string');
            expect(data.taskId).to.be("");
            expect(data.taskRequired).to.be.a('boolean');
            expect(data.taskRequired).to.be(false);
            expect(data.foreignName).to.be.a('string');
            expect(data.foreignName).to.be("");
            expect(data.jobContactName).to.be.a('string');
            expect(data.jobContactName).to.be("");
            expect(data.quotationAmount).to.be.a('number');
            expect(data.quotationAmount).to.be(0.0);
            expect(data.serialnumber).to.be.a('string');
            expect(data.serialnumber).to.be("");
            expect(data.quotationAmountWithVAT).to.be.a('boolean');
            expect(data.quotationAmountWithVAT).to.be(false);
            expect(data.ledgerCode).to.be.a('string');
            expect(data.ledgerCode).to.be("");
            expect(data.discountType).to.be.a('string');
            expect(data.discountType).to.be("CustomerDiscount");
            expect(data.jobDiscountPercent).to.be.a('number');
            expect(data.jobDiscountPercent).to.be(0.0);
            expect(data.discountOfTime).to.be.a('boolean');
            expect(data.discountOfTime).to.be(false);
            expect(data.discountOfDriveTime).to.be.a('boolean');
            expect(data.discountOfDriveTime).to.be(false);
            expect(data.discountOfCost).to.be.a('boolean');
            expect(data.discountOfCost).to.be(false);
            expect(data.foreignPriceForWork).to.be.a('number');
            expect(data.foreignPriceForWork).to.be(0.0);
            expect(data.skipTaxOnInvoice).to.be.a('boolean');
            expect(data.skipTaxOnInvoice).to.be(false);
            expect(data.quotationCurrencyCode).to.be.a('string');
            expect(data.quotationCurrencyCode).to.be("");
            expect(data.quotationWorkingHours).to.be.a('number');
            expect(data.quotationWorkingHours).to.be(0.0);
            expect(data.quotationWorkingAmount).to.be.a('number');
            expect(data.quotationWorkingAmount).to.be(0.0);
            expect(data.quotationCostAmount).to.be.a('number');
            expect(data.quotationCostAmount).to.be(0.0);
            expect(data.quotationLicenceAmount).to.be.a('number');
            expect(data.quotationLicenceAmount).to.be(0.0);
            {
              let dataCtr = data.linkedPhases;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                expect(data.phaseID).to.be.a('string');
                expect(data.phaseID).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }
            {
              let dataCtr = data.linkedTasks;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                expect(data.taskID).to.be.a('string');
                expect(data.taskID).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectGetProjectInvoices', function() {
        it('should call projectGetProjectInvoices successfully', function(done) {
          // TODO: uncomment, update parameter values for projectGetProjectInvoices call and complete the assertions
          /*
          var _number = "_number_example";

          instance.projectGetProjectInvoices(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.cNumber).to.be.a('string');
              expect(data.cNumber).to.be("");
              expect(data.cName).to.be.a('string');
              expect(data.cName).to.be("");
              expect(data.cAddress1).to.be.a('string');
              expect(data.cAddress1).to.be("");
              expect(data.cAddress2).to.be.a('string');
              expect(data.cAddress2).to.be("");
              expect(data.cZipCode).to.be.a('string');
              expect(data.cZipCode).to.be("");
              expect(data.cCountryCode).to.be.a('string');
              expect(data.cCountryCode).to.be("");
              expect(data.cSSNumber).to.be.a('string');
              expect(data.cSSNumber).to.be("");
              expect(data.cPhone).to.be.a('string');
              expect(data.cPhone).to.be("");
              expect(data.cContact).to.be.a('string');
              expect(data.cContact).to.be("");
              expect(data.recordID).to.be.a('number');
              expect(data.recordID).to.be(0);
              expect(data.orderNumber).to.be.a('number');
              expect(data.orderNumber).to.be(0);
              expect(data.invoiceDate).to.be.a(Date);
              expect(data.invoiceDate).to.be(new Date());
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.discountPercent).to.be.a('number');
              expect(data.discountPercent).to.be(0.0);
              expect(data.discount).to.be.a('number');
              expect(data.discount).to.be(0.0);
              expect(data.totalAmount).to.be.a('number');
              expect(data.totalAmount).to.be(0.0);
              expect(data.totalAmountWithTax).to.be.a('number');
              expect(data.totalAmountWithTax).to.be(0.0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.settledType).to.be.a('number');
              expect(data.settledType).to.be(0);
              expect(data.settledAmount).to.be.a('number');
              expect(data.settledAmount).to.be(0.0);
              expect(data.salePerson).to.be.a('string');
              expect(data.salePerson).to.be("");
              expect(data.text1).to.be.a('string');
              expect(data.text1).to.be("");
              expect(data.text2).to.be.a('string');
              expect(data.text2).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.paymentTerm).to.be.a('string');
              expect(data.paymentTerm).to.be("");
              expect(data.paymentMode).to.be.a('string');
              expect(data.paymentMode).to.be("");
              expect(data.claimStatus).to.be.a('number');
              expect(data.claimStatus).to.be(0);
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.salesType).to.be.a('number');
              expect(data.salesType).to.be(0);
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.iRNumber).to.be.a('string');
              expect(data.iRNumber).to.be("");
              expect(data.iRName).to.be.a('string');
              expect(data.iRName).to.be("");
              expect(data.iRAddress1).to.be.a('string');
              expect(data.iRAddress1).to.be("");
              expect(data.iRAddress2).to.be.a('string');
              expect(data.iRAddress2).to.be("");
              expect(data.iRZipCode).to.be.a('string');
              expect(data.iRZipCode).to.be("");
              expect(data.iRContact).to.be.a('string');
              expect(data.iRContact).to.be("");
              expect(data.externalInvoiceNumber).to.be.a('number');
              expect(data.externalInvoiceNumber).to.be(0);
              expect(data.claimNumber).to.be.a('number');
              expect(data.claimNumber).to.be(0);
              expect(data.claimDate).to.be.a(Date);
              expect(data.claimDate).to.be(new Date());
              expect(data.register).to.be.a('string');
              expect(data.register).to.be("");
              expect(data.posInvoice).to.be.a('number');
              expect(data.posInvoice).to.be(0);
              expect(data.journalId).to.be.a('number');
              expect(data.journalId).to.be(0);
              {
                let dataCtr = data.lines;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceLineModel);
                  expect(data.sequenceNumber).to.be.a('number');
                  expect(data.sequenceNumber).to.be(0);
                  expect(data.itemCode).to.be.a('string');
                  expect(data.itemCode).to.be("");
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.text2).to.be.a('string');
                  expect(data.text2).to.be("");
                  expect(data.warehouse).to.be.a('string');
                  expect(data.warehouse).to.be("");
                  expect(data.quantity).to.be.a('number');
                  expect(data.quantity).to.be(0.0);
                  expect(data.unitQuantity).to.be.a('number');
                  expect(data.unitQuantity).to.be(0.0);
                  expect(data.unitCode).to.be.a('string');
                  expect(data.unitCode).to.be("");
                  expect(data.unitPrice).to.be.a('number');
                  expect(data.unitPrice).to.be(0.0);
                  expect(data.unitPriceWithTax).to.be.a('number');
                  expect(data.unitPriceWithTax).to.be(0.0);
                  expect(data.discount).to.be.a('number');
                  expect(data.discount).to.be(0.0);
                  expect(data.discountAmount).to.be.a('number');
                  expect(data.discountAmount).to.be(0.0);
                  expect(data.discountAmountWithTax).to.be.a('number');
                  expect(data.discountAmountWithTax).to.be(0.0);
                  expect(data.totalAmount).to.be.a('number');
                  expect(data.totalAmount).to.be(0.0);
                  expect(data.totalAmountWithTax).to.be.a('number');
                  expect(data.totalAmountWithTax).to.be(0.0);
                  expect(data.dim1).to.be.a('string');
                  expect(data.dim1).to.be("");
                  {
                    let dataCtr = data.variations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(DkPlusApi.DkCloudDataModelProductsVariationModel);
                      expect(data.code).to.be.a('string');
                      expect(data.code).to.be("");
                      expect(data.code2).to.be.a('string');
                      expect(data.code2).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.description2).to.be.a('string');
                      expect(data.description2).to.be("");
                      expect(data.quantity).to.be.a('number');
                      expect(data.quantity).to.be(0.0);
                      expect(data.quantityOnBackOrders).to.be.a('number');
                      expect(data.quantityOnBackOrders).to.be(0.0);
      
                            }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectGetProjectRequests', function() {
        it('should call projectGetProjectRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for projectGetProjectRequests call and complete the assertions
          /*
          var _number = "_number_example";
          var page = 56;
          var size = 56;

          instance.projectGetProjectRequests(_number, page, size, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectRequest);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("RequestTypeNone");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("NotStarted");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.extraDescription).to.be.a('string');
              expect(data.extraDescription).to.be("");
              expect(data.memo).to.be.a('string');
              expect(data.memo).to.be("");
              expect(data.transfered).to.be.a('boolean');
              expect(data.transfered).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.from).to.be.a(Date);
              expect(data.from).to.be(new Date());
              expect(data.to).to.be.a(Date);
              expect(data.to).to.be(new Date());
              expect(data.hasPriority).to.be.a('boolean');
              expect(data.hasPriority).to.be(false);
              expect(data.workerCount).to.be.a('number');
              expect(data.workerCount).to.be(0);
              expect(data.isScheduled).to.be.a('boolean');
              expect(data.isScheduled).to.be(false);
              expect(data.isLocked).to.be.a('boolean');
              expect(data.isLocked).to.be(false);
              expect(data.parentRequest).to.be.a('string');
              expect(data.parentRequest).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectGetProjects', function() {
        it('should call projectGetProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for projectGetProjects call and complete the assertions
          /*
          var opts = {};
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.customer = "customer_example";
          opts.group = "group_example";
          opts.dim1 = "dim1_example";
          opts.dim2 = "dim2_example";
          opts.dim3 = "dim3_example";
          opts.type = 56;
          opts.status = 56;
          opts.max = 56;
          opts.include = "include_example";

          instance.projectGetProjects(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.group).to.be.a('string');
              expect(data.group).to.be("");
              expect(data.masterJobNumber).to.be.a('string');
              expect(data.masterJobNumber).to.be("");
              expect(data.quotationNumber).to.be.a('number');
              expect(data.quotationNumber).to.be(0);
              expect(data.customerToBill).to.be.a('string');
              expect(data.customerToBill).to.be("");
              expect(data.customerNameToBill).to.be.a('string');
              expect(data.customerNameToBill).to.be("");
              expect(data.customerToRecieve).to.be.a('string');
              expect(data.customerToRecieve).to.be("");
              expect(data.founder).to.be.a('string');
              expect(data.founder).to.be("");
              expect(data.owner).to.be.a('string');
              expect(data.owner).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.dim1Required).to.be.a('boolean');
              expect(data.dim1Required).to.be(false);
              expect(data.dim2Required).to.be.a('boolean');
              expect(data.dim2Required).to.be(false);
              expect(data.dim3Required).to.be.a('boolean');
              expect(data.dim3Required).to.be(false);
              expect(data.foundingDate).to.be.a(Date);
              expect(data.foundingDate).to.be(new Date());
              expect(data.estimatedBeginingDate).to.be.a(Date);
              expect(data.estimatedBeginingDate).to.be(new Date());
              expect(data.estimatedFinishDate).to.be.a(Date);
              expect(data.estimatedFinishDate).to.be(new Date());
              expect(data.actualBeginingDate).to.be.a(Date);
              expect(data.actualBeginingDate).to.be(new Date());
              expect(data.actualFinishDate).to.be.a(Date);
              expect(data.actualFinishDate).to.be(new Date());
              expect(data.optimistDate).to.be.a(Date);
              expect(data.optimistDate).to.be(new Date());
              expect(data.pessimistDate).to.be.a(Date);
              expect(data.pessimistDate).to.be(new Date());
              expect(data.jobType).to.be.a('string');
              expect(data.jobType).to.be("_cbTimeJob");
              expect(data.jobStatus).to.be.a('string');
              expect(data.jobStatus).to.be("NotStarted");
              expect(data.jobBillingMode).to.be.a('string');
              expect(data.jobBillingMode).to.be("Monthly");
              expect(data.phaseId).to.be.a('string');
              expect(data.phaseId).to.be("");
              expect(data.phaseRequired).to.be.a('boolean');
              expect(data.phaseRequired).to.be(false);
              expect(data.taskId).to.be.a('string');
              expect(data.taskId).to.be("");
              expect(data.taskRequired).to.be.a('boolean');
              expect(data.taskRequired).to.be(false);
              expect(data.foreignName).to.be.a('string');
              expect(data.foreignName).to.be("");
              expect(data.jobContactName).to.be.a('string');
              expect(data.jobContactName).to.be("");
              expect(data.quotationAmount).to.be.a('number');
              expect(data.quotationAmount).to.be(0.0);
              expect(data.serialnumber).to.be.a('string');
              expect(data.serialnumber).to.be("");
              expect(data.quotationAmountWithVAT).to.be.a('boolean');
              expect(data.quotationAmountWithVAT).to.be(false);
              expect(data.ledgerCode).to.be.a('string');
              expect(data.ledgerCode).to.be("");
              expect(data.discountType).to.be.a('string');
              expect(data.discountType).to.be("CustomerDiscount");
              expect(data.jobDiscountPercent).to.be.a('number');
              expect(data.jobDiscountPercent).to.be(0.0);
              expect(data.discountOfTime).to.be.a('boolean');
              expect(data.discountOfTime).to.be(false);
              expect(data.discountOfDriveTime).to.be.a('boolean');
              expect(data.discountOfDriveTime).to.be(false);
              expect(data.discountOfCost).to.be.a('boolean');
              expect(data.discountOfCost).to.be(false);
              expect(data.foreignPriceForWork).to.be.a('number');
              expect(data.foreignPriceForWork).to.be(0.0);
              expect(data.skipTaxOnInvoice).to.be.a('boolean');
              expect(data.skipTaxOnInvoice).to.be(false);
              expect(data.quotationCurrencyCode).to.be.a('string');
              expect(data.quotationCurrencyCode).to.be("");
              expect(data.quotationWorkingHours).to.be.a('number');
              expect(data.quotationWorkingHours).to.be(0.0);
              expect(data.quotationWorkingAmount).to.be.a('number');
              expect(data.quotationWorkingAmount).to.be(0.0);
              expect(data.quotationCostAmount).to.be.a('number');
              expect(data.quotationCostAmount).to.be(0.0);
              expect(data.quotationLicenceAmount).to.be.a('number');
              expect(data.quotationLicenceAmount).to.be(0.0);
              {
                let dataCtr = data.linkedPhases;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectPhaseLinkModel);
                  expect(data.phaseID).to.be.a('string');
                  expect(data.phaseID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
              {
                let dataCtr = data.linkedTasks;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectTaskLinkModel);
                  expect(data.taskID).to.be.a('string');
                  expect(data.taskID).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectRequestCreateProjectRequets', function() {
        it('should call projectRequestCreateProjectRequets successfully', function(done) {
          // TODO: uncomment, update parameter values for projectRequestCreateProjectRequets call and complete the assertions
          /*
          var request = new DkPlusApi.DkCloudDataModelProjectRequest();
          request.id = "0";
          request._number = "";
          request.type = "RequestTypeNone";
          request.status = "NotStarted";
          request.description = "";
          request.extraDescription = "";
          request.memo = "";
          request.transfered = false;
          request.dim1 = "";
          request.dim2 = "";
          request.dim3 = "";
          request.project = "";
          request.phase = "";
          request.task = "";
          request.supervisor = "";
          request.worker = "";
          request.from = new Date();
          request.to = new Date();
          request.hasPriority = false;
          request.workerCount = 0;
          request.isScheduled = false;
          request.isLocked = false;
          request.parentRequest = "";
          request.customer = "";
          request.objectDate = new Date();
          request.deleted = false;
          request.created = new Date();
          request.modified = new Date();

          instance.projectRequestCreateProjectRequets(request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectRequest);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("RequestTypeNone");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("NotStarted");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.extraDescription).to.be.a('string');
              expect(data.extraDescription).to.be("");
              expect(data.memo).to.be.a('string');
              expect(data.memo).to.be("");
              expect(data.transfered).to.be.a('boolean');
              expect(data.transfered).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.from).to.be.a(Date);
              expect(data.from).to.be(new Date());
              expect(data.to).to.be.a(Date);
              expect(data.to).to.be(new Date());
              expect(data.hasPriority).to.be.a('boolean');
              expect(data.hasPriority).to.be(false);
              expect(data.workerCount).to.be.a('number');
              expect(data.workerCount).to.be(0);
              expect(data.isScheduled).to.be.a('boolean');
              expect(data.isScheduled).to.be(false);
              expect(data.isLocked).to.be.a('boolean');
              expect(data.isLocked).to.be(false);
              expect(data.parentRequest).to.be.a('string');
              expect(data.parentRequest).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectRequestDeleteProjectRequets', function() {
        it('should call projectRequestDeleteProjectRequets successfully', function(done) {
          // TODO: uncomment, update parameter values for projectRequestDeleteProjectRequets call and complete the assertions
          /*
          var id = 789;

          instance.projectRequestDeleteProjectRequets(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectRequest);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("RequestTypeNone");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("NotStarted");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.extraDescription).to.be.a('string');
              expect(data.extraDescription).to.be("");
              expect(data.memo).to.be.a('string');
              expect(data.memo).to.be("");
              expect(data.transfered).to.be.a('boolean');
              expect(data.transfered).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.from).to.be.a(Date);
              expect(data.from).to.be(new Date());
              expect(data.to).to.be.a(Date);
              expect(data.to).to.be(new Date());
              expect(data.hasPriority).to.be.a('boolean');
              expect(data.hasPriority).to.be(false);
              expect(data.workerCount).to.be.a('number');
              expect(data.workerCount).to.be(0);
              expect(data.isScheduled).to.be.a('boolean');
              expect(data.isScheduled).to.be(false);
              expect(data.isLocked).to.be.a('boolean');
              expect(data.isLocked).to.be(false);
              expect(data.parentRequest).to.be.a('string');
              expect(data.parentRequest).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectRequestGetProjectRequets', function() {
        it('should call projectRequestGetProjectRequets successfully', function(done) {
          // TODO: uncomment, update parameter values for projectRequestGetProjectRequets call and complete the assertions
          /*
          var page = 56;
          var size = 56;
          var opts = {};
          opts._number = "_number_example";
          opts.project = "project_example";
          opts.parent = "parent_example";
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.customer = "customer_example";
          opts.dim1 = "dim1_example";
          opts.dim2 = "dim2_example";
          opts.dim3 = "dim3_example";
          opts.type = "type_example";
          opts.status = "status_example";
          opts.include = "include_example";

          instance.projectRequestGetProjectRequets(page, size, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectRequest);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("RequestTypeNone");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("NotStarted");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.extraDescription).to.be.a('string');
              expect(data.extraDescription).to.be("");
              expect(data.memo).to.be.a('string');
              expect(data.memo).to.be("");
              expect(data.transfered).to.be.a('boolean');
              expect(data.transfered).to.be(false);
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.project).to.be.a('string');
              expect(data.project).to.be("");
              expect(data.phase).to.be.a('string');
              expect(data.phase).to.be("");
              expect(data.task).to.be.a('string');
              expect(data.task).to.be("");
              expect(data.supervisor).to.be.a('string');
              expect(data.supervisor).to.be("");
              expect(data.worker).to.be.a('string');
              expect(data.worker).to.be("");
              expect(data.from).to.be.a(Date);
              expect(data.from).to.be(new Date());
              expect(data.to).to.be.a(Date);
              expect(data.to).to.be(new Date());
              expect(data.hasPriority).to.be.a('boolean');
              expect(data.hasPriority).to.be(false);
              expect(data.workerCount).to.be.a('number');
              expect(data.workerCount).to.be(0);
              expect(data.isScheduled).to.be.a('boolean');
              expect(data.isScheduled).to.be(false);
              expect(data.isLocked).to.be.a('boolean');
              expect(data.isLocked).to.be(false);
              expect(data.parentRequest).to.be.a('string');
              expect(data.parentRequest).to.be("");
              expect(data.customer).to.be.a('string');
              expect(data.customer).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectRequestUpdateProjectRequets', function() {
        it('should call projectRequestUpdateProjectRequets successfully', function(done) {
          // TODO: uncomment, update parameter values for projectRequestUpdateProjectRequets call
          /*
          var id = 789;
          var request = new DkPlusApi.DkCloudDataModelProjectRequest();
          request.id = "0";
          request._number = "";
          request.type = "RequestTypeNone";
          request.status = "NotStarted";
          request.description = "";
          request.extraDescription = "";
          request.memo = "";
          request.transfered = false;
          request.dim1 = "";
          request.dim2 = "";
          request.dim3 = "";
          request.project = "";
          request.phase = "";
          request.task = "";
          request.supervisor = "";
          request.worker = "";
          request.from = new Date();
          request.to = new Date();
          request.hasPriority = false;
          request.workerCount = 0;
          request.isScheduled = false;
          request.isLocked = false;
          request.parentRequest = "";
          request.customer = "";
          request.objectDate = new Date();
          request.deleted = false;
          request.created = new Date();
          request.modified = new Date();

          instance.projectRequestUpdateProjectRequets(id, request, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectTransactionGetProjectTransactionPage', function() {
        it('should call projectTransactionGetProjectTransactionPage successfully', function(done) {
          // TODO: uncomment, update parameter values for projectTransactionGetProjectTransactionPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.project = "project_example";
          opts.account = "account_example";
          opts.createdAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.createdBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.dim1 = "dim1_example";
          opts.voucher = "voucher_example";
          opts.reference = "reference_example";
          opts.recordid = 56;
          opts.origin = "origin_example";
          opts.include = "include_example";
          opts.sort = "sort_example";
          opts.sorttype = "sorttype_example";

          instance.projectTransactionGetProjectTransactionPage(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerTransaction);
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be(0);
              expect(data.headId).to.be.a('number');
              expect(data.headId).to.be("0");
              expect(data.sequence).to.be.a('number');
              expect(data.sequence).to.be("0");
              expect(data.invoiceNumber).to.be.a('string');
              expect(data.invoiceNumber).to.be("");
              expect(data.account).to.be.a('string');
              expect(data.account).to.be("");
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
              expect(data.dueDate).to.be.a(Date);
              expect(data.dueDate).to.be(new Date());
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.dim1).to.be.a('string');
              expect(data.dim1).to.be("");
              expect(data.dim2).to.be.a('string');
              expect(data.dim2).to.be("");
              expect(data.dim3).to.be.a('string');
              expect(data.dim3).to.be("");
              expect(data.journalDate).to.be.a(Date);
              expect(data.journalDate).to.be(new Date());
              expect(data.origin).to.be.a('number');
              expect(data.origin).to.be(0);
              expect(data.voucher).to.be.a('string');
              expect(data.voucher).to.be("");
              expect(data.journalType).to.be.a('number');
              expect(data.journalType).to.be(0);
              expect(data.code).to.be.a('number');
              expect(data.code).to.be(0);
              expect(data.currency).to.be.a('string');
              expect(data.currency).to.be("");
              expect(data.exchange).to.be.a('number');
              expect(data.exchange).to.be(0.0);
              expect(data.amount).to.be.a('number');
              expect(data.amount).to.be(0.0);
              expect(data.inputAmount).to.be.a('number');
              expect(data.inputAmount).to.be(0.0);
              expect(data.taxCode).to.be.a('string');
              expect(data.taxCode).to.be("");
              expect(data.taxGroup).to.be.a('number');
              expect(data.taxGroup).to.be(0);
              expect(data.taxPercent).to.be.a('number');
              expect(data.taxPercent).to.be(0.0);
              expect(data.hCode).to.be.a('string');
              expect(data.hCode).to.be("");
              expect(data.hType).to.be.a('number');
              expect(data.hType).to.be(0);
              expect(data.subAccount).to.be.a('string');
              expect(data.subAccount).to.be("");
              expect(data.isCredit).to.be.a('boolean');
              expect(data.isCredit).to.be(false);
              expect(data.krofunumer).to.be.a('string');
              expect(data.krofunumer).to.be("");
              expect(data.periodId).to.be.a('number');
              expect(data.periodId).to.be(0);
              expect(data.quantity).to.be.a('number');
              expect(data.quantity).to.be(0.0);
              expect(data.numberOfQuantity).to.be.a('number');
              expect(data.numberOfQuantity).to.be(0.0);
              expect(data.quantityUnitCode).to.be.a('string');
              expect(data.quantityUnitCode).to.be("");
              expect(data.percentageOfVATUsed).to.be.a('number');
              expect(data.percentageOfVATUsed).to.be(0.0);
              expect(data.vATReportID).to.be.a('number');
              expect(data.vATReportID).to.be(0);
              expect(data.vATReportGroup).to.be.a('string');
              expect(data.vATReportGroup).to.be("");
              expect(data.objectDate).to.be.a(Date);
              expect(data.objectDate).to.be(new Date());
              expect(data.deleted).to.be.a('boolean');
              expect(data.deleted).to.be(false);
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tasksCreateTask', function() {
        it('should call tasksCreateTask successfully', function(done) {
          // TODO: uncomment, update parameter values for tasksCreateTask call
          /*
          var model = new DkPlusApi.DkCloudDataModelProjectTaskModel();
          model._number = "";
          model.name = "";
          model.modified = new Date();
          model.extraProperties = {key: ""};

          instance.tasksCreateTask(model, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tasksGetTask', function() {
        it('should call tasksGetTask successfully', function(done) {
          // TODO: uncomment, update parameter values for tasksGetTask call and complete the assertions
          /*
          var _number = "_number_example";
          var opts = {};
          opts.include = "include_example";

          instance.tasksGetTask(_number, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectTaskModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tasksGetTasks', function() {
        it('should call tasksGetTasks successfully', function(done) {
          // TODO: uncomment, update parameter values for tasksGetTasks call and complete the assertions
          /*
          var page = 56;
          var count = 56;
          var opts = {};
          opts.modifiedBefore = new Date("2013-10-20T19:20:30+01:00");
          opts.modifiedAfter = new Date("2013-10-20T19:20:30+01:00");
          opts.include = "include_example";

          instance.tasksGetTasks(page, count, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelProjectTaskModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              {
                let dataCtr = data.extraProperties;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tasksUpdateTask', function() {
        it('should call tasksUpdateTask successfully', function(done) {
          // TODO: uncomment, update parameter values for tasksUpdateTask call
          /*
          var _number = "_number_example";
          var model = new DkPlusApi.DkCloudDataModelProjectTaskModel();
          model._number = "";
          model.name = "";
          model.modified = new Date();
          model.extraProperties = {key: ""};

          instance.tasksUpdateTask(_number, model, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
