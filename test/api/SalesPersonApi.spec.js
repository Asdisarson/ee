/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.SalesPersonApi();
  });

  describe('(package)', function() {
    describe('SalesPersonApi', function() {
      describe('salesPersonCreateSalesPerson', function() {
        it('should call salesPersonCreateSalesPerson successfully', function(done) {
          // TODO: uncomment, update parameter values for salesPersonCreateSalesPerson call
          /*
          var value = new DkPlusApi.DkCloudDataModelSalesSalesPersonModel();
          value._number = "";
          value.employee = "";
          value.nameOnSalesOrders = "";
          value.warehouse = "";
          value.modified = new Date();
          value.created = new Date();
          value.priceGroup = 0;
          value.price1Closed = false;
          value.price2Closed = false;
          value.price3Closed = false;
          value.canChangeDueDate = false;
          value.itemCode = "";
          value.itemCode2 = "";
          value.reference = "";
          value.filterOnCustomer = false;

          instance.salesPersonCreateSalesPerson(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('salesPersonGetSalesPerson', function() {
        it('should call salesPersonGetSalesPerson successfully', function(done) {
          // TODO: uncomment, update parameter values for salesPersonGetSalesPerson call and complete the assertions
          /*
          var _number = "_number_example";

          instance.salesPersonGetSalesPerson(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesPersonModel);
            expect(data._number).to.be.a('string');
            expect(data._number).to.be("");
            expect(data.employee).to.be.a('string');
            expect(data.employee).to.be("");
            expect(data.nameOnSalesOrders).to.be.a('string');
            expect(data.nameOnSalesOrders).to.be("");
            expect(data.warehouse).to.be.a('string');
            expect(data.warehouse).to.be("");
            expect(data.modified).to.be.a(Date);
            expect(data.modified).to.be(new Date());
            expect(data.created).to.be.a(Date);
            expect(data.created).to.be(new Date());
            expect(data.priceGroup).to.be.a('number');
            expect(data.priceGroup).to.be(0);
            expect(data.price1Closed).to.be.a('boolean');
            expect(data.price1Closed).to.be(false);
            expect(data.price2Closed).to.be.a('boolean');
            expect(data.price2Closed).to.be(false);
            expect(data.price3Closed).to.be.a('boolean');
            expect(data.price3Closed).to.be(false);
            expect(data.canChangeDueDate).to.be.a('boolean');
            expect(data.canChangeDueDate).to.be(false);
            expect(data.itemCode).to.be.a('string');
            expect(data.itemCode).to.be("");
            expect(data.itemCode2).to.be.a('string');
            expect(data.itemCode2).to.be("");
            expect(data.reference).to.be.a('string');
            expect(data.reference).to.be("");
            expect(data.filterOnCustomer).to.be.a('boolean');
            expect(data.filterOnCustomer).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('salesPersonGetSalesPersons', function() {
        it('should call salesPersonGetSalesPersons successfully', function(done) {
          // TODO: uncomment, update parameter values for salesPersonGetSalesPersons call and complete the assertions
          /*
          var page = 56;
          var count = 56;

          instance.salesPersonGetSalesPersons(page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesPersonModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.employee).to.be.a('string');
              expect(data.employee).to.be("");
              expect(data.nameOnSalesOrders).to.be.a('string');
              expect(data.nameOnSalesOrders).to.be("");
              expect(data.warehouse).to.be.a('string');
              expect(data.warehouse).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.priceGroup).to.be.a('number');
              expect(data.priceGroup).to.be(0);
              expect(data.price1Closed).to.be.a('boolean');
              expect(data.price1Closed).to.be(false);
              expect(data.price2Closed).to.be.a('boolean');
              expect(data.price2Closed).to.be(false);
              expect(data.price3Closed).to.be.a('boolean');
              expect(data.price3Closed).to.be(false);
              expect(data.canChangeDueDate).to.be.a('boolean');
              expect(data.canChangeDueDate).to.be(false);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.itemCode2).to.be.a('string');
              expect(data.itemCode2).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.filterOnCustomer).to.be.a('boolean');
              expect(data.filterOnCustomer).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('salesPersonGetSalesPersonsPage', function() {
        it('should call salesPersonGetSalesPersonsPage successfully', function(done) {
          // TODO: uncomment, update parameter values for salesPersonGetSalesPersonsPage call and complete the assertions
          /*
          var page = 56;
          var count = 56;

          instance.salesPersonGetSalesPersonsPage(page, count, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesPersonModel);
              expect(data._number).to.be.a('string');
              expect(data._number).to.be("");
              expect(data.employee).to.be.a('string');
              expect(data.employee).to.be("");
              expect(data.nameOnSalesOrders).to.be.a('string');
              expect(data.nameOnSalesOrders).to.be("");
              expect(data.warehouse).to.be.a('string');
              expect(data.warehouse).to.be("");
              expect(data.modified).to.be.a(Date);
              expect(data.modified).to.be(new Date());
              expect(data.created).to.be.a(Date);
              expect(data.created).to.be(new Date());
              expect(data.priceGroup).to.be.a('number');
              expect(data.priceGroup).to.be(0);
              expect(data.price1Closed).to.be.a('boolean');
              expect(data.price1Closed).to.be(false);
              expect(data.price2Closed).to.be.a('boolean');
              expect(data.price2Closed).to.be(false);
              expect(data.price3Closed).to.be.a('boolean');
              expect(data.price3Closed).to.be(false);
              expect(data.canChangeDueDate).to.be.a('boolean');
              expect(data.canChangeDueDate).to.be(false);
              expect(data.itemCode).to.be.a('string');
              expect(data.itemCode).to.be("");
              expect(data.itemCode2).to.be.a('string');
              expect(data.itemCode2).to.be("");
              expect(data.reference).to.be.a('string');
              expect(data.reference).to.be("");
              expect(data.filterOnCustomer).to.be.a('boolean');
              expect(data.filterOnCustomer).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('salesPersonRemoveSalesPerson', function() {
        it('should call salesPersonRemoveSalesPerson successfully', function(done) {
          // TODO: uncomment, update parameter values for salesPersonRemoveSalesPerson call
          /*
          var _number = "_number_example";

          instance.salesPersonRemoveSalesPerson(_number, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('salesPersonUpdateSalesPerson', function() {
        it('should call salesPersonUpdateSalesPerson successfully', function(done) {
          // TODO: uncomment, update parameter values for salesPersonUpdateSalesPerson call
          /*
          var _number = "_number_example";
          var value = new DkPlusApi.DkCloudDataModelSalesSalesPersonModel();
          value._number = "";
          value.employee = "";
          value.nameOnSalesOrders = "";
          value.warehouse = "";
          value.modified = new Date();
          value.created = new Date();
          value.priceGroup = 0;
          value.price1Closed = false;
          value.price2Closed = false;
          value.price3Closed = false;
          value.canChangeDueDate = false;
          value.itemCode = "";
          value.itemCode2 = "";
          value.reference = "";
          value.filterOnCustomer = false;

          instance.salesPersonUpdateSalesPerson(_number, value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
