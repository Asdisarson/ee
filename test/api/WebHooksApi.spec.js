/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DkPlusApi.WebHooksApi();
  });

  describe('(package)', function() {
    describe('WebHooksApi', function() {
      describe('webHooksCreateWebHookTest', function() {
        it('should call webHooksCreateWebHookTest successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksCreateWebHookTest call
          /*
          var value = new DkPlusApi.DkCloudDataModelCompanyWebHookSubscription();
          value.ID = "00000000-0000-0000-0000-000000000000";
          value.description = "";
          value.authorizationScheme = "";
          value.authorizationValue = "";
          value.url = "";
          value.options = new DkPlusApi.DkCloudDataModelCompanyWebHookOption();
          value.options.enabled = false;
          value.options.product = false;
          value.options.customer = false;
          value.options.member = false;
          value.options.vendor = false;
          value.options.project = false;
          value.options.timeClock = false;
          value.options.employee = false;
          value.options.generalLedgerTransactions = false;
          value.failureEmail = "";

          instance.webHooksCreateWebHookTest(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksCreateWebhook', function() {
        it('should call webHooksCreateWebhook successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksCreateWebhook call and complete the assertions
          /*
          var value = new DkPlusApi.DkCloudDataModelCompanyWebHookSubscription();
          value.ID = "00000000-0000-0000-0000-000000000000";
          value.description = "";
          value.authorizationScheme = "";
          value.authorizationValue = "";
          value.url = "";
          value.options = new DkPlusApi.DkCloudDataModelCompanyWebHookOption();
          value.options.enabled = false;
          value.options.product = false;
          value.options.customer = false;
          value.options.member = false;
          value.options.vendor = false;
          value.options.project = false;
          value.options.timeClock = false;
          value.options.employee = false;
          value.options.generalLedgerTransactions = false;
          value.failureEmail = "";

          instance.webHooksCreateWebhook(value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelCompanyWebHookSubscription);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.authorizationScheme).to.be.a('string');
            expect(data.authorizationScheme).to.be("");
            expect(data.authorizationValue).to.be.a('string');
            expect(data.authorizationValue).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            expect(data.options).to.be.a(DkPlusApi.DkCloudDataModelCompanyWebHookOption);
                  expect(data.options.enabled).to.be.a('boolean');
              expect(data.options.enabled).to.be(false);
              expect(data.options.product).to.be.a('boolean');
              expect(data.options.product).to.be(false);
              expect(data.options.customer).to.be.a('boolean');
              expect(data.options.customer).to.be(false);
              expect(data.options.member).to.be.a('boolean');
              expect(data.options.member).to.be(false);
              expect(data.options.vendor).to.be.a('boolean');
              expect(data.options.vendor).to.be(false);
              expect(data.options.project).to.be.a('boolean');
              expect(data.options.project).to.be(false);
              expect(data.options.timeClock).to.be.a('boolean');
              expect(data.options.timeClock).to.be(false);
              expect(data.options.employee).to.be.a('boolean');
              expect(data.options.employee).to.be(false);
              expect(data.options.generalLedgerTransactions).to.be.a('boolean');
              expect(data.options.generalLedgerTransactions).to.be(false);
            expect(data.failureEmail).to.be.a('string');
            expect(data.failureEmail).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksDeleteWebHook', function() {
        it('should call webHooksDeleteWebHook successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksDeleteWebHook call
          /*
          var id = "id_example";

          instance.webHooksDeleteWebHook(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksGetHookById', function() {
        it('should call webHooksGetHookById successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksGetHookById call and complete the assertions
          /*
          var id = "id_example";

          instance.webHooksGetHookById(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DkPlusApi.DkCloudDataModelCompanyWebHookSubscription);
            expect(data.ID).to.be.a('string');
            expect(data.ID).to.be("00000000-0000-0000-0000-000000000000");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.authorizationScheme).to.be.a('string');
            expect(data.authorizationScheme).to.be("");
            expect(data.authorizationValue).to.be.a('string');
            expect(data.authorizationValue).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");
            expect(data.options).to.be.a(DkPlusApi.DkCloudDataModelCompanyWebHookOption);
                  expect(data.options.enabled).to.be.a('boolean');
              expect(data.options.enabled).to.be(false);
              expect(data.options.product).to.be.a('boolean');
              expect(data.options.product).to.be(false);
              expect(data.options.customer).to.be.a('boolean');
              expect(data.options.customer).to.be(false);
              expect(data.options.member).to.be.a('boolean');
              expect(data.options.member).to.be(false);
              expect(data.options.vendor).to.be.a('boolean');
              expect(data.options.vendor).to.be(false);
              expect(data.options.project).to.be.a('boolean');
              expect(data.options.project).to.be(false);
              expect(data.options.timeClock).to.be.a('boolean');
              expect(data.options.timeClock).to.be(false);
              expect(data.options.employee).to.be.a('boolean');
              expect(data.options.employee).to.be(false);
              expect(data.options.generalLedgerTransactions).to.be.a('boolean');
              expect(data.options.generalLedgerTransactions).to.be(false);
            expect(data.failureEmail).to.be.a('string');
            expect(data.failureEmail).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksGetWebHooks', function() {
        it('should call webHooksGetWebHooks successfully', function(done) {
          // TODO: uncomment webHooksGetWebHooks call
          /*

          instance.webHooksGetWebHooks(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('webHooksUpdateWebHook', function() {
        it('should call webHooksUpdateWebHook successfully', function(done) {
          // TODO: uncomment, update parameter values for webHooksUpdateWebHook call
          /*
          var id = "id_example";
          var value = new DkPlusApi.DkCloudDataModelCompanyWebHookSubscription();
          value.ID = "00000000-0000-0000-0000-000000000000";
          value.description = "";
          value.authorizationScheme = "";
          value.authorizationValue = "";
          value.url = "";
          value.options = new DkPlusApi.DkCloudDataModelCompanyWebHookOption();
          value.options.enabled = false;
          value.options.product = false;
          value.options.customer = false;
          value.options.member = false;
          value.options.vendor = false;
          value.options.project = false;
          value.options.timeClock = false;
          value.options.employee = false;
          value.options.generalLedgerTransactions = false;
          value.failureEmail = "";

          instance.webHooksUpdateWebHook(id, value, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
