/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelPermissionMemberPermissionModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelPermissionMemberPermissionModel();
      });

      it('should create an instance of DkCloudDataModelPermissionMemberPermissionModel', function() {
        // TODO: update the code to test DkCloudDataModelPermissionMemberPermissionModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelPermissionMemberPermissionModel);
      });

      it('should have the property members (base name: "Members")', function() {
        // TODO: update the code to test the property members
        expect(instance).to.have.property('members');
        // expect(instance.members).to.be(expectedValueLiteral);
      });

      it('should have the property memberDashboard (base name: "MemberDashboard")', function() {
        // TODO: update the code to test the property memberDashboard
        expect(instance).to.have.property('memberDashboard');
        // expect(instance.memberDashboard).to.be(expectedValueLiteral);
      });

      it('should have the property groups (base name: "Groups")', function() {
        // TODO: update the code to test the property groups
        expect(instance).to.have.property('groups');
        // expect(instance.groups).to.be(expectedValueLiteral);
      });

      it('should have the property invoices (base name: "Invoices")', function() {
        // TODO: update the code to test the property invoices
        expect(instance).to.have.property('invoices');
        // expect(instance.invoices).to.be(expectedValueLiteral);
      });

      it('should have the property carrier (base name: "Carrier")', function() {
        // TODO: update the code to test the property carrier
        expect(instance).to.have.property('carrier');
        // expect(instance.carrier).to.be(expectedValueLiteral);
      });

      it('should have the property subGroups (base name: "SubGroups")', function() {
        // TODO: update the code to test the property subGroups
        expect(instance).to.have.property('subGroups');
        // expect(instance.subGroups).to.be(expectedValueLiteral);
      });

      it('should have the property membership (base name: "Membership")', function() {
        // TODO: update the code to test the property membership
        expect(instance).to.have.property('membership');
        // expect(instance.membership).to.be(expectedValueLiteral);
      });

      it('should have the property education (base name: "Education")', function() {
        // TODO: update the code to test the property education
        expect(instance).to.have.property('education');
        // expect(instance.education).to.be(expectedValueLiteral);
      });

      it('should have the property applications (base name: "Applications")', function() {
        // TODO: update the code to test the property applications
        expect(instance).to.have.property('applications');
        // expect(instance.applications).to.be(expectedValueLiteral);
      });

      it('should have the property fundPayments (base name: "FundPayments")', function() {
        // TODO: update the code to test the property fundPayments
        expect(instance).to.have.property('fundPayments');
        // expect(instance.fundPayments).to.be(expectedValueLiteral);
      });

      it('should have the property statistics (base name: "Statistics")', function() {
        // TODO: update the code to test the property statistics
        expect(instance).to.have.property('statistics');
        // expect(instance.statistics).to.be(expectedValueLiteral);
      });

      it('should have the property resume (base name: "Resume")', function() {
        // TODO: update the code to test the property resume
        expect(instance).to.have.property('resume');
        // expect(instance.resume).to.be(expectedValueLiteral);
      });

      it('should have the property settings (base name: "Settings")', function() {
        // TODO: update the code to test the property settings
        expect(instance).to.have.property('settings');
        // expect(instance.settings).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "Enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

    });
  });

}));
