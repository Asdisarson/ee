/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelPayrollPayslip', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelPayrollPayslip();
      });

      it('should create an instance of DkCloudDataModelPayrollPayslip', function() {
        // TODO: update the code to test DkCloudDataModelPayrollPayslip
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelPayrollPayslip);
      });

      it('should have the property uId (base name: "UId")', function() {
        // TODO: update the code to test the property uId
        expect(instance).to.have.property('uId');
        // expect(instance.uId).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property year (base name: "Year")', function() {
        // TODO: update the code to test the property year
        expect(instance).to.have.property('year');
        // expect(instance.year).to.be(expectedValueLiteral);
      });

      it('should have the property payRunNumber (base name: "PayRunNumber")', function() {
        // TODO: update the code to test the property payRunNumber
        expect(instance).to.have.property('payRunNumber');
        // expect(instance.payRunNumber).to.be(expectedValueLiteral);
      });

      it('should have the property paySlipNumber (base name: "PaySlipNumber")', function() {
        // TODO: update the code to test the property paySlipNumber
        expect(instance).to.have.property('paySlipNumber');
        // expect(instance.paySlipNumber).to.be(expectedValueLiteral);
      });

      it('should have the property employee (base name: "Employee")', function() {
        // TODO: update the code to test the property employee
        expect(instance).to.have.property('employee');
        // expect(instance.employee).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property from (base name: "From")', function() {
        // TODO: update the code to test the property from
        expect(instance).to.have.property('from');
        // expect(instance.from).to.be(expectedValueLiteral);
      });

      it('should have the property to (base name: "To")', function() {
        // TODO: update the code to test the property to
        expect(instance).to.have.property('to');
        // expect(instance.to).to.be(expectedValueLiteral);
      });

      it('should have the property payDay (base name: "PayDay")', function() {
        // TODO: update the code to test the property payDay
        expect(instance).to.have.property('payDay');
        // expect(instance.payDay).to.be(expectedValueLiteral);
      });

      it('should have the property totalSalary (base name: "TotalSalary")', function() {
        // TODO: update the code to test the property totalSalary
        expect(instance).to.have.property('totalSalary');
        // expect(instance.totalSalary).to.be(expectedValueLiteral);
      });

      it('should have the property totalTaxBaseSalary (base name: "TotalTaxBaseSalary")', function() {
        // TODO: update the code to test the property totalTaxBaseSalary
        expect(instance).to.have.property('totalTaxBaseSalary');
        // expect(instance.totalTaxBaseSalary).to.be(expectedValueLiteral);
      });

      it('should have the property totalDeduction (base name: "TotalDeduction")', function() {
        // TODO: update the code to test the property totalDeduction
        expect(instance).to.have.property('totalDeduction');
        // expect(instance.totalDeduction).to.be(expectedValueLiteral);
      });

      it('should have the property roundOff (base name: "RoundOff")', function() {
        // TODO: update the code to test the property roundOff
        expect(instance).to.have.property('roundOff');
        // expect(instance.roundOff).to.be(expectedValueLiteral);
      });

      it('should have the property objectDate (base name: "ObjectDate")', function() {
        // TODO: update the code to test the property objectDate
        expect(instance).to.have.property('objectDate');
        // expect(instance.objectDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "Deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property lines (base name: "Lines")', function() {
        // TODO: update the code to test the property lines
        expect(instance).to.have.property('lines');
        // expect(instance.lines).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

    });
  });

}));
