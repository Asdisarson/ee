/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelVendorsInvoiceLineModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel();
      });

      it('should create an instance of DkCloudDataModelVendorsInvoiceLineModel', function() {
        // TODO: update the code to test DkCloudDataModelVendorsInvoiceLineModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceLineModel);
      });

      it('should have the property headID (base name: "HeadID")', function() {
        // TODO: update the code to test the property headID
        expect(instance).to.have.property('headID');
        // expect(instance.headID).to.be(expectedValueLiteral);
      });

      it('should have the property sequenceID (base name: "SequenceID")', function() {
        // TODO: update the code to test the property sequenceID
        expect(instance).to.have.property('sequenceID');
        // expect(instance.sequenceID).to.be(expectedValueLiteral);
      });

      it('should have the property account (base name: "Account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "Text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property voucher (base name: "Voucher")', function() {
        // TODO: update the code to test the property voucher
        expect(instance).to.have.property('voucher');
        // expect(instance.voucher).to.be(expectedValueLiteral);
      });

      it('should have the property taxPercent (base name: "TaxPercent")', function() {
        // TODO: update the code to test the property taxPercent
        expect(instance).to.have.property('taxPercent');
        // expect(instance.taxPercent).to.be(expectedValueLiteral);
      });

      it('should have the property lineType (base name: "LineType")', function() {
        // TODO: update the code to test the property lineType
        expect(instance).to.have.property('lineType');
        // expect(instance.lineType).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "Amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property code (base name: "Code")', function() {
        // TODO: update the code to test the property code
        expect(instance).to.have.property('code');
        // expect(instance.code).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

    });
  });

}));
