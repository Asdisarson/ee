/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelMembersApplication', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelMembersApplication();
      });

      it('should create an instance of DkCloudDataModelMembersApplication', function() {
        // TODO: update the code to test DkCloudDataModelMembersApplication
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelMembersApplication);
      });

      it('should have the property member (base name: "Member")', function() {
        // TODO: update the code to test the property member
        expect(instance).to.have.property('member');
        // expect(instance.member).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccount (base name: "BankAccount")', function() {
        // TODO: update the code to test the property bankAccount
        expect(instance).to.have.property('bankAccount');
        // expect(instance.bankAccount).to.be(expectedValueLiteral);
      });

      it('should have the property contact (base name: "Contact")', function() {
        // TODO: update the code to test the property contact
        expect(instance).to.have.property('contact');
        // expect(instance.contact).to.be(expectedValueLiteral);
      });

      it('should have the property fund (base name: "Fund")', function() {
        // TODO: update the code to test the property fund
        expect(instance).to.have.property('fund');
        // expect(instance.fund).to.be(expectedValueLiteral);
      });

      it('should have the property grantDescription (base name: "GrantDescription")', function() {
        // TODO: update the code to test the property grantDescription
        expect(instance).to.have.property('grantDescription');
        // expect(instance.grantDescription).to.be(expectedValueLiteral);
      });

      it('should have the property grant (base name: "Grant")', function() {
        // TODO: update the code to test the property grant
        expect(instance).to.have.property('grant');
        // expect(instance.grant).to.be(expectedValueLiteral);
      });

      it('should have the property purpose (base name: "Purpose")', function() {
        // TODO: update the code to test the property purpose
        expect(instance).to.have.property('purpose');
        // expect(instance.purpose).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property managedBy (base name: "ManagedBy")', function() {
        // TODO: update the code to test the property managedBy
        expect(instance).to.have.property('managedBy');
        // expect(instance.managedBy).to.be(expectedValueLiteral);
      });

      it('should have the property _date (base name: "Date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfMeeting (base name: "DateOfMeeting")', function() {
        // TODO: update the code to test the property dateOfMeeting
        expect(instance).to.have.property('dateOfMeeting');
        // expect(instance.dateOfMeeting).to.be(expectedValueLiteral);
      });

      it('should have the property denialCode (base name: "DenialCode")', function() {
        // TODO: update the code to test the property denialCode
        expect(instance).to.have.property('denialCode');
        // expect(instance.denialCode).to.be(expectedValueLiteral);
      });

      it('should have the property denialCodeDescription (base name: "DenialCodeDescription")', function() {
        // TODO: update the code to test the property denialCodeDescription
        expect(instance).to.have.property('denialCodeDescription');
        // expect(instance.denialCodeDescription).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "Group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property subGroup (base name: "SubGroup")', function() {
        // TODO: update the code to test the property subGroup
        expect(instance).to.have.property('subGroup');
        // expect(instance.subGroup).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property period (base name: "Period")', function() {
        // TODO: update the code to test the property period
        expect(instance).to.have.property('period');
        // expect(instance.period).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "Amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property posted (base name: "Posted")', function() {
        // TODO: update the code to test the property posted
        expect(instance).to.have.property('posted');
        // expect(instance.posted).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "Comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property text1 (base name: "Text1")', function() {
        // TODO: update the code to test the property text1
        expect(instance).to.have.property('text1');
        // expect(instance.text1).to.be(expectedValueLiteral);
      });

      it('should have the property text2 (base name: "Text2")', function() {
        // TODO: update the code to test the property text2
        expect(instance).to.have.property('text2');
        // expect(instance.text2).to.be(expectedValueLiteral);
      });

      it('should have the property membershipRulesOK (base name: "MembershipRulesOK")', function() {
        // TODO: update the code to test the property membershipRulesOK
        expect(instance).to.have.property('membershipRulesOK');
        // expect(instance.membershipRulesOK).to.be(expectedValueLiteral);
      });

      it('should have the property grantRulesOK (base name: "GrantRulesOK")', function() {
        // TODO: update the code to test the property grantRulesOK
        expect(instance).to.have.property('grantRulesOK');
        // expect(instance.grantRulesOK).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property jobRatio (base name: "JobRatio")', function() {
        // TODO: update the code to test the property jobRatio
        expect(instance).to.have.property('jobRatio');
        // expect(instance.jobRatio).to.be(expectedValueLiteral);
      });

      it('should have the property periodDesc (base name: "PeriodDesc")', function() {
        // TODO: update the code to test the property periodDesc
        expect(instance).to.have.property('periodDesc');
        // expect(instance.periodDesc).to.be(expectedValueLiteral);
      });

      it('should have the property communicationMemo (base name: "CommunicationMemo")', function() {
        // TODO: update the code to test the property communicationMemo
        expect(instance).to.have.property('communicationMemo');
        // expect(instance.communicationMemo).to.be(expectedValueLiteral);
      });

      it('should have the property grantCount (base name: "GrantCount")', function() {
        // TODO: update the code to test the property grantCount
        expect(instance).to.have.property('grantCount');
        // expect(instance.grantCount).to.be(expectedValueLiteral);
      });

      it('should have the property unitCount (base name: "UnitCount")', function() {
        // TODO: update the code to test the property unitCount
        expect(instance).to.have.property('unitCount');
        // expect(instance.unitCount).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "Location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property periodDescription (base name: "PeriodDescription")', function() {
        // TODO: update the code to test the property periodDescription
        expect(instance).to.have.property('periodDescription');
        // expect(instance.periodDescription).to.be(expectedValueLiteral);
      });

      it('should have the property organizer (base name: "Organizer")', function() {
        // TODO: update the code to test the property organizer
        expect(instance).to.have.property('organizer');
        // expect(instance.organizer).to.be(expectedValueLiteral);
      });

      it('should have the property workPlace (base name: "WorkPlace")', function() {
        // TODO: update the code to test the property workPlace
        expect(instance).to.have.property('workPlace');
        // expect(instance.workPlace).to.be(expectedValueLiteral);
      });

      it('should have the property workPlaceNumber (base name: "WorkPlaceNumber")', function() {
        // TODO: update the code to test the property workPlaceNumber
        expect(instance).to.have.property('workPlaceNumber');
        // expect(instance.workPlaceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property voucherTag (base name: "VoucherTag")', function() {
        // TODO: update the code to test the property voucherTag
        expect(instance).to.have.property('voucherTag');
        // expect(instance.voucherTag).to.be(expectedValueLiteral);
      });

      it('should have the property details (base name: "Details")', function() {
        // TODO: update the code to test the property details
        expect(instance).to.have.property('details');
        // expect(instance.details).to.be(expectedValueLiteral);
      });

      it('should have the property workPlaceHistory (base name: "WorkPlaceHistory")', function() {
        // TODO: update the code to test the property workPlaceHistory
        expect(instance).to.have.property('workPlaceHistory');
        // expect(instance.workPlaceHistory).to.be(expectedValueLiteral);
      });

      it('should have the property maternityLeaves (base name: "MaternityLeaves")', function() {
        // TODO: update the code to test the property maternityLeaves
        expect(instance).to.have.property('maternityLeaves');
        // expect(instance.maternityLeaves).to.be(expectedValueLiteral);
      });

      it('should have the property amountTraveled (base name: "AmountTraveled")', function() {
        // TODO: update the code to test the property amountTraveled
        expect(instance).to.have.property('amountTraveled');
        // expect(instance.amountTraveled).to.be(expectedValueLiteral);
      });

      it('should have the property travelCost (base name: "TravelCost")', function() {
        // TODO: update the code to test the property travelCost
        expect(instance).to.have.property('travelCost');
        // expect(instance.travelCost).to.be(expectedValueLiteral);
      });

      it('should have the property companyID (base name: "CompanyID")', function() {
        // TODO: update the code to test the property companyID
        expect(instance).to.have.property('companyID');
        // expect(instance.companyID).to.be(expectedValueLiteral);
      });

      it('should have the property attachments (base name: "Attachments")', function() {
        // TODO: update the code to test the property attachments
        expect(instance).to.have.property('attachments');
        // expect(instance.attachments).to.be(expectedValueLiteral);
      });

      it('should have the property termsConsentGiven (base name: "TermsConsentGiven")', function() {
        // TODO: update the code to test the property termsConsentGiven
        expect(instance).to.have.property('termsConsentGiven');
        // expect(instance.termsConsentGiven).to.be(expectedValueLiteral);
      });

      it('should have the property termId (base name: "TermId")', function() {
        // TODO: update the code to test the property termId
        expect(instance).to.have.property('termId');
        // expect(instance.termId).to.be(expectedValueLiteral);
      });

      it('should have the property extraProperties (base name: "ExtraProperties")', function() {
        // TODO: update the code to test the property extraProperties
        expect(instance).to.have.property('extraProperties');
        // expect(instance.extraProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
