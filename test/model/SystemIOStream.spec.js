/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SystemIOStream', function() {
      beforeEach(function() {
        instance = new DkPlusApi.SystemIOStream();
      });

      it('should create an instance of SystemIOStream', function() {
        // TODO: update the code to test SystemIOStream
        expect(instance).to.be.a(DkPlusApi.SystemIOStream);
      });

      it('should have the property canRead (base name: "CanRead")', function() {
        // TODO: update the code to test the property canRead
        expect(instance).to.have.property('canRead');
        // expect(instance.canRead).to.be(expectedValueLiteral);
      });

      it('should have the property canSeek (base name: "CanSeek")', function() {
        // TODO: update the code to test the property canSeek
        expect(instance).to.have.property('canSeek');
        // expect(instance.canSeek).to.be(expectedValueLiteral);
      });

      it('should have the property canTimeout (base name: "CanTimeout")', function() {
        // TODO: update the code to test the property canTimeout
        expect(instance).to.have.property('canTimeout');
        // expect(instance.canTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property canWrite (base name: "CanWrite")', function() {
        // TODO: update the code to test the property canWrite
        expect(instance).to.have.property('canWrite');
        // expect(instance.canWrite).to.be(expectedValueLiteral);
      });

      it('should have the property length (base name: "Length")', function() {
        // TODO: update the code to test the property length
        expect(instance).to.have.property('length');
        // expect(instance.length).to.be(expectedValueLiteral);
      });

      it('should have the property position (base name: "Position")', function() {
        // TODO: update the code to test the property position
        expect(instance).to.have.property('position');
        // expect(instance.position).to.be(expectedValueLiteral);
      });

      it('should have the property readTimeout (base name: "ReadTimeout")', function() {
        // TODO: update the code to test the property readTimeout
        expect(instance).to.have.property('readTimeout');
        // expect(instance.readTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property writeTimeout (base name: "WriteTimeout")', function() {
        // TODO: update the code to test the property writeTimeout
        expect(instance).to.have.property('writeTimeout');
        // expect(instance.writeTimeout).to.be(expectedValueLiteral);
      });

    });
  });

}));
