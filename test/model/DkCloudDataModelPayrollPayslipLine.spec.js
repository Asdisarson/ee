/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelPayrollPayslipLine', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelPayrollPayslipLine();
      });

      it('should create an instance of DkCloudDataModelPayrollPayslipLine', function() {
        // TODO: update the code to test DkCloudDataModelPayrollPayslipLine
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelPayrollPayslipLine);
      });

      it('should have the property sequence (base name: "Sequence")', function() {
        // TODO: update the code to test the property sequence
        expect(instance).to.have.property('sequence');
        // expect(instance.sequence).to.be(expectedValueLiteral);
      });

      it('should have the property payTable (base name: "PayTable")', function() {
        // TODO: update the code to test the property payTable
        expect(instance).to.have.property('payTable');
        // expect(instance.payTable).to.be(expectedValueLiteral);
      });

      it('should have the property paymentCode (base name: "PaymentCode")', function() {
        // TODO: update the code to test the property paymentCode
        expect(instance).to.have.property('paymentCode');
        // expect(instance.paymentCode).to.be(expectedValueLiteral);
      });

      it('should have the property paymentCodeType (base name: "PaymentCodeType")', function() {
        // TODO: update the code to test the property paymentCodeType
        expect(instance).to.have.property('paymentCodeType');
        // expect(instance.paymentCodeType).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property units (base name: "Units")', function() {
        // TODO: update the code to test the property units
        expect(instance).to.have.property('units');
        // expect(instance.units).to.be(expectedValueLiteral);
      });

      it('should have the property unitRate (base name: "UnitRate")', function() {
        // TODO: update the code to test the property unitRate
        expect(instance).to.have.property('unitRate');
        // expect(instance.unitRate).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "Amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property from (base name: "From")', function() {
        // TODO: update the code to test the property from
        expect(instance).to.have.property('from');
        // expect(instance.from).to.be(expectedValueLiteral);
      });

      it('should have the property to (base name: "To")', function() {
        // TODO: update the code to test the property to
        expect(instance).to.have.property('to');
        // expect(instance.to).to.be(expectedValueLiteral);
      });

      it('should have the property extraJob (base name: "ExtraJob")', function() {
        // TODO: update the code to test the property extraJob
        expect(instance).to.have.property('extraJob');
        // expect(instance.extraJob).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property linkedTo (base name: "LinkedTo")', function() {
        // TODO: update the code to test the property linkedTo
        expect(instance).to.have.property('linkedTo');
        // expect(instance.linkedTo).to.be(expectedValueLiteral);
      });

      it('should have the property objectDate (base name: "ObjectDate")', function() {
        // TODO: update the code to test the property objectDate
        expect(instance).to.have.property('objectDate');
        // expect(instance.objectDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "Deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

    });
  });

}));
