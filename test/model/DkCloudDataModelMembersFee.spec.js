/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelMembersFee', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelMembersFee();
      });

      it('should create an instance of DkCloudDataModelMembersFee', function() {
        // TODO: update the code to test DkCloudDataModelMembersFee
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelMembersFee);
      });

      it('should have the property period (base name: "Period")', function() {
        // TODO: update the code to test the property period
        expect(instance).to.have.property('period');
        // expect(instance.period).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "Discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property payment (base name: "Payment")', function() {
        // TODO: update the code to test the property payment
        expect(instance).to.have.property('payment');
        // expect(instance.payment).to.be(expectedValueLiteral);
      });

      it('should have the property disabled (base name: "Disabled")', function() {
        // TODO: update the code to test the property disabled
        expect(instance).to.have.property('disabled');
        // expect(instance.disabled).to.be(expectedValueLiteral);
      });

      it('should have the property rateMonth (base name: "RateMonth")', function() {
        // TODO: update the code to test the property rateMonth
        expect(instance).to.have.property('rateMonth');
        // expect(instance.rateMonth).to.be(expectedValueLiteral);
      });

      it('should have the property intrestRate (base name: "IntrestRate")', function() {
        // TODO: update the code to test the property intrestRate
        expect(instance).to.have.property('intrestRate');
        // expect(instance.intrestRate).to.be(expectedValueLiteral);
      });

      it('should have the property interval (base name: "Interval")', function() {
        // TODO: update the code to test the property interval
        expect(instance).to.have.property('interval');
        // expect(instance.interval).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property campaign (base name: "Campaign")', function() {
        // TODO: update the code to test the property campaign
        expect(instance).to.have.property('campaign');
        // expect(instance.campaign).to.be(expectedValueLiteral);
      });

      it('should have the property feeType (base name: "FeeType")', function() {
        // TODO: update the code to test the property feeType
        expect(instance).to.have.property('feeType');
        // expect(instance.feeType).to.be(expectedValueLiteral);
      });

      it('should have the property memo (base name: "Memo")', function() {
        // TODO: update the code to test the property memo
        expect(instance).to.have.property('memo');
        // expect(instance.memo).to.be(expectedValueLiteral);
      });

      it('should have the property reductionPayment (base name: "ReductionPayment")', function() {
        // TODO: update the code to test the property reductionPayment
        expect(instance).to.have.property('reductionPayment');
        // expect(instance.reductionPayment).to.be(expectedValueLiteral);
      });

      it('should have the property contactName (base name: "ContactName")', function() {
        // TODO: update the code to test the property contactName
        expect(instance).to.have.property('contactName');
        // expect(instance.contactName).to.be(expectedValueLiteral);
      });

      it('should have the property saleperson (base name: "Saleperson")', function() {
        // TODO: update the code to test the property saleperson
        expect(instance).to.have.property('saleperson');
        // expect(instance.saleperson).to.be(expectedValueLiteral);
      });

      it('should have the property rateSplit (base name: "RateSplit")', function() {
        // TODO: update the code to test the property rateSplit
        expect(instance).to.have.property('rateSplit');
        // expect(instance.rateSplit).to.be(expectedValueLiteral);
      });

      it('should have the property creditCard (base name: "CreditCard")', function() {
        // TODO: update the code to test the property creditCard
        expect(instance).to.have.property('creditCard');
        // expect(instance.creditCard).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "Amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property itemCode (base name: "ItemCode")', function() {
        // TODO: update the code to test the property itemCode
        expect(instance).to.have.property('itemCode');
        // expect(instance.itemCode).to.be(expectedValueLiteral);
      });

      it('should have the property payer (base name: "Payer")', function() {
        // TODO: update the code to test the property payer
        expect(instance).to.have.property('payer');
        // expect(instance.payer).to.be(expectedValueLiteral);
      });

      it('should have the property properties (base name: "Properties")', function() {
        // TODO: update the code to test the property properties
        expect(instance).to.have.property('properties');
        // expect(instance.properties).to.be(expectedValueLiteral);
      });

    });
  });

}));
