/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelTimeClockEntryModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelTimeClockEntryModel();
      });

      it('should create an instance of DkCloudDataModelTimeClockEntryModel', function() {
        // TODO: update the code to test DkCloudDataModelTimeClockEntryModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelTimeClockEntryModel);
      });

      it('should have the property ID (base name: "ID")', function() {
        // TODO: update the code to test the property ID
        expect(instance).to.have.property('ID');
        // expect(instance.ID).to.be(expectedValueLiteral);
      });

      it('should have the property employee (base name: "Employee")', function() {
        // TODO: update the code to test the property employee
        expect(instance).to.have.property('employee');
        // expect(instance.employee).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property project (base name: "Project")', function() {
        // TODO: update the code to test the property project
        expect(instance).to.have.property('project');
        // expect(instance.project).to.be(expectedValueLiteral);
      });

      it('should have the property phase (base name: "Phase")', function() {
        // TODO: update the code to test the property phase
        expect(instance).to.have.property('phase');
        // expect(instance.phase).to.be(expectedValueLiteral);
      });

      it('should have the property task (base name: "Task")', function() {
        // TODO: update the code to test the property task
        expect(instance).to.have.property('task');
        // expect(instance.task).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "Comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property currentStatus (base name: "CurrentStatus")', function() {
        // TODO: update the code to test the property currentStatus
        expect(instance).to.have.property('currentStatus');
        // expect(instance.currentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property entryType (base name: "EntryType")', function() {
        // TODO: update the code to test the property entryType
        expect(instance).to.have.property('entryType');
        // expect(instance.entryType).to.be(expectedValueLiteral);
      });

      it('should have the property start (base name: "Start")', function() {
        // TODO: update the code to test the property start
        expect(instance).to.have.property('start');
        // expect(instance.start).to.be(expectedValueLiteral);
      });

      it('should have the property end (base name: "End")', function() {
        // TODO: update the code to test the property end
        expect(instance).to.have.property('end');
        // expect(instance.end).to.be(expectedValueLiteral);
      });

      it('should have the property actualStart (base name: "ActualStart")', function() {
        // TODO: update the code to test the property actualStart
        expect(instance).to.have.property('actualStart');
        // expect(instance.actualStart).to.be(expectedValueLiteral);
      });

      it('should have the property actualEnd (base name: "ActualEnd")', function() {
        // TODO: update the code to test the property actualEnd
        expect(instance).to.have.property('actualEnd');
        // expect(instance.actualEnd).to.be(expectedValueLiteral);
      });

      it('should have the property totalHours (base name: "TotalHours")', function() {
        // TODO: update the code to test the property totalHours
        expect(instance).to.have.property('totalHours');
        // expect(instance.totalHours).to.be(expectedValueLiteral);
      });

      it('should have the property actualTotalHours (base name: "ActualTotalHours")', function() {
        // TODO: update the code to test the property actualTotalHours
        expect(instance).to.have.property('actualTotalHours');
        // expect(instance.actualTotalHours).to.be(expectedValueLiteral);
      });

      it('should have the property totalMinutes (base name: "TotalMinutes")', function() {
        // TODO: update the code to test the property totalMinutes
        expect(instance).to.have.property('totalMinutes');
        // expect(instance.totalMinutes).to.be(expectedValueLiteral);
      });

      it('should have the property actualTotalMinutes (base name: "ActualTotalMinutes")', function() {
        // TODO: update the code to test the property actualTotalMinutes
        expect(instance).to.have.property('actualTotalMinutes');
        // expect(instance.actualTotalMinutes).to.be(expectedValueLiteral);
      });

      it('should have the property lines (base name: "Lines")', function() {
        // TODO: update the code to test the property lines
        expect(instance).to.have.property('lines');
        // expect(instance.lines).to.be(expectedValueLiteral);
      });

      it('should have the property processed (base name: "Processed")', function() {
        // TODO: update the code to test the property processed
        expect(instance).to.have.property('processed');
        // expect(instance.processed).to.be(expectedValueLiteral);
      });

      it('should have the property processedJournal (base name: "ProcessedJournal")', function() {
        // TODO: update the code to test the property processedJournal
        expect(instance).to.have.property('processedJournal');
        // expect(instance.processedJournal).to.be(expectedValueLiteral);
      });

    });
  });

}));
