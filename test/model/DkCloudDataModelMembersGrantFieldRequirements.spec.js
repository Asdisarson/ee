/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelMembersGrantFieldRequirements', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelMembersGrantFieldRequirements();
      });

      it('should create an instance of DkCloudDataModelMembersGrantFieldRequirements', function() {
        // TODO: update the code to test DkCloudDataModelMembersGrantFieldRequirements
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelMembersGrantFieldRequirements);
      });

      it('should have the property amount (base name: "Amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "Comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property grantCount (base name: "GrantCount")', function() {
        // TODO: update the code to test the property grantCount
        expect(instance).to.have.property('grantCount');
        // expect(instance.grantCount).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "Location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property organizer (base name: "Organizer")', function() {
        // TODO: update the code to test the property organizer
        expect(instance).to.have.property('organizer');
        // expect(instance.organizer).to.be(expectedValueLiteral);
      });

      it('should have the property period (base name: "Period")', function() {
        // TODO: update the code to test the property period
        expect(instance).to.have.property('period');
        // expect(instance.period).to.be(expectedValueLiteral);
      });

      it('should have the property periodToRequired (base name: "PeriodToRequired")', function() {
        // TODO: update the code to test the property periodToRequired
        expect(instance).to.have.property('periodToRequired');
        // expect(instance.periodToRequired).to.be(expectedValueLiteral);
      });

      it('should have the property purpose (base name: "Purpose")', function() {
        // TODO: update the code to test the property purpose
        expect(instance).to.have.property('purpose');
        // expect(instance.purpose).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property text1 (base name: "Text1")', function() {
        // TODO: update the code to test the property text1
        expect(instance).to.have.property('text1');
        // expect(instance.text1).to.be(expectedValueLiteral);
      });

      it('should have the property text2 (base name: "Text2")', function() {
        // TODO: update the code to test the property text2
        expect(instance).to.have.property('text2');
        // expect(instance.text2).to.be(expectedValueLiteral);
      });

      it('should have the property unitCount (base name: "UnitCount")', function() {
        // TODO: update the code to test the property unitCount
        expect(instance).to.have.property('unitCount');
        // expect(instance.unitCount).to.be(expectedValueLiteral);
      });

      it('should have the property fundCodeRequired (base name: "FundCodeRequired")', function() {
        // TODO: update the code to test the property fundCodeRequired
        expect(instance).to.have.property('fundCodeRequired');
        // expect(instance.fundCodeRequired).to.be(expectedValueLiteral);
      });

      it('should have the property grantRequired (base name: "GrantRequired")', function() {
        // TODO: update the code to test the property grantRequired
        expect(instance).to.have.property('grantRequired');
        // expect(instance.grantRequired).to.be(expectedValueLiteral);
      });

      it('should have the property jobRatioRequired (base name: "JobRatioRequired")', function() {
        // TODO: update the code to test the property jobRatioRequired
        expect(instance).to.have.property('jobRatioRequired');
        // expect(instance.jobRatioRequired).to.be(expectedValueLiteral);
      });

      it('should have the property jobTitleRequired (base name: "JobTitleRequired")', function() {
        // TODO: update the code to test the property jobTitleRequired
        expect(instance).to.have.property('jobTitleRequired');
        // expect(instance.jobTitleRequired).to.be(expectedValueLiteral);
      });

      it('should have the property memberRequired (base name: "MemberRequired")', function() {
        // TODO: update the code to test the property memberRequired
        expect(instance).to.have.property('memberRequired');
        // expect(instance.memberRequired).to.be(expectedValueLiteral);
      });

      it('should have the property workplaceRequired (base name: "WorkplaceRequired")', function() {
        // TODO: update the code to test the property workplaceRequired
        expect(instance).to.have.property('workplaceRequired');
        // expect(instance.workplaceRequired).to.be(expectedValueLiteral);
      });

      it('should have the property wPHistoryJobRatioRequired (base name: "WPHistoryJobRatioRequired")', function() {
        // TODO: update the code to test the property wPHistoryJobRatioRequired
        expect(instance).to.have.property('wPHistoryJobRatioRequired');
        // expect(instance.wPHistoryJobRatioRequired).to.be(expectedValueLiteral);
      });

      it('should have the property wPHistoryRequired (base name: "WPHistoryRequired")', function() {
        // TODO: update the code to test the property wPHistoryRequired
        expect(instance).to.have.property('wPHistoryRequired');
        // expect(instance.wPHistoryRequired).to.be(expectedValueLiteral);
      });

    });
  });

}));
