/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelMembersMember', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelMembersMember();
      });

      it('should create an instance of DkCloudDataModelMembersMember', function() {
        // TODO: update the code to test DkCloudDataModelMembersMember
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelMembersMember);
      });

      it('should have the property ID (base name: "ID")', function() {
        // TODO: update the code to test the property ID
        expect(instance).to.have.property('ID');
        // expect(instance.ID).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property sSNumber (base name: "SSNumber")', function() {
        // TODO: update the code to test the property sSNumber
        expect(instance).to.have.property('sSNumber');
        // expect(instance.sSNumber).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "Address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property contactDetail (base name: "ContactDetail")', function() {
        // TODO: update the code to test the property contactDetail
        expect(instance).to.have.property('contactDetail');
        // expect(instance.contactDetail).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "Password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "Group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "Tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property salesPerson (base name: "SalesPerson")', function() {
        // TODO: update the code to test the property salesPerson
        expect(instance).to.have.property('salesPerson');
        // expect(instance.salesPerson).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "Discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property paymentType (base name: "PaymentType")', function() {
        // TODO: update the code to test the property paymentType
        expect(instance).to.have.property('paymentType');
        // expect(instance.paymentType).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "CurrencyCode")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property noVat (base name: "NoVat")', function() {
        // TODO: update the code to test the property noVat
        expect(instance).to.have.property('noVat');
        // expect(instance.noVat).to.be(expectedValueLiteral);
      });

      it('should have the property ledgerCode (base name: "LedgerCode")', function() {
        // TODO: update the code to test the property ledgerCode
        expect(instance).to.have.property('ledgerCode');
        // expect(instance.ledgerCode).to.be(expectedValueLiteral);
      });

      it('should have the property points (base name: "Points")', function() {
        // TODO: update the code to test the property points
        expect(instance).to.have.property('points');
        // expect(instance.points).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccount (base name: "BankAccount")', function() {
        // TODO: update the code to test the property bankAccount
        expect(instance).to.have.property('bankAccount');
        // expect(instance.bankAccount).to.be(expectedValueLiteral);
      });

      it('should have the property creditCard (base name: "CreditCard")', function() {
        // TODO: update the code to test the property creditCard
        expect(instance).to.have.property('creditCard');
        // expect(instance.creditCard).to.be(expectedValueLiteral);
      });

      it('should have the property statistics (base name: "Statistics")', function() {
        // TODO: update the code to test the property statistics
        expect(instance).to.have.property('statistics');
        // expect(instance.statistics).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "Gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMode (base name: "PaymentMode")', function() {
        // TODO: update the code to test the property paymentMode
        expect(instance).to.have.property('paymentMode');
        // expect(instance.paymentMode).to.be(expectedValueLiteral);
      });

      it('should have the property hasConfirmedTerms (base name: "HasConfirmedTerms")', function() {
        // TODO: update the code to test the property hasConfirmedTerms
        expect(instance).to.have.property('hasConfirmedTerms');
        // expect(instance.hasConfirmedTerms).to.be(expectedValueLiteral);
      });

      it('should have the property confirmedTermId (base name: "ConfirmedTermId")', function() {
        // TODO: update the code to test the property confirmedTermId
        expect(instance).to.have.property('confirmedTermId');
        // expect(instance.confirmedTermId).to.be(expectedValueLiteral);
      });

      it('should have the property extraProperties (base name: "ExtraProperties")', function() {
        // TODO: update the code to test the property extraProperties
        expect(instance).to.have.property('extraProperties');
        // expect(instance.extraProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
