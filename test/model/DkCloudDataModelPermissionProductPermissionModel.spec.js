/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelPermissionProductPermissionModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelPermissionProductPermissionModel();
      });

      it('should create an instance of DkCloudDataModelPermissionProductPermissionModel', function() {
        // TODO: update the code to test DkCloudDataModelPermissionProductPermissionModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelPermissionProductPermissionModel);
      });

      it('should have the property products (base name: "Products")', function() {
        // TODO: update the code to test the property products
        expect(instance).to.have.property('products');
        // expect(instance.products).to.be(expectedValueLiteral);
      });

      it('should have the property productReport (base name: "ProductReport")', function() {
        // TODO: update the code to test the property productReport
        expect(instance).to.have.property('productReport');
        // expect(instance.productReport).to.be(expectedValueLiteral);
      });

      it('should have the property barcodes (base name: "Barcodes")', function() {
        // TODO: update the code to test the property barcodes
        expect(instance).to.have.property('barcodes');
        // expect(instance.barcodes).to.be(expectedValueLiteral);
      });

      it('should have the property warehouses (base name: "Warehouses")', function() {
        // TODO: update the code to test the property warehouses
        expect(instance).to.have.property('warehouses');
        // expect(instance.warehouses).to.be(expectedValueLiteral);
      });

      it('should have the property attachments (base name: "Attachments")', function() {
        // TODO: update the code to test the property attachments
        expect(instance).to.have.property('attachments');
        // expect(instance.attachments).to.be(expectedValueLiteral);
      });

      it('should have the property foreignPrice (base name: "ForeignPrice")', function() {
        // TODO: update the code to test the property foreignPrice
        expect(instance).to.have.property('foreignPrice');
        // expect(instance.foreignPrice).to.be(expectedValueLiteral);
      });

      it('should have the property units (base name: "Units")', function() {
        // TODO: update the code to test the property units
        expect(instance).to.have.property('units');
        // expect(instance.units).to.be(expectedValueLiteral);
      });

      it('should have the property changes (base name: "Changes")', function() {
        // TODO: update the code to test the property changes
        expect(instance).to.have.property('changes');
        // expect(instance.changes).to.be(expectedValueLiteral);
      });

      it('should have the property settings (base name: "Settings")', function() {
        // TODO: update the code to test the property settings
        expect(instance).to.have.property('settings');
        // expect(instance.settings).to.be(expectedValueLiteral);
      });

      it('should have the property costPrices (base name: "CostPrices")', function() {
        // TODO: update the code to test the property costPrices
        expect(instance).to.have.property('costPrices');
        // expect(instance.costPrices).to.be(expectedValueLiteral);
      });

      it('should have the property transactions (base name: "Transactions")', function() {
        // TODO: update the code to test the property transactions
        expect(instance).to.have.property('transactions');
        // expect(instance.transactions).to.be(expectedValueLiteral);
      });

      it('should have the property hideColumns (base name: "HideColumns")', function() {
        // TODO: update the code to test the property hideColumns
        expect(instance).to.have.property('hideColumns');
        // expect(instance.hideColumns).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "Enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

    });
  });

}));
