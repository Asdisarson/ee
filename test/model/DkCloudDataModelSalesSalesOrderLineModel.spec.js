/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelSalesSalesOrderLineModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelSalesSalesOrderLineModel();
      });

      it('should create an instance of DkCloudDataModelSalesSalesOrderLineModel', function() {
        // TODO: update the code to test DkCloudDataModelSalesSalesOrderLineModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesOrderLineModel);
      });

      it('should have the property sequenceNumber (base name: "SequenceNumber")', function() {
        // TODO: update the code to test the property sequenceNumber
        expect(instance).to.have.property('sequenceNumber');
        // expect(instance.sequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property itemCode (base name: "ItemCode")', function() {
        // TODO: update the code to test the property itemCode
        expect(instance).to.have.property('itemCode');
        // expect(instance.itemCode).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "Text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property text2 (base name: "Text2")', function() {
        // TODO: update the code to test the property text2
        expect(instance).to.have.property('text2');
        // expect(instance.text2).to.be(expectedValueLiteral);
      });

      it('should have the property warehouse (base name: "Warehouse")', function() {
        // TODO: update the code to test the property warehouse
        expect(instance).to.have.property('warehouse');
        // expect(instance.warehouse).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "Location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "Quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property quantityDelivered (base name: "QuantityDelivered")', function() {
        // TODO: update the code to test the property quantityDelivered
        expect(instance).to.have.property('quantityDelivered');
        // expect(instance.quantityDelivered).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice (base name: "UnitPrice")', function() {
        // TODO: update the code to test the property unitPrice
        expect(instance).to.have.property('unitPrice');
        // expect(instance.unitPrice).to.be(expectedValueLiteral);
      });

      it('should have the property unitPriceWithTax (base name: "UnitPriceWithTax")', function() {
        // TODO: update the code to test the property unitPriceWithTax
        expect(instance).to.have.property('unitPriceWithTax');
        // expect(instance.unitPriceWithTax).to.be(expectedValueLiteral);
      });

      it('should have the property unitCode (base name: "UnitCode")', function() {
        // TODO: update the code to test the property unitCode
        expect(instance).to.have.property('unitCode');
        // expect(instance.unitCode).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "Discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property discountPercent (base name: "DiscountPercent")', function() {
        // TODO: update the code to test the property discountPercent
        expect(instance).to.have.property('discountPercent');
        // expect(instance.discountPercent).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmountWithTax (base name: "TotalAmountWithTax")', function() {
        // TODO: update the code to test the property totalAmountWithTax
        expect(instance).to.have.property('totalAmountWithTax');
        // expect(instance.totalAmountWithTax).to.be(expectedValueLiteral);
      });

      it('should have the property barCode (base name: "BarCode")', function() {
        // TODO: update the code to test the property barCode
        expect(instance).to.have.property('barCode');
        // expect(instance.barCode).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property eDIOrderNumber (base name: "EDIOrderNumber")', function() {
        // TODO: update the code to test the property eDIOrderNumber
        expect(instance).to.have.property('eDIOrderNumber');
        // expect(instance.eDIOrderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property uNDOrderNumber (base name: "UNDOrderNumber")', function() {
        // TODO: update the code to test the property uNDOrderNumber
        expect(instance).to.have.property('uNDOrderNumber');
        // expect(instance.uNDOrderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property memo (base name: "Memo")', function() {
        // TODO: update the code to test the property memo
        expect(instance).to.have.property('memo');
        // expect(instance.memo).to.be(expectedValueLiteral);
      });

    });
  });

}));
