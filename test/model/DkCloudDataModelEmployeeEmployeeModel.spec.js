/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelEmployeeEmployeeModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelEmployeeEmployeeModel();
      });

      it('should create an instance of DkCloudDataModelEmployeeEmployeeModel', function() {
        // TODO: update the code to test DkCloudDataModelEmployeeEmployeeModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelEmployeeEmployeeModel);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property address1 (base name: "Address1")', function() {
        // TODO: update the code to test the property address1
        expect(instance).to.have.property('address1');
        // expect(instance.address1).to.be(expectedValueLiteral);
      });

      it('should have the property address2 (base name: "Address2")', function() {
        // TODO: update the code to test the property address2
        expect(instance).to.have.property('address2');
        // expect(instance.address2).to.be(expectedValueLiteral);
      });

      it('should have the property address3 (base name: "Address3")', function() {
        // TODO: update the code to test the property address3
        expect(instance).to.have.property('address3');
        // expect(instance.address3).to.be(expectedValueLiteral);
      });

      it('should have the property zipCode (base name: "ZipCode")', function() {
        // TODO: update the code to test the property zipCode
        expect(instance).to.have.property('zipCode');
        // expect(instance.zipCode).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "City")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property countryCode (base name: "CountryCode")', function() {
        // TODO: update the code to test the property countryCode
        expect(instance).to.have.property('countryCode');
        // expect(instance.countryCode).to.be(expectedValueLiteral);
      });

      it('should have the property sSNumber (base name: "SSNumber")', function() {
        // TODO: update the code to test the property sSNumber
        expect(instance).to.have.property('sSNumber');
        // expect(instance.sSNumber).to.be(expectedValueLiteral);
      });

      it('should have the property comment (base name: "Comment")', function() {
        // TODO: update the code to test the property comment
        expect(instance).to.have.property('comment');
        // expect(instance.comment).to.be(expectedValueLiteral);
      });

      it('should have the property stampStatus (base name: "StampStatus")', function() {
        // TODO: update the code to test the property stampStatus
        expect(instance).to.have.property('stampStatus');
        // expect(instance.stampStatus).to.be(expectedValueLiteral);
      });

      it('should have the property stampType (base name: "StampType")', function() {
        // TODO: update the code to test the property stampType
        expect(instance).to.have.property('stampType');
        // expect(instance.stampType).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "Phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property phoneLocal (base name: "PhoneLocal")', function() {
        // TODO: update the code to test the property phoneLocal
        expect(instance).to.have.property('phoneLocal');
        // expect(instance.phoneLocal).to.be(expectedValueLiteral);
      });

      it('should have the property phoneMobile (base name: "PhoneMobile")', function() {
        // TODO: update the code to test the property phoneMobile
        expect(instance).to.have.property('phoneMobile');
        // expect(instance.phoneMobile).to.be(expectedValueLiteral);
      });

      it('should have the property fax (base name: "Fax")', function() {
        // TODO: update the code to test the property fax
        expect(instance).to.have.property('fax');
        // expect(instance.fax).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "Email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "Url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "Tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property supervisor (base name: "Supervisor")', function() {
        // TODO: update the code to test the property supervisor
        expect(instance).to.have.property('supervisor');
        // expect(instance.supervisor).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "Gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "Group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property spouseName (base name: "SpouseName")', function() {
        // TODO: update the code to test the property spouseName
        expect(instance).to.have.property('spouseName');
        // expect(instance.spouseName).to.be(expectedValueLiteral);
      });

      it('should have the property shortName (base name: "ShortName")', function() {
        // TODO: update the code to test the property shortName
        expect(instance).to.have.property('shortName');
        // expect(instance.shortName).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property scanTag (base name: "ScanTag")', function() {
        // TODO: update the code to test the property scanTag
        expect(instance).to.have.property('scanTag');
        // expect(instance.scanTag).to.be(expectedValueLiteral);
      });

      it('should have the property bankAccount (base name: "BankAccount")', function() {
        // TODO: update the code to test the property bankAccount
        expect(instance).to.have.property('bankAccount');
        // expect(instance.bankAccount).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "Deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property salaryCode (base name: "SalaryCode")', function() {
        // TODO: update the code to test the property salaryCode
        expect(instance).to.have.property('salaryCode');
        // expect(instance.salaryCode).to.be(expectedValueLiteral);
      });

      it('should have the property paymentFrequency (base name: "PaymentFrequency")', function() {
        // TODO: update the code to test the property paymentFrequency
        expect(instance).to.have.property('paymentFrequency');
        // expect(instance.paymentFrequency).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMode (base name: "PaymentMode")', function() {
        // TODO: update the code to test the property paymentMode
        expect(instance).to.have.property('paymentMode');
        // expect(instance.paymentMode).to.be(expectedValueLiteral);
      });

      it('should have the property istarf95 (base name: "Istarf95")', function() {
        // TODO: update the code to test the property istarf95
        expect(instance).to.have.property('istarf95');
        // expect(instance.istarf95).to.be(expectedValueLiteral);
      });

      it('should have the property iSAT95Status (base name: "ISAT95Status")', function() {
        // TODO: update the code to test the property iSAT95Status
        expect(instance).to.have.property('iSAT95Status');
        // expect(instance.iSAT95Status).to.be(expectedValueLiteral);
      });

      it('should have the property itemCodeForDayTime (base name: "ItemCodeForDayTime")', function() {
        // TODO: update the code to test the property itemCodeForDayTime
        expect(instance).to.have.property('itemCodeForDayTime');
        // expect(instance.itemCodeForDayTime).to.be(expectedValueLiteral);
      });

      it('should have the property itemCodeForOverTime (base name: "ItemCodeForOverTime")', function() {
        // TODO: update the code to test the property itemCodeForOverTime
        expect(instance).to.have.property('itemCodeForOverTime');
        // expect(instance.itemCodeForOverTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
