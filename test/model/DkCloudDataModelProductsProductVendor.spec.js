/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelProductsProductVendor', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelProductsProductVendor();
      });

      it('should create an instance of DkCloudDataModelProductsProductVendor', function() {
        // TODO: update the code to test DkCloudDataModelProductsProductVendor
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelProductsProductVendor);
      });

      it('should have the property itemCode (base name: "ItemCode")', function() {
        // TODO: update the code to test the property itemCode
        expect(instance).to.have.property('itemCode');
        // expect(instance.itemCode).to.be(expectedValueLiteral);
      });

      it('should have the property vendor (base name: "Vendor")', function() {
        // TODO: update the code to test the property vendor
        expect(instance).to.have.property('vendor');
        // expect(instance.vendor).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property primarySupplier (base name: "PrimarySupplier")', function() {
        // TODO: update the code to test the property primarySupplier
        expect(instance).to.have.property('primarySupplier');
        // expect(instance.primarySupplier).to.be(expectedValueLiteral);
      });

      it('should have the property lastPurchasedDate (base name: "LastPurchasedDate")', function() {
        // TODO: update the code to test the property lastPurchasedDate
        expect(instance).to.have.property('lastPurchasedDate');
        // expect(instance.lastPurchasedDate).to.be(expectedValueLiteral);
      });

      it('should have the property lastPurchasedPrice (base name: "LastPurchasedPrice")', function() {
        // TODO: update the code to test the property lastPurchasedPrice
        expect(instance).to.have.property('lastPurchasedPrice');
        // expect(instance.lastPurchasedPrice).to.be(expectedValueLiteral);
      });

      it('should have the property lastPurchasedQuantity (base name: "LastPurchasedQuantity")', function() {
        // TODO: update the code to test the property lastPurchasedQuantity
        expect(instance).to.have.property('lastPurchasedQuantity');
        // expect(instance.lastPurchasedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property purchasedDiscount (base name: "PurchasedDiscount")', function() {
        // TODO: update the code to test the property purchasedDiscount
        expect(instance).to.have.property('purchasedDiscount');
        // expect(instance.purchasedDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "Price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

    });
  });

}));
