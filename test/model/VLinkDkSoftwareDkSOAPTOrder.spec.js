/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('VLinkDkSoftwareDkSOAPTOrder', function() {
      beforeEach(function() {
        instance = new DkPlusApi.VLinkDkSoftwareDkSOAPTOrder();
      });

      it('should create an instance of VLinkDkSoftwareDkSOAPTOrder', function() {
        // TODO: update the code to test VLinkDkSoftwareDkSOAPTOrder
        expect(instance).to.be.a(DkPlusApi.VLinkDkSoftwareDkSOAPTOrder);
      });

      it('should have the property recordCreated (base name: "RecordCreated")', function() {
        // TODO: update the code to test the property recordCreated
        expect(instance).to.have.property('recordCreated');
        // expect(instance.recordCreated).to.be(expectedValueLiteral);
      });

      it('should have the property recordModified (base name: "RecordModified")', function() {
        // TODO: update the code to test the property recordModified
        expect(instance).to.have.property('recordModified');
        // expect(instance.recordModified).to.be(expectedValueLiteral);
      });

      it('should have the property recordID (base name: "RecordID")', function() {
        // TODO: update the code to test the property recordID
        expect(instance).to.have.property('recordID');
        // expect(instance.recordID).to.be(expectedValueLiteral);
      });

      it('should have the property orderNumber (base name: "OrderNumber")', function() {
        // TODO: update the code to test the property orderNumber
        expect(instance).to.have.property('orderNumber');
        // expect(instance.orderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property customerNumber (base name: "CustomerNumber")', function() {
        // TODO: update the code to test the property customerNumber
        expect(instance).to.have.property('customerNumber');
        // expect(instance.customerNumber).to.be(expectedValueLiteral);
      });

      it('should have the property customer (base name: "Customer")', function() {
        // TODO: update the code to test the property customer
        expect(instance).to.have.property('customer');
        // expect(instance.customer).to.be(expectedValueLiteral);
      });

      it('should have the property orderDate (base name: "OrderDate")', function() {
        // TODO: update the code to test the property orderDate
        expect(instance).to.have.property('orderDate');
        // expect(instance.orderDate).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "DueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property salePerson (base name: "SalePerson")', function() {
        // TODO: update the code to test the property salePerson
        expect(instance).to.have.property('salePerson');
        // expect(instance.salePerson).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property itemReceiver (base name: "ItemReceiver")', function() {
        // TODO: update the code to test the property itemReceiver
        expect(instance).to.have.property('itemReceiver');
        // expect(instance.itemReceiver).to.be(expectedValueLiteral);
      });

      it('should have the property contact (base name: "Contact")', function() {
        // TODO: update the code to test the property contact
        expect(instance).to.have.property('contact');
        // expect(instance.contact).to.be(expectedValueLiteral);
      });

      it('should have the property lines (base name: "Lines")', function() {
        // TODO: update the code to test the property lines
        expect(instance).to.have.property('lines');
        // expect(instance.lines).to.be(expectedValueLiteral);
      });

      it('should have the property referenceNumber (base name: "ReferenceNumber")', function() {
        // TODO: update the code to test the property referenceNumber
        expect(instance).to.have.property('referenceNumber');
        // expect(instance.referenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property customerOrderNo (base name: "CustomerOrderNo")', function() {
        // TODO: update the code to test the property customerOrderNo
        expect(instance).to.have.property('customerOrderNo');
        // expect(instance.customerOrderNo).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "CurrencyCode")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "Exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property text1 (base name: "Text1")', function() {
        // TODO: update the code to test the property text1
        expect(instance).to.have.property('text1');
        // expect(instance.text1).to.be(expectedValueLiteral);
      });

      it('should have the property text2 (base name: "Text2")', function() {
        // TODO: update the code to test the property text2
        expect(instance).to.have.property('text2');
        // expect(instance.text2).to.be(expectedValueLiteral);
      });

      it('should have the property goodsmarking (base name: "Goodsmarking")', function() {
        // TODO: update the code to test the property goodsmarking
        expect(instance).to.have.property('goodsmarking');
        // expect(instance.goodsmarking).to.be(expectedValueLiteral);
      });

      it('should have the property customerOrderDate (base name: "CustomerOrderDate")', function() {
        // TODO: update the code to test the property customerOrderDate
        expect(instance).to.have.property('customerOrderDate');
        // expect(instance.customerOrderDate).to.be(expectedValueLiteral);
      });

      it('should have the property requestedDeliveryDate (base name: "RequestedDeliveryDate")', function() {
        // TODO: update the code to test the property requestedDeliveryDate
        expect(instance).to.have.property('requestedDeliveryDate');
        // expect(instance.requestedDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property options (base name: "Options")', function() {
        // TODO: update the code to test the property options
        expect(instance).to.have.property('options');
        // expect(instance.options).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryStatus (base name: "DeliveryStatus")', function() {
        // TODO: update the code to test the property deliveryStatus
        expect(instance).to.have.property('deliveryStatus');
        // expect(instance.deliveryStatus).to.be(expectedValueLiteral);
      });

      it('should have the property headOriginType (base name: "HeadOriginType")', function() {
        // TODO: update the code to test the property headOriginType
        expect(instance).to.have.property('headOriginType');
        // expect(instance.headOriginType).to.be(expectedValueLiteral);
      });

      it('should have the property origin (base name: "Origin")', function() {
        // TODO: update the code to test the property origin
        expect(instance).to.have.property('origin');
        // expect(instance.origin).to.be(expectedValueLiteral);
      });

      it('should have the property confirmedDeliveryDate (base name: "ConfirmedDeliveryDate")', function() {
        // TODO: update the code to test the property confirmedDeliveryDate
        expect(instance).to.have.property('confirmedDeliveryDate');
        // expect(instance.confirmedDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property finalDeliveryDate (base name: "FinalDeliveryDate")', function() {
        // TODO: update the code to test the property finalDeliveryDate
        expect(instance).to.have.property('finalDeliveryDate');
        // expect(instance.finalDeliveryDate).to.be(expectedValueLiteral);
      });

      it('should have the property orgSalesOrderDate (base name: "OrgSalesOrderDate")', function() {
        // TODO: update the code to test the property orgSalesOrderDate
        expect(instance).to.have.property('orgSalesOrderDate');
        // expect(instance.orgSalesOrderDate).to.be(expectedValueLiteral);
      });

      it('should have the property extraProperties (base name: "ExtraProperties")', function() {
        // TODO: update the code to test the property extraProperties
        expect(instance).to.have.property('extraProperties');
        // expect(instance.extraProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
