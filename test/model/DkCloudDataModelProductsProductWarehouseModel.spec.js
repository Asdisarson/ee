/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelProductsProductWarehouseModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelProductsProductWarehouseModel();
      });

      it('should create an instance of DkCloudDataModelProductsProductWarehouseModel', function() {
        // TODO: update the code to test DkCloudDataModelProductsProductWarehouseModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelProductsProductWarehouseModel);
      });

      it('should have the property warehouse (base name: "Warehouse")', function() {
        // TODO: update the code to test the property warehouse
        expect(instance).to.have.property('warehouse');
        // expect(instance.warehouse).to.be(expectedValueLiteral);
      });

      it('should have the property subGroup1 (base name: "SubGroup1")', function() {
        // TODO: update the code to test the property subGroup1
        expect(instance).to.have.property('subGroup1');
        // expect(instance.subGroup1).to.be(expectedValueLiteral);
      });

      it('should have the property subGroup2 (base name: "SubGroup2")', function() {
        // TODO: update the code to test the property subGroup2
        expect(instance).to.have.property('subGroup2');
        // expect(instance.subGroup2).to.be(expectedValueLiteral);
      });

      it('should have the property subGroup3 (base name: "SubGroup3")', function() {
        // TODO: update the code to test the property subGroup3
        expect(instance).to.have.property('subGroup3');
        // expect(instance.subGroup3).to.be(expectedValueLiteral);
      });

      it('should have the property subGroup4 (base name: "SubGroup4")', function() {
        // TODO: update the code to test the property subGroup4
        expect(instance).to.have.property('subGroup4');
        // expect(instance.subGroup4).to.be(expectedValueLiteral);
      });

      it('should have the property quantityInStock (base name: "QuantityInStock")', function() {
        // TODO: update the code to test the property quantityInStock
        expect(instance).to.have.property('quantityInStock');
        // expect(instance.quantityInStock).to.be(expectedValueLiteral);
      });

      it('should have the property minimumStock (base name: "MinimumStock")', function() {
        // TODO: update the code to test the property minimumStock
        expect(instance).to.have.property('minimumStock');
        // expect(instance.minimumStock).to.be(expectedValueLiteral);
      });

      it('should have the property maximumStock (base name: "MaximumStock")', function() {
        // TODO: update the code to test the property maximumStock
        expect(instance).to.have.property('maximumStock');
        // expect(instance.maximumStock).to.be(expectedValueLiteral);
      });

      it('should have the property locationInWarehouse (base name: "LocationInWarehouse")', function() {
        // TODO: update the code to test the property locationInWarehouse
        expect(instance).to.have.property('locationInWarehouse');
        // expect(instance.locationInWarehouse).to.be(expectedValueLiteral);
      });

      it('should have the property quantityOnBackOrders (base name: "QuantityOnBackOrders")', function() {
        // TODO: update the code to test the property quantityOnBackOrders
        expect(instance).to.have.property('quantityOnBackOrders');
        // expect(instance.quantityOnBackOrders).to.be(expectedValueLiteral);
      });

      it('should have the property quantityPoOrders (base name: "QuantityPoOrders")', function() {
        // TODO: update the code to test the property quantityPoOrders
        expect(instance).to.have.property('quantityPoOrders');
        // expect(instance.quantityPoOrders).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property variations (base name: "Variations")', function() {
        // TODO: update the code to test the property variations
        expect(instance).to.have.property('variations');
        // expect(instance.variations).to.be(expectedValueLiteral);
      });

    });
  });

}));
