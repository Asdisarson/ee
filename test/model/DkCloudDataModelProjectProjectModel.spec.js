/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelProjectProjectModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelProjectProjectModel();
      });

      it('should create an instance of DkCloudDataModelProjectProjectModel', function() {
        // TODO: update the code to test DkCloudDataModelProjectProjectModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelProjectProjectModel);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "Group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property masterJobNumber (base name: "MasterJobNumber")', function() {
        // TODO: update the code to test the property masterJobNumber
        expect(instance).to.have.property('masterJobNumber');
        // expect(instance.masterJobNumber).to.be(expectedValueLiteral);
      });

      it('should have the property quotationNumber (base name: "QuotationNumber")', function() {
        // TODO: update the code to test the property quotationNumber
        expect(instance).to.have.property('quotationNumber');
        // expect(instance.quotationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property customerToBill (base name: "CustomerToBill")', function() {
        // TODO: update the code to test the property customerToBill
        expect(instance).to.have.property('customerToBill');
        // expect(instance.customerToBill).to.be(expectedValueLiteral);
      });

      it('should have the property customerNameToBill (base name: "CustomerNameToBill")', function() {
        // TODO: update the code to test the property customerNameToBill
        expect(instance).to.have.property('customerNameToBill');
        // expect(instance.customerNameToBill).to.be(expectedValueLiteral);
      });

      it('should have the property customerToRecieve (base name: "CustomerToRecieve")', function() {
        // TODO: update the code to test the property customerToRecieve
        expect(instance).to.have.property('customerToRecieve');
        // expect(instance.customerToRecieve).to.be(expectedValueLiteral);
      });

      it('should have the property founder (base name: "Founder")', function() {
        // TODO: update the code to test the property founder
        expect(instance).to.have.property('founder');
        // expect(instance.founder).to.be(expectedValueLiteral);
      });

      it('should have the property owner (base name: "Owner")', function() {
        // TODO: update the code to test the property owner
        expect(instance).to.have.property('owner');
        // expect(instance.owner).to.be(expectedValueLiteral);
      });

      it('should have the property supervisor (base name: "Supervisor")', function() {
        // TODO: update the code to test the property supervisor
        expect(instance).to.have.property('supervisor');
        // expect(instance.supervisor).to.be(expectedValueLiteral);
      });

      it('should have the property worker (base name: "Worker")', function() {
        // TODO: update the code to test the property worker
        expect(instance).to.have.property('worker');
        // expect(instance.worker).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property dim1Required (base name: "Dim1Required")', function() {
        // TODO: update the code to test the property dim1Required
        expect(instance).to.have.property('dim1Required');
        // expect(instance.dim1Required).to.be(expectedValueLiteral);
      });

      it('should have the property dim2Required (base name: "Dim2Required")', function() {
        // TODO: update the code to test the property dim2Required
        expect(instance).to.have.property('dim2Required');
        // expect(instance.dim2Required).to.be(expectedValueLiteral);
      });

      it('should have the property dim3Required (base name: "Dim3Required")', function() {
        // TODO: update the code to test the property dim3Required
        expect(instance).to.have.property('dim3Required');
        // expect(instance.dim3Required).to.be(expectedValueLiteral);
      });

      it('should have the property foundingDate (base name: "FoundingDate")', function() {
        // TODO: update the code to test the property foundingDate
        expect(instance).to.have.property('foundingDate');
        // expect(instance.foundingDate).to.be(expectedValueLiteral);
      });

      it('should have the property estimatedBeginingDate (base name: "EstimatedBeginingDate")', function() {
        // TODO: update the code to test the property estimatedBeginingDate
        expect(instance).to.have.property('estimatedBeginingDate');
        // expect(instance.estimatedBeginingDate).to.be(expectedValueLiteral);
      });

      it('should have the property estimatedFinishDate (base name: "EstimatedFinishDate")', function() {
        // TODO: update the code to test the property estimatedFinishDate
        expect(instance).to.have.property('estimatedFinishDate');
        // expect(instance.estimatedFinishDate).to.be(expectedValueLiteral);
      });

      it('should have the property actualBeginingDate (base name: "ActualBeginingDate")', function() {
        // TODO: update the code to test the property actualBeginingDate
        expect(instance).to.have.property('actualBeginingDate');
        // expect(instance.actualBeginingDate).to.be(expectedValueLiteral);
      });

      it('should have the property actualFinishDate (base name: "ActualFinishDate")', function() {
        // TODO: update the code to test the property actualFinishDate
        expect(instance).to.have.property('actualFinishDate');
        // expect(instance.actualFinishDate).to.be(expectedValueLiteral);
      });

      it('should have the property optimistDate (base name: "OptimistDate")', function() {
        // TODO: update the code to test the property optimistDate
        expect(instance).to.have.property('optimistDate');
        // expect(instance.optimistDate).to.be(expectedValueLiteral);
      });

      it('should have the property pessimistDate (base name: "PessimistDate")', function() {
        // TODO: update the code to test the property pessimistDate
        expect(instance).to.have.property('pessimistDate');
        // expect(instance.pessimistDate).to.be(expectedValueLiteral);
      });

      it('should have the property jobType (base name: "JobType")', function() {
        // TODO: update the code to test the property jobType
        expect(instance).to.have.property('jobType');
        // expect(instance.jobType).to.be(expectedValueLiteral);
      });

      it('should have the property jobStatus (base name: "JobStatus")', function() {
        // TODO: update the code to test the property jobStatus
        expect(instance).to.have.property('jobStatus');
        // expect(instance.jobStatus).to.be(expectedValueLiteral);
      });

      it('should have the property jobBillingMode (base name: "JobBillingMode")', function() {
        // TODO: update the code to test the property jobBillingMode
        expect(instance).to.have.property('jobBillingMode');
        // expect(instance.jobBillingMode).to.be(expectedValueLiteral);
      });

      it('should have the property phaseId (base name: "PhaseId")', function() {
        // TODO: update the code to test the property phaseId
        expect(instance).to.have.property('phaseId');
        // expect(instance.phaseId).to.be(expectedValueLiteral);
      });

      it('should have the property phaseRequired (base name: "PhaseRequired")', function() {
        // TODO: update the code to test the property phaseRequired
        expect(instance).to.have.property('phaseRequired');
        // expect(instance.phaseRequired).to.be(expectedValueLiteral);
      });

      it('should have the property taskId (base name: "TaskId")', function() {
        // TODO: update the code to test the property taskId
        expect(instance).to.have.property('taskId');
        // expect(instance.taskId).to.be(expectedValueLiteral);
      });

      it('should have the property taskRequired (base name: "TaskRequired")', function() {
        // TODO: update the code to test the property taskRequired
        expect(instance).to.have.property('taskRequired');
        // expect(instance.taskRequired).to.be(expectedValueLiteral);
      });

      it('should have the property foreignName (base name: "ForeignName")', function() {
        // TODO: update the code to test the property foreignName
        expect(instance).to.have.property('foreignName');
        // expect(instance.foreignName).to.be(expectedValueLiteral);
      });

      it('should have the property jobContactName (base name: "JobContactName")', function() {
        // TODO: update the code to test the property jobContactName
        expect(instance).to.have.property('jobContactName');
        // expect(instance.jobContactName).to.be(expectedValueLiteral);
      });

      it('should have the property quotationAmount (base name: "QuotationAmount")', function() {
        // TODO: update the code to test the property quotationAmount
        expect(instance).to.have.property('quotationAmount');
        // expect(instance.quotationAmount).to.be(expectedValueLiteral);
      });

      it('should have the property serialnumber (base name: "Serialnumber")', function() {
        // TODO: update the code to test the property serialnumber
        expect(instance).to.have.property('serialnumber');
        // expect(instance.serialnumber).to.be(expectedValueLiteral);
      });

      it('should have the property quotationAmountWithVAT (base name: "QuotationAmountWithVAT")', function() {
        // TODO: update the code to test the property quotationAmountWithVAT
        expect(instance).to.have.property('quotationAmountWithVAT');
        // expect(instance.quotationAmountWithVAT).to.be(expectedValueLiteral);
      });

      it('should have the property ledgerCode (base name: "LedgerCode")', function() {
        // TODO: update the code to test the property ledgerCode
        expect(instance).to.have.property('ledgerCode');
        // expect(instance.ledgerCode).to.be(expectedValueLiteral);
      });

      it('should have the property discountType (base name: "DiscountType")', function() {
        // TODO: update the code to test the property discountType
        expect(instance).to.have.property('discountType');
        // expect(instance.discountType).to.be(expectedValueLiteral);
      });

      it('should have the property jobDiscountPercent (base name: "JobDiscountPercent")', function() {
        // TODO: update the code to test the property jobDiscountPercent
        expect(instance).to.have.property('jobDiscountPercent');
        // expect(instance.jobDiscountPercent).to.be(expectedValueLiteral);
      });

      it('should have the property discountOfTime (base name: "DiscountOfTime")', function() {
        // TODO: update the code to test the property discountOfTime
        expect(instance).to.have.property('discountOfTime');
        // expect(instance.discountOfTime).to.be(expectedValueLiteral);
      });

      it('should have the property discountOfDriveTime (base name: "DiscountOfDriveTime")', function() {
        // TODO: update the code to test the property discountOfDriveTime
        expect(instance).to.have.property('discountOfDriveTime');
        // expect(instance.discountOfDriveTime).to.be(expectedValueLiteral);
      });

      it('should have the property discountOfCost (base name: "DiscountOfCost")', function() {
        // TODO: update the code to test the property discountOfCost
        expect(instance).to.have.property('discountOfCost');
        // expect(instance.discountOfCost).to.be(expectedValueLiteral);
      });

      it('should have the property foreignPriceForWork (base name: "ForeignPriceForWork")', function() {
        // TODO: update the code to test the property foreignPriceForWork
        expect(instance).to.have.property('foreignPriceForWork');
        // expect(instance.foreignPriceForWork).to.be(expectedValueLiteral);
      });

      it('should have the property skipTaxOnInvoice (base name: "SkipTaxOnInvoice")', function() {
        // TODO: update the code to test the property skipTaxOnInvoice
        expect(instance).to.have.property('skipTaxOnInvoice');
        // expect(instance.skipTaxOnInvoice).to.be(expectedValueLiteral);
      });

      it('should have the property quotationCurrencyCode (base name: "QuotationCurrencyCode")', function() {
        // TODO: update the code to test the property quotationCurrencyCode
        expect(instance).to.have.property('quotationCurrencyCode');
        // expect(instance.quotationCurrencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property quotationWorkingHours (base name: "QuotationWorkingHours")', function() {
        // TODO: update the code to test the property quotationWorkingHours
        expect(instance).to.have.property('quotationWorkingHours');
        // expect(instance.quotationWorkingHours).to.be(expectedValueLiteral);
      });

      it('should have the property quotationWorkingAmount (base name: "QuotationWorkingAmount")', function() {
        // TODO: update the code to test the property quotationWorkingAmount
        expect(instance).to.have.property('quotationWorkingAmount');
        // expect(instance.quotationWorkingAmount).to.be(expectedValueLiteral);
      });

      it('should have the property quotationCostAmount (base name: "QuotationCostAmount")', function() {
        // TODO: update the code to test the property quotationCostAmount
        expect(instance).to.have.property('quotationCostAmount');
        // expect(instance.quotationCostAmount).to.be(expectedValueLiteral);
      });

      it('should have the property quotationLicenceAmount (base name: "QuotationLicenceAmount")', function() {
        // TODO: update the code to test the property quotationLicenceAmount
        expect(instance).to.have.property('quotationLicenceAmount');
        // expect(instance.quotationLicenceAmount).to.be(expectedValueLiteral);
      });

      it('should have the property linkedPhases (base name: "LinkedPhases")', function() {
        // TODO: update the code to test the property linkedPhases
        expect(instance).to.have.property('linkedPhases');
        // expect(instance.linkedPhases).to.be(expectedValueLiteral);
      });

      it('should have the property linkedTasks (base name: "LinkedTasks")', function() {
        // TODO: update the code to test the property linkedTasks
        expect(instance).to.have.property('linkedTasks');
        // expect(instance.linkedTasks).to.be(expectedValueLiteral);
      });

    });
  });

}));
