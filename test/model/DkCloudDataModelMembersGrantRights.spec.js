/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelMembersGrantRights', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelMembersGrantRights();
      });

      it('should create an instance of DkCloudDataModelMembersGrantRights', function() {
        // TODO: update the code to test DkCloudDataModelMembersGrantRights
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelMembersGrantRights);
      });

      it('should have the property type (base name: "Type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property availableAmount (base name: "AvailableAmount")', function() {
        // TODO: update the code to test the property availableAmount
        expect(instance).to.have.property('availableAmount');
        // expect(instance.availableAmount).to.be(expectedValueLiteral);
      });

      it('should have the property availableCount (base name: "AvailableCount")', function() {
        // TODO: update the code to test the property availableCount
        expect(instance).to.have.property('availableCount');
        // expect(instance.availableCount).to.be(expectedValueLiteral);
      });

      it('should have the property conditionFailed (base name: "ConditionFailed")', function() {
        // TODO: update the code to test the property conditionFailed
        expect(instance).to.have.property('conditionFailed');
        // expect(instance.conditionFailed).to.be(expectedValueLiteral);
      });

      it('should have the property maxAmount (base name: "MaxAmount")', function() {
        // TODO: update the code to test the property maxAmount
        expect(instance).to.have.property('maxAmount');
        // expect(instance.maxAmount).to.be(expectedValueLiteral);
      });

      it('should have the property minAmount (base name: "MinAmount")', function() {
        // TODO: update the code to test the property minAmount
        expect(instance).to.have.property('minAmount');
        // expect(instance.minAmount).to.be(expectedValueLiteral);
      });

      it('should have the property ruleAmount (base name: "RuleAmount")', function() {
        // TODO: update the code to test the property ruleAmount
        expect(instance).to.have.property('ruleAmount');
        // expect(instance.ruleAmount).to.be(expectedValueLiteral);
      });

      it('should have the property ruleCount (base name: "RuleCount")', function() {
        // TODO: update the code to test the property ruleCount
        expect(instance).to.have.property('ruleCount');
        // expect(instance.ruleCount).to.be(expectedValueLiteral);
      });

      it('should have the property taxPercent (base name: "TaxPercent")', function() {
        // TODO: update the code to test the property taxPercent
        expect(instance).to.have.property('taxPercent');
        // expect(instance.taxPercent).to.be(expectedValueLiteral);
      });

    });
  });

}));
