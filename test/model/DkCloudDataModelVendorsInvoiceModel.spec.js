/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelVendorsInvoiceModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelVendorsInvoiceModel();
      });

      it('should create an instance of DkCloudDataModelVendorsInvoiceModel', function() {
        // TODO: update the code to test DkCloudDataModelVendorsInvoiceModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelVendorsInvoiceModel);
      });

      it('should have the property ID (base name: "ID")', function() {
        // TODO: update the code to test the property ID
        expect(instance).to.have.property('ID');
        // expect(instance.ID).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property vendor (base name: "Vendor")', function() {
        // TODO: update the code to test the property vendor
        expect(instance).to.have.property('vendor');
        // expect(instance.vendor).to.be(expectedValueLiteral);
      });

      it('should have the property vendorName (base name: "VendorName")', function() {
        // TODO: update the code to test the property vendorName
        expect(instance).to.have.property('vendorName');
        // expect(instance.vendorName).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceNumber (base name: "InvoiceNumber")', function() {
        // TODO: update the code to test the property invoiceNumber
        expect(instance).to.have.property('invoiceNumber');
        // expect(instance.invoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "DueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDate (base name: "InvoiceDate")', function() {
        // TODO: update the code to test the property invoiceDate
        expect(instance).to.have.property('invoiceDate');
        // expect(instance.invoiceDate).to.be(expectedValueLiteral);
      });

      it('should have the property receivedDate (base name: "ReceivedDate")', function() {
        // TODO: update the code to test the property receivedDate
        expect(instance).to.have.property('receivedDate');
        // expect(instance.receivedDate).to.be(expectedValueLiteral);
      });

      it('should have the property voucher (base name: "Voucher")', function() {
        // TODO: update the code to test the property voucher
        expect(instance).to.have.property('voucher');
        // expect(instance.voucher).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "Text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceType (base name: "InvoiceType")', function() {
        // TODO: update the code to test the property invoiceType
        expect(instance).to.have.property('invoiceType');
        // expect(instance.invoiceType).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "Amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "CurrencyCode")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "Exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property origin (base name: "Origin")', function() {
        // TODO: update the code to test the property origin
        expect(instance).to.have.property('origin');
        // expect(instance.origin).to.be(expectedValueLiteral);
      });

      it('should have the property hasAttachment (base name: "HasAttachment")', function() {
        // TODO: update the code to test the property hasAttachment
        expect(instance).to.have.property('hasAttachment');
        // expect(instance.hasAttachment).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property approvedBy1 (base name: "ApprovedBy1")', function() {
        // TODO: update the code to test the property approvedBy1
        expect(instance).to.have.property('approvedBy1');
        // expect(instance.approvedBy1).to.be(expectedValueLiteral);
      });

      it('should have the property fromApprovement1 (base name: "FromApprovement1")', function() {
        // TODO: update the code to test the property fromApprovement1
        expect(instance).to.have.property('fromApprovement1');
        // expect(instance.fromApprovement1).to.be(expectedValueLiteral);
      });

      it('should have the property toApprovement1 (base name: "ToApprovement1")', function() {
        // TODO: update the code to test the property toApprovement1
        expect(instance).to.have.property('toApprovement1');
        // expect(instance.toApprovement1).to.be(expectedValueLiteral);
      });

      it('should have the property approvedStatus1 (base name: "ApprovedStatus1")', function() {
        // TODO: update the code to test the property approvedStatus1
        expect(instance).to.have.property('approvedStatus1');
        // expect(instance.approvedStatus1).to.be(expectedValueLiteral);
      });

      it('should have the property approvedBy2 (base name: "ApprovedBy2")', function() {
        // TODO: update the code to test the property approvedBy2
        expect(instance).to.have.property('approvedBy2');
        // expect(instance.approvedBy2).to.be(expectedValueLiteral);
      });

      it('should have the property fromApprovement2 (base name: "FromApprovement2")', function() {
        // TODO: update the code to test the property fromApprovement2
        expect(instance).to.have.property('fromApprovement2');
        // expect(instance.fromApprovement2).to.be(expectedValueLiteral);
      });

      it('should have the property toApprovement2 (base name: "ToApprovement2")', function() {
        // TODO: update the code to test the property toApprovement2
        expect(instance).to.have.property('toApprovement2');
        // expect(instance.toApprovement2).to.be(expectedValueLiteral);
      });

      it('should have the property approvedStatus2 (base name: "ApprovedStatus2")', function() {
        // TODO: update the code to test the property approvedStatus2
        expect(instance).to.have.property('approvedStatus2');
        // expect(instance.approvedStatus2).to.be(expectedValueLiteral);
      });

      it('should have the property approvedBy3 (base name: "ApprovedBy3")', function() {
        // TODO: update the code to test the property approvedBy3
        expect(instance).to.have.property('approvedBy3');
        // expect(instance.approvedBy3).to.be(expectedValueLiteral);
      });

      it('should have the property fromApprovement3 (base name: "FromApprovement3")', function() {
        // TODO: update the code to test the property fromApprovement3
        expect(instance).to.have.property('fromApprovement3');
        // expect(instance.fromApprovement3).to.be(expectedValueLiteral);
      });

      it('should have the property toApprovement3 (base name: "ToApprovement3")', function() {
        // TODO: update the code to test the property toApprovement3
        expect(instance).to.have.property('toApprovement3');
        // expect(instance.toApprovement3).to.be(expectedValueLiteral);
      });

      it('should have the property approvedStatus3 (base name: "ApprovedStatus3")', function() {
        // TODO: update the code to test the property approvedStatus3
        expect(instance).to.have.property('approvedStatus3');
        // expect(instance.approvedStatus3).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property posted (base name: "Posted")', function() {
        // TODO: update the code to test the property posted
        expect(instance).to.have.property('posted');
        // expect(instance.posted).to.be(expectedValueLiteral);
      });

      it('should have the property lines (base name: "Lines")', function() {
        // TODO: update the code to test the property lines
        expect(instance).to.have.property('lines');
        // expect(instance.lines).to.be(expectedValueLiteral);
      });

      it('should have the property dueDateHours (base name: "DueDateHours")', function() {
        // TODO: update the code to test the property dueDateHours
        expect(instance).to.have.property('dueDateHours');
        // expect(instance.dueDateHours).to.be(expectedValueLiteral);
      });

      it('should have the property dueDateDays (base name: "DueDateDays")', function() {
        // TODO: update the code to test the property dueDateDays
        expect(instance).to.have.property('dueDateDays');
        // expect(instance.dueDateDays).to.be(expectedValueLiteral);
      });

      it('should have the property isApproved (base name: "IsApproved")', function() {
        // TODO: update the code to test the property isApproved
        expect(instance).to.have.property('isApproved');
        // expect(instance.isApproved).to.be(expectedValueLiteral);
      });

      it('should have the property approvalStatus (base name: "ApprovalStatus")', function() {
        // TODO: update the code to test the property approvalStatus
        expect(instance).to.have.property('approvalStatus');
        // expect(instance.approvalStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));
