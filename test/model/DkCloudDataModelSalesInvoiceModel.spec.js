/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelSalesInvoiceModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelSalesInvoiceModel();
      });

      it('should create an instance of DkCloudDataModelSalesInvoiceModel', function() {
        // TODO: update the code to test DkCloudDataModelSalesInvoiceModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelSalesInvoiceModel);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "CreatedBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property cNumber (base name: "CNumber")', function() {
        // TODO: update the code to test the property cNumber
        expect(instance).to.have.property('cNumber');
        // expect(instance.cNumber).to.be(expectedValueLiteral);
      });

      it('should have the property cName (base name: "CName")', function() {
        // TODO: update the code to test the property cName
        expect(instance).to.have.property('cName');
        // expect(instance.cName).to.be(expectedValueLiteral);
      });

      it('should have the property cAddress1 (base name: "CAddress1")', function() {
        // TODO: update the code to test the property cAddress1
        expect(instance).to.have.property('cAddress1');
        // expect(instance.cAddress1).to.be(expectedValueLiteral);
      });

      it('should have the property cAddress2 (base name: "CAddress2")', function() {
        // TODO: update the code to test the property cAddress2
        expect(instance).to.have.property('cAddress2');
        // expect(instance.cAddress2).to.be(expectedValueLiteral);
      });

      it('should have the property cZipCode (base name: "CZipCode")', function() {
        // TODO: update the code to test the property cZipCode
        expect(instance).to.have.property('cZipCode');
        // expect(instance.cZipCode).to.be(expectedValueLiteral);
      });

      it('should have the property cCountryCode (base name: "CCountryCode")', function() {
        // TODO: update the code to test the property cCountryCode
        expect(instance).to.have.property('cCountryCode');
        // expect(instance.cCountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property cSSNumber (base name: "CSSNumber")', function() {
        // TODO: update the code to test the property cSSNumber
        expect(instance).to.have.property('cSSNumber');
        // expect(instance.cSSNumber).to.be(expectedValueLiteral);
      });

      it('should have the property cPhone (base name: "CPhone")', function() {
        // TODO: update the code to test the property cPhone
        expect(instance).to.have.property('cPhone');
        // expect(instance.cPhone).to.be(expectedValueLiteral);
      });

      it('should have the property cContact (base name: "CContact")', function() {
        // TODO: update the code to test the property cContact
        expect(instance).to.have.property('cContact');
        // expect(instance.cContact).to.be(expectedValueLiteral);
      });

      it('should have the property recordID (base name: "RecordID")', function() {
        // TODO: update the code to test the property recordID
        expect(instance).to.have.property('recordID');
        // expect(instance.recordID).to.be(expectedValueLiteral);
      });

      it('should have the property orderNumber (base name: "OrderNumber")', function() {
        // TODO: update the code to test the property orderNumber
        expect(instance).to.have.property('orderNumber');
        // expect(instance.orderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDate (base name: "InvoiceDate")', function() {
        // TODO: update the code to test the property invoiceDate
        expect(instance).to.have.property('invoiceDate');
        // expect(instance.invoiceDate).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "DueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property discountPercent (base name: "DiscountPercent")', function() {
        // TODO: update the code to test the property discountPercent
        expect(instance).to.have.property('discountPercent');
        // expect(instance.discountPercent).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "Discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmountWithTax (base name: "TotalAmountWithTax")', function() {
        // TODO: update the code to test the property totalAmountWithTax
        expect(instance).to.have.property('totalAmountWithTax');
        // expect(instance.totalAmountWithTax).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "Currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property voucher (base name: "Voucher")', function() {
        // TODO: update the code to test the property voucher
        expect(instance).to.have.property('voucher');
        // expect(instance.voucher).to.be(expectedValueLiteral);
      });

      it('should have the property settledType (base name: "SettledType")', function() {
        // TODO: update the code to test the property settledType
        expect(instance).to.have.property('settledType');
        // expect(instance.settledType).to.be(expectedValueLiteral);
      });

      it('should have the property settledAmount (base name: "SettledAmount")', function() {
        // TODO: update the code to test the property settledAmount
        expect(instance).to.have.property('settledAmount');
        // expect(instance.settledAmount).to.be(expectedValueLiteral);
      });

      it('should have the property salePerson (base name: "SalePerson")', function() {
        // TODO: update the code to test the property salePerson
        expect(instance).to.have.property('salePerson');
        // expect(instance.salePerson).to.be(expectedValueLiteral);
      });

      it('should have the property text1 (base name: "Text1")', function() {
        // TODO: update the code to test the property text1
        expect(instance).to.have.property('text1');
        // expect(instance.text1).to.be(expectedValueLiteral);
      });

      it('should have the property text2 (base name: "Text2")', function() {
        // TODO: update the code to test the property text2
        expect(instance).to.have.property('text2');
        // expect(instance.text2).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property origin (base name: "Origin")', function() {
        // TODO: update the code to test the property origin
        expect(instance).to.have.property('origin');
        // expect(instance.origin).to.be(expectedValueLiteral);
      });

      it('should have the property paymentTerm (base name: "PaymentTerm")', function() {
        // TODO: update the code to test the property paymentTerm
        expect(instance).to.have.property('paymentTerm');
        // expect(instance.paymentTerm).to.be(expectedValueLiteral);
      });

      it('should have the property paymentMode (base name: "PaymentMode")', function() {
        // TODO: update the code to test the property paymentMode
        expect(instance).to.have.property('paymentMode');
        // expect(instance.paymentMode).to.be(expectedValueLiteral);
      });

      it('should have the property claimStatus (base name: "ClaimStatus")', function() {
        // TODO: update the code to test the property claimStatus
        expect(instance).to.have.property('claimStatus');
        // expect(instance.claimStatus).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "Exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property salesType (base name: "SalesType")', function() {
        // TODO: update the code to test the property salesType
        expect(instance).to.have.property('salesType');
        // expect(instance.salesType).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "Version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property project (base name: "Project")', function() {
        // TODO: update the code to test the property project
        expect(instance).to.have.property('project');
        // expect(instance.project).to.be(expectedValueLiteral);
      });

      it('should have the property iRNumber (base name: "IRNumber")', function() {
        // TODO: update the code to test the property iRNumber
        expect(instance).to.have.property('iRNumber');
        // expect(instance.iRNumber).to.be(expectedValueLiteral);
      });

      it('should have the property iRName (base name: "IRName")', function() {
        // TODO: update the code to test the property iRName
        expect(instance).to.have.property('iRName');
        // expect(instance.iRName).to.be(expectedValueLiteral);
      });

      it('should have the property iRAddress1 (base name: "IRAddress1")', function() {
        // TODO: update the code to test the property iRAddress1
        expect(instance).to.have.property('iRAddress1');
        // expect(instance.iRAddress1).to.be(expectedValueLiteral);
      });

      it('should have the property iRAddress2 (base name: "IRAddress2")', function() {
        // TODO: update the code to test the property iRAddress2
        expect(instance).to.have.property('iRAddress2');
        // expect(instance.iRAddress2).to.be(expectedValueLiteral);
      });

      it('should have the property iRZipCode (base name: "IRZipCode")', function() {
        // TODO: update the code to test the property iRZipCode
        expect(instance).to.have.property('iRZipCode');
        // expect(instance.iRZipCode).to.be(expectedValueLiteral);
      });

      it('should have the property iRContact (base name: "IRContact")', function() {
        // TODO: update the code to test the property iRContact
        expect(instance).to.have.property('iRContact');
        // expect(instance.iRContact).to.be(expectedValueLiteral);
      });

      it('should have the property externalInvoiceNumber (base name: "ExternalInvoiceNumber")', function() {
        // TODO: update the code to test the property externalInvoiceNumber
        expect(instance).to.have.property('externalInvoiceNumber');
        // expect(instance.externalInvoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property claimNumber (base name: "ClaimNumber")', function() {
        // TODO: update the code to test the property claimNumber
        expect(instance).to.have.property('claimNumber');
        // expect(instance.claimNumber).to.be(expectedValueLiteral);
      });

      it('should have the property claimDate (base name: "ClaimDate")', function() {
        // TODO: update the code to test the property claimDate
        expect(instance).to.have.property('claimDate');
        // expect(instance.claimDate).to.be(expectedValueLiteral);
      });

      it('should have the property register (base name: "Register")', function() {
        // TODO: update the code to test the property register
        expect(instance).to.have.property('register');
        // expect(instance.register).to.be(expectedValueLiteral);
      });

      it('should have the property posInvoice (base name: "PosInvoice")', function() {
        // TODO: update the code to test the property posInvoice
        expect(instance).to.have.property('posInvoice');
        // expect(instance.posInvoice).to.be(expectedValueLiteral);
      });

      it('should have the property journalId (base name: "JournalId")', function() {
        // TODO: update the code to test the property journalId
        expect(instance).to.have.property('journalId');
        // expect(instance.journalId).to.be(expectedValueLiteral);
      });

      it('should have the property lines (base name: "Lines")', function() {
        // TODO: update the code to test the property lines
        expect(instance).to.have.property('lines');
        // expect(instance.lines).to.be(expectedValueLiteral);
      });

    });
  });

}));
