/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('VLinkDkSoftwareDkSOAPTInvoiceEntry', function() {
      beforeEach(function() {
        instance = new DkPlusApi.VLinkDkSoftwareDkSOAPTInvoiceEntry();
      });

      it('should create an instance of VLinkDkSoftwareDkSOAPTInvoiceEntry', function() {
        // TODO: update the code to test VLinkDkSoftwareDkSOAPTInvoiceEntry
        expect(instance).to.be.a(DkPlusApi.VLinkDkSoftwareDkSOAPTInvoiceEntry);
      });

      it('should have the property invoiceNumber (base name: "InvoiceNumber")', function() {
        // TODO: update the code to test the property invoiceNumber
        expect(instance).to.have.property('invoiceNumber');
        // expect(instance.invoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property customerNumber (base name: "CustomerNumber")', function() {
        // TODO: update the code to test the property customerNumber
        expect(instance).to.have.property('customerNumber');
        // expect(instance.customerNumber).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceDate (base name: "InvoiceDate")', function() {
        // TODO: update the code to test the property invoiceDate
        expect(instance).to.have.property('invoiceDate');
        // expect(instance.invoiceDate).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmountWithTax (base name: "TotalAmountWithTax")', function() {
        // TODO: update the code to test the property totalAmountWithTax
        expect(instance).to.have.property('totalAmountWithTax');
        // expect(instance.totalAmountWithTax).to.be(expectedValueLiteral);
      });

      it('should have the property referenceNumber (base name: "ReferenceNumber")', function() {
        // TODO: update the code to test the property referenceNumber
        expect(instance).to.have.property('referenceNumber');
        // expect(instance.referenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "CurrencyCode")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property settledType (base name: "SettledType")', function() {
        // TODO: update the code to test the property settledType
        expect(instance).to.have.property('settledType');
        // expect(instance.settledType).to.be(expectedValueLiteral);
      });

      it('should have the property settledAmount (base name: "SettledAmount")', function() {
        // TODO: update the code to test the property settledAmount
        expect(instance).to.have.property('settledAmount');
        // expect(instance.settledAmount).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "Discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property discountPercent (base name: "DiscountPercent")', function() {
        // TODO: update the code to test the property discountPercent
        expect(instance).to.have.property('discountPercent');
        // expect(instance.discountPercent).to.be(expectedValueLiteral);
      });

    });
  });

}));
