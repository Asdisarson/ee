/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelGeneralLedgerTransaction', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelGeneralLedgerTransaction();
      });

      it('should create an instance of DkCloudDataModelGeneralLedgerTransaction', function() {
        // TODO: update the code to test DkCloudDataModelGeneralLedgerTransaction
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerTransaction);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property ID (base name: "ID")', function() {
        // TODO: update the code to test the property ID
        expect(instance).to.have.property('ID');
        // expect(instance.ID).to.be(expectedValueLiteral);
      });

      it('should have the property headId (base name: "HeadId")', function() {
        // TODO: update the code to test the property headId
        expect(instance).to.have.property('headId');
        // expect(instance.headId).to.be(expectedValueLiteral);
      });

      it('should have the property sequence (base name: "Sequence")', function() {
        // TODO: update the code to test the property sequence
        expect(instance).to.have.property('sequence');
        // expect(instance.sequence).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceNumber (base name: "InvoiceNumber")', function() {
        // TODO: update the code to test the property invoiceNumber
        expect(instance).to.have.property('invoiceNumber');
        // expect(instance.invoiceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property account (base name: "Account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "CreatedBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

      it('should have the property dueDate (base name: "DueDate")', function() {
        // TODO: update the code to test the property dueDate
        expect(instance).to.have.property('dueDate');
        // expect(instance.dueDate).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "Text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property journalDate (base name: "JournalDate")', function() {
        // TODO: update the code to test the property journalDate
        expect(instance).to.have.property('journalDate');
        // expect(instance.journalDate).to.be(expectedValueLiteral);
      });

      it('should have the property origin (base name: "Origin")', function() {
        // TODO: update the code to test the property origin
        expect(instance).to.have.property('origin');
        // expect(instance.origin).to.be(expectedValueLiteral);
      });

      it('should have the property voucher (base name: "Voucher")', function() {
        // TODO: update the code to test the property voucher
        expect(instance).to.have.property('voucher');
        // expect(instance.voucher).to.be(expectedValueLiteral);
      });

      it('should have the property journalType (base name: "JournalType")', function() {
        // TODO: update the code to test the property journalType
        expect(instance).to.have.property('journalType');
        // expect(instance.journalType).to.be(expectedValueLiteral);
      });

      it('should have the property code (base name: "Code")', function() {
        // TODO: update the code to test the property code
        expect(instance).to.have.property('code');
        // expect(instance.code).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "Currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "Exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "Amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property inputAmount (base name: "InputAmount")', function() {
        // TODO: update the code to test the property inputAmount
        expect(instance).to.have.property('inputAmount');
        // expect(instance.inputAmount).to.be(expectedValueLiteral);
      });

      it('should have the property taxCode (base name: "TaxCode")', function() {
        // TODO: update the code to test the property taxCode
        expect(instance).to.have.property('taxCode');
        // expect(instance.taxCode).to.be(expectedValueLiteral);
      });

      it('should have the property taxGroup (base name: "TaxGroup")', function() {
        // TODO: update the code to test the property taxGroup
        expect(instance).to.have.property('taxGroup');
        // expect(instance.taxGroup).to.be(expectedValueLiteral);
      });

      it('should have the property taxPercent (base name: "TaxPercent")', function() {
        // TODO: update the code to test the property taxPercent
        expect(instance).to.have.property('taxPercent');
        // expect(instance.taxPercent).to.be(expectedValueLiteral);
      });

      it('should have the property hCode (base name: "HCode")', function() {
        // TODO: update the code to test the property hCode
        expect(instance).to.have.property('hCode');
        // expect(instance.hCode).to.be(expectedValueLiteral);
      });

      it('should have the property hType (base name: "HType")', function() {
        // TODO: update the code to test the property hType
        expect(instance).to.have.property('hType');
        // expect(instance.hType).to.be(expectedValueLiteral);
      });

      it('should have the property subAccount (base name: "SubAccount")', function() {
        // TODO: update the code to test the property subAccount
        expect(instance).to.have.property('subAccount');
        // expect(instance.subAccount).to.be(expectedValueLiteral);
      });

      it('should have the property isCredit (base name: "IsCredit")', function() {
        // TODO: update the code to test the property isCredit
        expect(instance).to.have.property('isCredit');
        // expect(instance.isCredit).to.be(expectedValueLiteral);
      });

      it('should have the property krofunumer (base name: "Krofunumer")', function() {
        // TODO: update the code to test the property krofunumer
        expect(instance).to.have.property('krofunumer');
        // expect(instance.krofunumer).to.be(expectedValueLiteral);
      });

      it('should have the property periodId (base name: "PeriodId")', function() {
        // TODO: update the code to test the property periodId
        expect(instance).to.have.property('periodId');
        // expect(instance.periodId).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "Quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfQuantity (base name: "NumberOfQuantity")', function() {
        // TODO: update the code to test the property numberOfQuantity
        expect(instance).to.have.property('numberOfQuantity');
        // expect(instance.numberOfQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property quantityUnitCode (base name: "QuantityUnitCode")', function() {
        // TODO: update the code to test the property quantityUnitCode
        expect(instance).to.have.property('quantityUnitCode');
        // expect(instance.quantityUnitCode).to.be(expectedValueLiteral);
      });

      it('should have the property percentageOfVATUsed (base name: "PercentageOfVATUsed")', function() {
        // TODO: update the code to test the property percentageOfVATUsed
        expect(instance).to.have.property('percentageOfVATUsed');
        // expect(instance.percentageOfVATUsed).to.be(expectedValueLiteral);
      });

      it('should have the property vATReportID (base name: "VATReportID")', function() {
        // TODO: update the code to test the property vATReportID
        expect(instance).to.have.property('vATReportID');
        // expect(instance.vATReportID).to.be(expectedValueLiteral);
      });

      it('should have the property vATReportGroup (base name: "VATReportGroup")', function() {
        // TODO: update the code to test the property vATReportGroup
        expect(instance).to.have.property('vATReportGroup');
        // expect(instance.vATReportGroup).to.be(expectedValueLiteral);
      });

      it('should have the property objectDate (base name: "ObjectDate")', function() {
        // TODO: update the code to test the property objectDate
        expect(instance).to.have.property('objectDate');
        // expect(instance.objectDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "Deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

    });
  });

}));
