/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelMembersMemberFund', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelMembersMemberFund();
      });

      it('should create an instance of DkCloudDataModelMembersMemberFund', function() {
        // TODO: update the code to test DkCloudDataModelMembersMemberFund
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelMembersMemberFund);
      });

      it('should have the property batchId (base name: "BatchId")', function() {
        // TODO: update the code to test the property batchId
        expect(instance).to.have.property('batchId');
        // expect(instance.batchId).to.be(expectedValueLiteral);
      });

      it('should have the property journalDate (base name: "JournalDate")', function() {
        // TODO: update the code to test the property journalDate
        expect(instance).to.have.property('journalDate');
        // expect(instance.journalDate).to.be(expectedValueLiteral);
      });

      it('should have the property period (base name: "Period")', function() {
        // TODO: update the code to test the property period
        expect(instance).to.have.property('period');
        // expect(instance.period).to.be(expectedValueLiteral);
      });

      it('should have the property customer (base name: "Customer")', function() {
        // TODO: update the code to test the property customer
        expect(instance).to.have.property('customer');
        // expect(instance.customer).to.be(expectedValueLiteral);
      });

      it('should have the property workplaceId (base name: "WorkplaceId")', function() {
        // TODO: update the code to test the property workplaceId
        expect(instance).to.have.property('workplaceId');
        // expect(instance.workplaceId).to.be(expectedValueLiteral);
      });

      it('should have the property membershipCompany (base name: "MembershipCompany")', function() {
        // TODO: update the code to test the property membershipCompany
        expect(instance).to.have.property('membershipCompany');
        // expect(instance.membershipCompany).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property customerName (base name: "CustomerName")', function() {
        // TODO: update the code to test the property customerName
        expect(instance).to.have.property('customerName');
        // expect(instance.customerName).to.be(expectedValueLiteral);
      });

      it('should have the property settled (base name: "Settled")', function() {
        // TODO: update the code to test the property settled
        expect(instance).to.have.property('settled');
        // expect(instance.settled).to.be(expectedValueLiteral);
      });

      it('should have the property payments (base name: "Payments")', function() {
        // TODO: update the code to test the property payments
        expect(instance).to.have.property('payments');
        // expect(instance.payments).to.be(expectedValueLiteral);
      });

      it('should have the property extraProperties (base name: "ExtraProperties")', function() {
        // TODO: update the code to test the property extraProperties
        expect(instance).to.have.property('extraProperties');
        // expect(instance.extraProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
