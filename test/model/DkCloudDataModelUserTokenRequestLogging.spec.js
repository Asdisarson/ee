/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelUserTokenRequestLogging', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelUserTokenRequestLogging();
      });

      it('should create an instance of DkCloudDataModelUserTokenRequestLogging', function() {
        // TODO: update the code to test DkCloudDataModelUserTokenRequestLogging
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelUserTokenRequestLogging);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "User")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property company (base name: "Company")', function() {
        // TODO: update the code to test the property company
        expect(instance).to.have.property('company');
        // expect(instance.company).to.be(expectedValueLiteral);
      });

      it('should have the property requestSize (base name: "RequestSize")', function() {
        // TODO: update the code to test the property requestSize
        expect(instance).to.have.property('requestSize');
        // expect(instance.requestSize).to.be(expectedValueLiteral);
      });

      it('should have the property responseSize (base name: "ResponseSize")', function() {
        // TODO: update the code to test the property responseSize
        expect(instance).to.have.property('responseSize');
        // expect(instance.responseSize).to.be(expectedValueLiteral);
      });

      it('should have the property method (base name: "Method")', function() {
        // TODO: update the code to test the property method
        expect(instance).to.have.property('method');
        // expect(instance.method).to.be(expectedValueLiteral);
      });

      it('should have the property uri (base name: "Uri")', function() {
        // TODO: update the code to test the property uri
        expect(instance).to.have.property('uri');
        // expect(instance.uri).to.be(expectedValueLiteral);
      });

      it('should have the property query (base name: "Query")', function() {
        // TODO: update the code to test the property query
        expect(instance).to.have.property('query');
        // expect(instance.query).to.be(expectedValueLiteral);
      });

      it('should have the property statusCode (base name: "StatusCode")', function() {
        // TODO: update the code to test the property statusCode
        expect(instance).to.have.property('statusCode');
        // expect(instance.statusCode).to.be(expectedValueLiteral);
      });

      it('should have the property iPAddress (base name: "IPAddress")', function() {
        // TODO: update the code to test the property iPAddress
        expect(instance).to.have.property('iPAddress');
        // expect(instance.iPAddress).to.be(expectedValueLiteral);
      });

      it('should have the property agent (base name: "Agent")', function() {
        // TODO: update the code to test the property agent
        expect(instance).to.have.property('agent');
        // expect(instance.agent).to.be(expectedValueLiteral);
      });

      it('should have the property token (base name: "Token")', function() {
        // TODO: update the code to test the property token
        expect(instance).to.have.property('token');
        // expect(instance.token).to.be(expectedValueLiteral);
      });

      it('should have the property error (base name: "Error")', function() {
        // TODO: update the code to test the property error
        expect(instance).to.have.property('error');
        // expect(instance.error).to.be(expectedValueLiteral);
      });

      it('should have the property serviceType (base name: "ServiceType")', function() {
        // TODO: update the code to test the property serviceType
        expect(instance).to.have.property('serviceType');
        // expect(instance.serviceType).to.be(expectedValueLiteral);
      });

      it('should have the property timeTaken (base name: "TimeTaken")', function() {
        // TODO: update the code to test the property timeTaken
        expect(instance).to.have.property('timeTaken');
        // expect(instance.timeTaken).to.be(expectedValueLiteral);
      });

    });
  });

}));
