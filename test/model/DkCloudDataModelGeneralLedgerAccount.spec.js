/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelGeneralLedgerAccount', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelGeneralLedgerAccount();
      });

      it('should create an instance of DkCloudDataModelGeneralLedgerAccount', function() {
        // TODO: update the code to test DkCloudDataModelGeneralLedgerAccount
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelGeneralLedgerAccount);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "Group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property accountType (base name: "AccountType")', function() {
        // TODO: update the code to test the property accountType
        expect(instance).to.have.property('accountType');
        // expect(instance.accountType).to.be(expectedValueLiteral);
      });

      it('should have the property taxCode (base name: "TaxCode")', function() {
        // TODO: update the code to test the property taxCode
        expect(instance).to.have.property('taxCode');
        // expect(instance.taxCode).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property closed (base name: "Closed")', function() {
        // TODO: update the code to test the property closed
        expect(instance).to.have.property('closed');
        // expect(instance.closed).to.be(expectedValueLiteral);
      });

      it('should have the property useCurrency (base name: "UseCurrency")', function() {
        // TODO: update the code to test the property useCurrency
        expect(instance).to.have.property('useCurrency');
        // expect(instance.useCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "Currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property sumReference (base name: "SumReference")', function() {
        // TODO: update the code to test the property sumReference
        expect(instance).to.have.property('sumReference');
        // expect(instance.sumReference).to.be(expectedValueLiteral);
      });

      it('should have the property reverseAccount (base name: "ReverseAccount")', function() {
        // TODO: update the code to test the property reverseAccount
        expect(instance).to.have.property('reverseAccount');
        // expect(instance.reverseAccount).to.be(expectedValueLiteral);
      });

    });
  });

}));
