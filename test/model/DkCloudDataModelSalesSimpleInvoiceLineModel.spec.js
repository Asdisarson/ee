/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelSalesSimpleInvoiceLineModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelSalesSimpleInvoiceLineModel();
      });

      it('should create an instance of DkCloudDataModelSalesSimpleInvoiceLineModel', function() {
        // TODO: update the code to test DkCloudDataModelSalesSimpleInvoiceLineModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelSalesSimpleInvoiceLineModel);
      });

      it('should have the property itemCode (base name: "ItemCode")', function() {
        // TODO: update the code to test the property itemCode
        expect(instance).to.have.property('itemCode');
        // expect(instance.itemCode).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "Text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property text2 (base name: "Text2")', function() {
        // TODO: update the code to test the property text2
        expect(instance).to.have.property('text2');
        // expect(instance.text2).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property warehouse (base name: "Warehouse")', function() {
        // TODO: update the code to test the property warehouse
        expect(instance).to.have.property('warehouse');
        // expect(instance.warehouse).to.be(expectedValueLiteral);
      });

      it('should have the property quantity (base name: "Quantity")', function() {
        // TODO: update the code to test the property quantity
        expect(instance).to.have.property('quantity');
        // expect(instance.quantity).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice (base name: "UnitPrice")', function() {
        // TODO: update the code to test the property unitPrice
        expect(instance).to.have.property('unitPrice');
        // expect(instance.unitPrice).to.be(expectedValueLiteral);
      });

      it('should have the property unitPriceIncVAT (base name: "UnitPriceIncVAT")', function() {
        // TODO: update the code to test the property unitPriceIncVAT
        expect(instance).to.have.property('unitPriceIncVAT');
        // expect(instance.unitPriceIncVAT).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "Discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property discountAmount (base name: "DiscountAmount")', function() {
        // TODO: update the code to test the property discountAmount
        expect(instance).to.have.property('discountAmount');
        // expect(instance.discountAmount).to.be(expectedValueLiteral);
      });

      it('should have the property discountAmountIncVat (base name: "DiscountAmountIncVat")', function() {
        // TODO: update the code to test the property discountAmountIncVat
        expect(instance).to.have.property('discountAmountIncVat');
        // expect(instance.discountAmountIncVat).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmount (base name: "TotalAmount")', function() {
        // TODO: update the code to test the property totalAmount
        expect(instance).to.have.property('totalAmount');
        // expect(instance.totalAmount).to.be(expectedValueLiteral);
      });

      it('should have the property totalAmountIncVat (base name: "TotalAmountIncVat")', function() {
        // TODO: update the code to test the property totalAmountIncVat
        expect(instance).to.have.property('totalAmountIncVat');
        // expect(instance.totalAmountIncVat).to.be(expectedValueLiteral);
      });

    });
  });

}));
