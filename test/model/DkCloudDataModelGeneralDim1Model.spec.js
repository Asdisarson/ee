/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelGeneralDim1Model', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelGeneralDim1Model();
      });

      it('should create an instance of DkCloudDataModelGeneralDim1Model', function() {
        // TODO: update the code to test DkCloudDataModelGeneralDim1Model
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelGeneralDim1Model);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property closed (base name: "Closed")', function() {
        // TODO: update the code to test the property closed
        expect(instance).to.have.property('closed');
        // expect(instance.closed).to.be(expectedValueLiteral);
      });

      it('should have the property skipVAT (base name: "SkipVAT")', function() {
        // TODO: update the code to test the property skipVAT
        expect(instance).to.have.property('skipVAT');
        // expect(instance.skipVAT).to.be(expectedValueLiteral);
      });

      it('should have the property skipIncomeVAT (base name: "SkipIncomeVAT")', function() {
        // TODO: update the code to test the property skipIncomeVAT
        expect(instance).to.have.property('skipIncomeVAT');
        // expect(instance.skipIncomeVAT).to.be(expectedValueLiteral);
      });

      it('should have the property isInBuildBuisness (base name: "IsInBuildBuisness")', function() {
        // TODO: update the code to test the property isInBuildBuisness
        expect(instance).to.have.property('isInBuildBuisness');
        // expect(instance.isInBuildBuisness).to.be(expectedValueLiteral);
      });

      it('should have the property iSAT95 (base name: "ISAT95")', function() {
        // TODO: update the code to test the property iSAT95
        expect(instance).to.have.property('iSAT95');
        // expect(instance.iSAT95).to.be(expectedValueLiteral);
      });

      it('should have the property vSKNumber (base name: "VSKNumber")', function() {
        // TODO: update the code to test the property vSKNumber
        expect(instance).to.have.property('vSKNumber');
        // expect(instance.vSKNumber).to.be(expectedValueLiteral);
      });

      it('should have the property siUser (base name: "SiUser")', function() {
        // TODO: update the code to test the property siUser
        expect(instance).to.have.property('siUser');
        // expect(instance.siUser).to.be(expectedValueLiteral);
      });

      it('should have the property dimApproverer (base name: "DimApproverer")', function() {
        // TODO: update the code to test the property dimApproverer
        expect(instance).to.have.property('dimApproverer');
        // expect(instance.dimApproverer).to.be(expectedValueLiteral);
      });

      it('should have the property gLSveitCOFOGCode (base name: "GLSveitCOFOGCode")', function() {
        // TODO: update the code to test the property gLSveitCOFOGCode
        expect(instance).to.have.property('gLSveitCOFOGCode');
        // expect(instance.gLSveitCOFOGCode).to.be(expectedValueLiteral);
      });

      it('should have the property dimType (base name: "DimType")', function() {
        // TODO: update the code to test the property dimType
        expect(instance).to.have.property('dimType');
        // expect(instance.dimType).to.be(expectedValueLiteral);
      });

    });
  });

}));
