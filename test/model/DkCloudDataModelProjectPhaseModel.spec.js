/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelProjectPhaseModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelProjectPhaseModel();
      });

      it('should create an instance of DkCloudDataModelProjectPhaseModel', function() {
        // TODO: update the code to test DkCloudDataModelProjectPhaseModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelProjectPhaseModel);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "Name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "Type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property enabled (base name: "Enabled")', function() {
        // TODO: update the code to test the property enabled
        expect(instance).to.have.property('enabled');
        // expect(instance.enabled).to.be(expectedValueLiteral);
      });

      it('should have the property dim1Required (base name: "Dim1Required")', function() {
        // TODO: update the code to test the property dim1Required
        expect(instance).to.have.property('dim1Required');
        // expect(instance.dim1Required).to.be(expectedValueLiteral);
      });

      it('should have the property dim2Required (base name: "Dim2Required")', function() {
        // TODO: update the code to test the property dim2Required
        expect(instance).to.have.property('dim2Required');
        // expect(instance.dim2Required).to.be(expectedValueLiteral);
      });

      it('should have the property dim3Required (base name: "Dim3Required")', function() {
        // TODO: update the code to test the property dim3Required
        expect(instance).to.have.property('dim3Required');
        // expect(instance.dim3Required).to.be(expectedValueLiteral);
      });

      it('should have the property extraProperties (base name: "ExtraProperties")', function() {
        // TODO: update the code to test the property extraProperties
        expect(instance).to.have.property('extraProperties');
        // expect(instance.extraProperties).to.be(expectedValueLiteral);
      });

    });
  });

}));
