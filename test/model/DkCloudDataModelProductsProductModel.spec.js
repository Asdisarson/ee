/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelProductsProductModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelProductsProductModel();
      });

      it('should create an instance of DkCloudDataModelProductsProductModel', function() {
        // TODO: update the code to test DkCloudDataModelProductsProductModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelProductsProductModel);
      });

      it('should have the property recordID (base name: "RecordID")', function() {
        // TODO: update the code to test the property recordID
        expect(instance).to.have.property('recordID');
        // expect(instance.recordID).to.be(expectedValueLiteral);
      });

      it('should have the property itemCode (base name: "ItemCode")', function() {
        // TODO: update the code to test the property itemCode
        expect(instance).to.have.property('itemCode');
        // expect(instance.itemCode).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property description2 (base name: "Description2")', function() {
        // TODO: update the code to test the property description2
        expect(instance).to.have.property('description2');
        // expect(instance.description2).to.be(expectedValueLiteral);
      });

      it('should have the property inactive (base name: "Inactive")', function() {
        // TODO: update the code to test the property inactive
        expect(instance).to.have.property('inactive');
        // expect(instance.inactive).to.be(expectedValueLiteral);
      });

      it('should have the property recordCreated (base name: "RecordCreated")', function() {
        // TODO: update the code to test the property recordCreated
        expect(instance).to.have.property('recordCreated');
        // expect(instance.recordCreated).to.be(expectedValueLiteral);
      });

      it('should have the property recordModified (base name: "RecordModified")', function() {
        // TODO: update the code to test the property recordModified
        expect(instance).to.have.property('recordModified');
        // expect(instance.recordModified).to.be(expectedValueLiteral);
      });

      it('should have the property objectDate (base name: "ObjectDate")', function() {
        // TODO: update the code to test the property objectDate
        expect(instance).to.have.property('objectDate');
        // expect(instance.objectDate).to.be(expectedValueLiteral);
      });

      it('should have the property aliasItemCode (base name: "AliasItemCode")', function() {
        // TODO: update the code to test the property aliasItemCode
        expect(instance).to.have.property('aliasItemCode');
        // expect(instance.aliasItemCode).to.be(expectedValueLiteral);
      });

      it('should have the property itemClass (base name: "ItemClass")', function() {
        // TODO: update the code to test the property itemClass
        expect(instance).to.have.property('itemClass');
        // expect(instance.itemClass).to.be(expectedValueLiteral);
      });

      it('should have the property unitCode (base name: "UnitCode")', function() {
        // TODO: update the code to test the property unitCode
        expect(instance).to.have.property('unitCode');
        // expect(instance.unitCode).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "Group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property unitQuantity (base name: "UnitQuantity")', function() {
        // TODO: update the code to test the property unitQuantity
        expect(instance).to.have.property('unitQuantity');
        // expect(instance.unitQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property netWeight (base name: "NetWeight")', function() {
        // TODO: update the code to test the property netWeight
        expect(instance).to.have.property('netWeight');
        // expect(instance.netWeight).to.be(expectedValueLiteral);
      });

      it('should have the property unitVolume (base name: "UnitVolume")', function() {
        // TODO: update the code to test the property unitVolume
        expect(instance).to.have.property('unitVolume');
        // expect(instance.unitVolume).to.be(expectedValueLiteral);
      });

      it('should have the property totalQuantityInWarehouse (base name: "TotalQuantityInWarehouse")', function() {
        // TODO: update the code to test the property totalQuantityInWarehouse
        expect(instance).to.have.property('totalQuantityInWarehouse');
        // expect(instance.totalQuantityInWarehouse).to.be(expectedValueLiteral);
      });

      it('should have the property purchasePrice (base name: "PurchasePrice")', function() {
        // TODO: update the code to test the property purchasePrice
        expect(instance).to.have.property('purchasePrice');
        // expect(instance.purchasePrice).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "CurrencyCode")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "Exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice1 (base name: "UnitPrice1")', function() {
        // TODO: update the code to test the property unitPrice1
        expect(instance).to.have.property('unitPrice1');
        // expect(instance.unitPrice1).to.be(expectedValueLiteral);
      });

      it('should have the property purchasefactor (base name: "Purchasefactor")', function() {
        // TODO: update the code to test the property purchasefactor
        expect(instance).to.have.property('purchasefactor');
        // expect(instance.purchasefactor).to.be(expectedValueLiteral);
      });

      it('should have the property costPrice (base name: "CostPrice")', function() {
        // TODO: update the code to test the property costPrice
        expect(instance).to.have.property('costPrice');
        // expect(instance.costPrice).to.be(expectedValueLiteral);
      });

      it('should have the property profitRatio1 (base name: "ProfitRatio1")', function() {
        // TODO: update the code to test the property profitRatio1
        expect(instance).to.have.property('profitRatio1');
        // expect(instance.profitRatio1).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice1WithTax (base name: "UnitPrice1WithTax")', function() {
        // TODO: update the code to test the property unitPrice1WithTax
        expect(instance).to.have.property('unitPrice1WithTax');
        // expect(instance.unitPrice1WithTax).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice2 (base name: "UnitPrice2")', function() {
        // TODO: update the code to test the property unitPrice2
        expect(instance).to.have.property('unitPrice2');
        // expect(instance.unitPrice2).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice3WithTax (base name: "UnitPrice3WithTax")', function() {
        // TODO: update the code to test the property unitPrice3WithTax
        expect(instance).to.have.property('unitPrice3WithTax');
        // expect(instance.unitPrice3WithTax).to.be(expectedValueLiteral);
      });

      it('should have the property showItemInWebShop (base name: "ShowItemInWebShop")', function() {
        // TODO: update the code to test the property showItemInWebShop
        expect(instance).to.have.property('showItemInWebShop');
        // expect(instance.showItemInWebShop).to.be(expectedValueLiteral);
      });

      it('should have the property allowDiscount (base name: "AllowDiscount")', function() {
        // TODO: update the code to test the property allowDiscount
        expect(instance).to.have.property('allowDiscount');
        // expect(instance.allowDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property discount (base name: "Discount")', function() {
        // TODO: update the code to test the property discount
        expect(instance).to.have.property('discount');
        // expect(instance.discount).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice2WithTax (base name: "UnitPrice2WithTax")', function() {
        // TODO: update the code to test the property unitPrice2WithTax
        expect(instance).to.have.property('unitPrice2WithTax');
        // expect(instance.unitPrice2WithTax).to.be(expectedValueLiteral);
      });

      it('should have the property unitPrice3 (base name: "UnitPrice3")', function() {
        // TODO: update the code to test the property unitPrice3
        expect(instance).to.have.property('unitPrice3');
        // expect(instance.unitPrice3).to.be(expectedValueLiteral);
      });

      it('should have the property propositionPrice (base name: "PropositionPrice")', function() {
        // TODO: update the code to test the property propositionPrice
        expect(instance).to.have.property('propositionPrice');
        // expect(instance.propositionPrice).to.be(expectedValueLiteral);
      });

      it('should have the property propositionDateTo (base name: "PropositionDateTo")', function() {
        // TODO: update the code to test the property propositionDateTo
        expect(instance).to.have.property('propositionDateTo');
        // expect(instance.propositionDateTo).to.be(expectedValueLiteral);
      });

      it('should have the property extraDesc1 (base name: "ExtraDesc1")', function() {
        // TODO: update the code to test the property extraDesc1
        expect(instance).to.have.property('extraDesc1');
        // expect(instance.extraDesc1).to.be(expectedValueLiteral);
      });

      it('should have the property extraDesc2 (base name: "ExtraDesc2")', function() {
        // TODO: update the code to test the property extraDesc2
        expect(instance).to.have.property('extraDesc2');
        // expect(instance.extraDesc2).to.be(expectedValueLiteral);
      });

      it('should have the property isVariation (base name: "IsVariation")', function() {
        // TODO: update the code to test the property isVariation
        expect(instance).to.have.property('isVariation');
        // expect(instance.isVariation).to.be(expectedValueLiteral);
      });

      it('should have the property variation (base name: "Variation")', function() {
        // TODO: update the code to test the property variation
        expect(instance).to.have.property('variation');
        // expect(instance.variation).to.be(expectedValueLiteral);
      });

      it('should have the property taxPercent (base name: "TaxPercent")', function() {
        // TODO: update the code to test the property taxPercent
        expect(instance).to.have.property('taxPercent');
        // expect(instance.taxPercent).to.be(expectedValueLiteral);
      });

      it('should have the property salesTaxCode (base name: "SalesTaxCode")', function() {
        // TODO: update the code to test the property salesTaxCode
        expect(instance).to.have.property('salesTaxCode');
        // expect(instance.salesTaxCode).to.be(expectedValueLiteral);
      });

      it('should have the property salesLedgerCode (base name: "SalesLedgerCode")', function() {
        // TODO: update the code to test the property salesLedgerCode
        expect(instance).to.have.property('salesLedgerCode');
        // expect(instance.salesLedgerCode).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseTaxCode (base name: "PurchaseTaxCode")', function() {
        // TODO: update the code to test the property purchaseTaxCode
        expect(instance).to.have.property('purchaseTaxCode');
        // expect(instance.purchaseTaxCode).to.be(expectedValueLiteral);
      });

      it('should have the property purchaseLedgerCode (base name: "PurchaseLedgerCode")', function() {
        // TODO: update the code to test the property purchaseLedgerCode
        expect(instance).to.have.property('purchaseLedgerCode');
        // expect(instance.purchaseLedgerCode).to.be(expectedValueLiteral);
      });

      it('should have the property allowNegativeInventiry (base name: "AllowNegativeInventiry")', function() {
        // TODO: update the code to test the property allowNegativeInventiry
        expect(instance).to.have.property('allowNegativeInventiry');
        // expect(instance.allowNegativeInventiry).to.be(expectedValueLiteral);
      });

      it('should have the property discountQuantity (base name: "DiscountQuantity")', function() {
        // TODO: update the code to test the property discountQuantity
        expect(instance).to.have.property('discountQuantity');
        // expect(instance.discountQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property maxDiscountAllowed (base name: "MaxDiscountAllowed")', function() {
        // TODO: update the code to test the property maxDiscountAllowed
        expect(instance).to.have.property('maxDiscountAllowed');
        // expect(instance.maxDiscountAllowed).to.be(expectedValueLiteral);
      });

      it('should have the property defaultSaleQuantity (base name: "DefaultSaleQuantity")', function() {
        // TODO: update the code to test the property defaultSaleQuantity
        expect(instance).to.have.property('defaultSaleQuantity');
        // expect(instance.defaultSaleQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property extraFeeItemCode (base name: "ExtraFeeItemCode")', function() {
        // TODO: update the code to test the property extraFeeItemCode
        expect(instance).to.have.property('extraFeeItemCode');
        // expect(instance.extraFeeItemCode).to.be(expectedValueLiteral);
      });

      it('should have the property costMethod (base name: "CostMethod")', function() {
        // TODO: update the code to test the property costMethod
        expect(instance).to.have.property('costMethod');
        // expect(instance.costMethod).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "Deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hasAttachments (base name: "HasAttachments")', function() {
        // TODO: update the code to test the property hasAttachments
        expect(instance).to.have.property('hasAttachments');
        // expect(instance.hasAttachments).to.be(expectedValueLiteral);
      });

      it('should have the property hasBarcodes (base name: "HasBarcodes")', function() {
        // TODO: update the code to test the property hasBarcodes
        expect(instance).to.have.property('hasBarcodes');
        // expect(instance.hasBarcodes).to.be(expectedValueLiteral);
      });

      it('should have the property hasCurrencyPrices (base name: "HasCurrencyPrices")', function() {
        // TODO: update the code to test the property hasCurrencyPrices
        expect(instance).to.have.property('hasCurrencyPrices');
        // expect(instance.hasCurrencyPrices).to.be(expectedValueLiteral);
      });

      it('should have the property hasUnits (base name: "HasUnits")', function() {
        // TODO: update the code to test the property hasUnits
        expect(instance).to.have.property('hasUnits');
        // expect(instance.hasUnits).to.be(expectedValueLiteral);
      });

      it('should have the property hasAlternative (base name: "HasAlternative")', function() {
        // TODO: update the code to test the property hasAlternative
        expect(instance).to.have.property('hasAlternative');
        // expect(instance.hasAlternative).to.be(expectedValueLiteral);
      });

      it('should have the property barcodes (base name: "Barcodes")', function() {
        // TODO: update the code to test the property barcodes
        expect(instance).to.have.property('barcodes');
        // expect(instance.barcodes).to.be(expectedValueLiteral);
      });

      it('should have the property attachments (base name: "Attachments")', function() {
        // TODO: update the code to test the property attachments
        expect(instance).to.have.property('attachments');
        // expect(instance.attachments).to.be(expectedValueLiteral);
      });

      it('should have the property categories (base name: "Categories")', function() {
        // TODO: update the code to test the property categories
        expect(instance).to.have.property('categories');
        // expect(instance.categories).to.be(expectedValueLiteral);
      });

      it('should have the property warehouses (base name: "Warehouses")', function() {
        // TODO: update the code to test the property warehouses
        expect(instance).to.have.property('warehouses');
        // expect(instance.warehouses).to.be(expectedValueLiteral);
      });

      it('should have the property currencyPrices (base name: "CurrencyPrices")', function() {
        // TODO: update the code to test the property currencyPrices
        expect(instance).to.have.property('currencyPrices');
        // expect(instance.currencyPrices).to.be(expectedValueLiteral);
      });

      it('should have the property units (base name: "Units")', function() {
        // TODO: update the code to test the property units
        expect(instance).to.have.property('units');
        // expect(instance.units).to.be(expectedValueLiteral);
      });

      it('should have the property alternative (base name: "Alternative")', function() {
        // TODO: update the code to test the property alternative
        expect(instance).to.have.property('alternative');
        // expect(instance.alternative).to.be(expectedValueLiteral);
      });

      it('should have the property changes (base name: "Changes")', function() {
        // TODO: update the code to test the property changes
        expect(instance).to.have.property('changes');
        // expect(instance.changes).to.be(expectedValueLiteral);
      });

      it('should have the property memos (base name: "Memos")', function() {
        // TODO: update the code to test the property memos
        expect(instance).to.have.property('memos');
        // expect(instance.memos).to.be(expectedValueLiteral);
      });

      it('should have the property vendors (base name: "Vendors")', function() {
        // TODO: update the code to test the property vendors
        expect(instance).to.have.property('vendors');
        // expect(instance.vendors).to.be(expectedValueLiteral);
      });

    });
  });

}));
