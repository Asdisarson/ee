/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelProjectRequest', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelProjectRequest();
      });

      it('should create an instance of DkCloudDataModelProjectRequest', function() {
        // TODO: update the code to test DkCloudDataModelProjectRequest
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelProjectRequest);
      });

      it('should have the property id (base name: "Id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "Type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "Status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property extraDescription (base name: "ExtraDescription")', function() {
        // TODO: update the code to test the property extraDescription
        expect(instance).to.have.property('extraDescription');
        // expect(instance.extraDescription).to.be(expectedValueLiteral);
      });

      it('should have the property memo (base name: "Memo")', function() {
        // TODO: update the code to test the property memo
        expect(instance).to.have.property('memo');
        // expect(instance.memo).to.be(expectedValueLiteral);
      });

      it('should have the property transfered (base name: "Transfered")', function() {
        // TODO: update the code to test the property transfered
        expect(instance).to.have.property('transfered');
        // expect(instance.transfered).to.be(expectedValueLiteral);
      });

      it('should have the property dim1 (base name: "Dim1")', function() {
        // TODO: update the code to test the property dim1
        expect(instance).to.have.property('dim1');
        // expect(instance.dim1).to.be(expectedValueLiteral);
      });

      it('should have the property dim2 (base name: "Dim2")', function() {
        // TODO: update the code to test the property dim2
        expect(instance).to.have.property('dim2');
        // expect(instance.dim2).to.be(expectedValueLiteral);
      });

      it('should have the property dim3 (base name: "Dim3")', function() {
        // TODO: update the code to test the property dim3
        expect(instance).to.have.property('dim3');
        // expect(instance.dim3).to.be(expectedValueLiteral);
      });

      it('should have the property project (base name: "Project")', function() {
        // TODO: update the code to test the property project
        expect(instance).to.have.property('project');
        // expect(instance.project).to.be(expectedValueLiteral);
      });

      it('should have the property phase (base name: "Phase")', function() {
        // TODO: update the code to test the property phase
        expect(instance).to.have.property('phase');
        // expect(instance.phase).to.be(expectedValueLiteral);
      });

      it('should have the property task (base name: "Task")', function() {
        // TODO: update the code to test the property task
        expect(instance).to.have.property('task');
        // expect(instance.task).to.be(expectedValueLiteral);
      });

      it('should have the property supervisor (base name: "Supervisor")', function() {
        // TODO: update the code to test the property supervisor
        expect(instance).to.have.property('supervisor');
        // expect(instance.supervisor).to.be(expectedValueLiteral);
      });

      it('should have the property worker (base name: "Worker")', function() {
        // TODO: update the code to test the property worker
        expect(instance).to.have.property('worker');
        // expect(instance.worker).to.be(expectedValueLiteral);
      });

      it('should have the property from (base name: "From")', function() {
        // TODO: update the code to test the property from
        expect(instance).to.have.property('from');
        // expect(instance.from).to.be(expectedValueLiteral);
      });

      it('should have the property to (base name: "To")', function() {
        // TODO: update the code to test the property to
        expect(instance).to.have.property('to');
        // expect(instance.to).to.be(expectedValueLiteral);
      });

      it('should have the property hasPriority (base name: "HasPriority")', function() {
        // TODO: update the code to test the property hasPriority
        expect(instance).to.have.property('hasPriority');
        // expect(instance.hasPriority).to.be(expectedValueLiteral);
      });

      it('should have the property workerCount (base name: "WorkerCount")', function() {
        // TODO: update the code to test the property workerCount
        expect(instance).to.have.property('workerCount');
        // expect(instance.workerCount).to.be(expectedValueLiteral);
      });

      it('should have the property isScheduled (base name: "IsScheduled")', function() {
        // TODO: update the code to test the property isScheduled
        expect(instance).to.have.property('isScheduled');
        // expect(instance.isScheduled).to.be(expectedValueLiteral);
      });

      it('should have the property isLocked (base name: "IsLocked")', function() {
        // TODO: update the code to test the property isLocked
        expect(instance).to.have.property('isLocked');
        // expect(instance.isLocked).to.be(expectedValueLiteral);
      });

      it('should have the property parentRequest (base name: "ParentRequest")', function() {
        // TODO: update the code to test the property parentRequest
        expect(instance).to.have.property('parentRequest');
        // expect(instance.parentRequest).to.be(expectedValueLiteral);
      });

      it('should have the property customer (base name: "Customer")', function() {
        // TODO: update the code to test the property customer
        expect(instance).to.have.property('customer');
        // expect(instance.customer).to.be(expectedValueLiteral);
      });

      it('should have the property objectDate (base name: "ObjectDate")', function() {
        // TODO: update the code to test the property objectDate
        expect(instance).to.have.property('objectDate');
        // expect(instance.objectDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "Deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

    });
  });

}));
