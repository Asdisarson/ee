/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelSalesSalesPersonModel', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelSalesSalesPersonModel();
      });

      it('should create an instance of DkCloudDataModelSalesSalesPersonModel', function() {
        // TODO: update the code to test DkCloudDataModelSalesSalesPersonModel
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelSalesSalesPersonModel);
      });

      it('should have the property _number (base name: "Number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property employee (base name: "Employee")', function() {
        // TODO: update the code to test the property employee
        expect(instance).to.have.property('employee');
        // expect(instance.employee).to.be(expectedValueLiteral);
      });

      it('should have the property nameOnSalesOrders (base name: "NameOnSalesOrders")', function() {
        // TODO: update the code to test the property nameOnSalesOrders
        expect(instance).to.have.property('nameOnSalesOrders');
        // expect(instance.nameOnSalesOrders).to.be(expectedValueLiteral);
      });

      it('should have the property warehouse (base name: "Warehouse")', function() {
        // TODO: update the code to test the property warehouse
        expect(instance).to.have.property('warehouse');
        // expect(instance.warehouse).to.be(expectedValueLiteral);
      });

      it('should have the property modified (base name: "Modified")', function() {
        // TODO: update the code to test the property modified
        expect(instance).to.have.property('modified');
        // expect(instance.modified).to.be(expectedValueLiteral);
      });

      it('should have the property created (base name: "Created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property priceGroup (base name: "PriceGroup")', function() {
        // TODO: update the code to test the property priceGroup
        expect(instance).to.have.property('priceGroup');
        // expect(instance.priceGroup).to.be(expectedValueLiteral);
      });

      it('should have the property price1Closed (base name: "Price1Closed")', function() {
        // TODO: update the code to test the property price1Closed
        expect(instance).to.have.property('price1Closed');
        // expect(instance.price1Closed).to.be(expectedValueLiteral);
      });

      it('should have the property price2Closed (base name: "Price2Closed")', function() {
        // TODO: update the code to test the property price2Closed
        expect(instance).to.have.property('price2Closed');
        // expect(instance.price2Closed).to.be(expectedValueLiteral);
      });

      it('should have the property price3Closed (base name: "Price3Closed")', function() {
        // TODO: update the code to test the property price3Closed
        expect(instance).to.have.property('price3Closed');
        // expect(instance.price3Closed).to.be(expectedValueLiteral);
      });

      it('should have the property canChangeDueDate (base name: "CanChangeDueDate")', function() {
        // TODO: update the code to test the property canChangeDueDate
        expect(instance).to.have.property('canChangeDueDate');
        // expect(instance.canChangeDueDate).to.be(expectedValueLiteral);
      });

      it('should have the property itemCode (base name: "ItemCode")', function() {
        // TODO: update the code to test the property itemCode
        expect(instance).to.have.property('itemCode');
        // expect(instance.itemCode).to.be(expectedValueLiteral);
      });

      it('should have the property itemCode2 (base name: "ItemCode2")', function() {
        // TODO: update the code to test the property itemCode2
        expect(instance).to.have.property('itemCode2');
        // expect(instance.itemCode2).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "Reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property filterOnCustomer (base name: "FilterOnCustomer")', function() {
        // TODO: update the code to test the property filterOnCustomer
        expect(instance).to.have.property('filterOnCustomer');
        // expect(instance.filterOnCustomer).to.be(expectedValueLiteral);
      });

    });
  });

}));
