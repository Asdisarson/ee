/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DkPlusApi);
  }
}(this, function(expect, DkPlusApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DkCloudDataModelMembersGrant', function() {
      beforeEach(function() {
        instance = new DkPlusApi.DkCloudDataModelMembersGrant();
      });

      it('should create an instance of DkCloudDataModelMembersGrant', function() {
        // TODO: update the code to test DkCloudDataModelMembersGrant
        expect(instance).to.be.a(DkPlusApi.DkCloudDataModelMembersGrant);
      });

      it('should have the property code (base name: "Code")', function() {
        // TODO: update the code to test the property code
        expect(instance).to.have.property('code');
        // expect(instance.code).to.be(expectedValueLiteral);
      });

      it('should have the property allowsTravelCost (base name: "AllowsTravelCost")', function() {
        // TODO: update the code to test the property allowsTravelCost
        expect(instance).to.have.property('allowsTravelCost');
        // expect(instance.allowsTravelCost).to.be(expectedValueLiteral);
      });

      it('should have the property amountPerUnitOfTravel (base name: "AmountPerUnitOfTravel")', function() {
        // TODO: update the code to test the property amountPerUnitOfTravel
        expect(instance).to.have.property('amountPerUnitOfTravel');
        // expect(instance.amountPerUnitOfTravel).to.be(expectedValueLiteral);
      });

      it('should have the property attachment1 (base name: "Attachment1")', function() {
        // TODO: update the code to test the property attachment1
        expect(instance).to.have.property('attachment1');
        // expect(instance.attachment1).to.be(expectedValueLiteral);
      });

      it('should have the property attachment2 (base name: "Attachment2")', function() {
        // TODO: update the code to test the property attachment2
        expect(instance).to.have.property('attachment2');
        // expect(instance.attachment2).to.be(expectedValueLiteral);
      });

      it('should have the property attachment3 (base name: "Attachment3")', function() {
        // TODO: update the code to test the property attachment3
        expect(instance).to.have.property('attachment3');
        // expect(instance.attachment3).to.be(expectedValueLiteral);
      });

      it('should have the property attachment4 (base name: "Attachment4")', function() {
        // TODO: update the code to test the property attachment4
        expect(instance).to.have.property('attachment4');
        // expect(instance.attachment4).to.be(expectedValueLiteral);
      });

      it('should have the property attachmentRequired (base name: "AttachmentRequired")', function() {
        // TODO: update the code to test the property attachmentRequired
        expect(instance).to.have.property('attachmentRequired');
        // expect(instance.attachmentRequired).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "Description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property company (base name: "Company")', function() {
        // TODO: update the code to test the property company
        expect(instance).to.have.property('company');
        // expect(instance.company).to.be(expectedValueLiteral);
      });

      it('should have the property text (base name: "Text")', function() {
        // TODO: update the code to test the property text
        expect(instance).to.have.property('text');
        // expect(instance.text).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "Type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property rights (base name: "Rights")', function() {
        // TODO: update the code to test the property rights
        expect(instance).to.have.property('rights');
        // expect(instance.rights).to.be(expectedValueLiteral);
      });

      it('should have the property therapyType (base name: "TherapyType")', function() {
        // TODO: update the code to test the property therapyType
        expect(instance).to.have.property('therapyType');
        // expect(instance.therapyType).to.be(expectedValueLiteral);
      });

      it('should have the property requirements (base name: "Requirements")', function() {
        // TODO: update the code to test the property requirements
        expect(instance).to.have.property('requirements');
        // expect(instance.requirements).to.be(expectedValueLiteral);
      });

      it('should have the property staticTravelAmount (base name: "StaticTravelAmount")', function() {
        // TODO: update the code to test the property staticTravelAmount
        expect(instance).to.have.property('staticTravelAmount');
        // expect(instance.staticTravelAmount).to.be(expectedValueLiteral);
      });

    });
  });

}));
