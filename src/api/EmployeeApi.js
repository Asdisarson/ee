/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelEmployeeEmployeeModel', 'model/DkCloudDataModelProjectProjectModel', 'model/DkCloudDataModelTimeClockEntryModel', 'model/DkPlusAPIModelsEmployeeEmployeeWork'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelEmployeeEmployeeModel'), require('../model/DkCloudDataModelProjectProjectModel'), require('../model/DkCloudDataModelTimeClockEntryModel'), require('../model/DkPlusAPIModelsEmployeeEmployeeWork'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.EmployeeApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelEmployeeEmployeeModel, root.DkPlusApi.DkCloudDataModelProjectProjectModel, root.DkPlusApi.DkCloudDataModelTimeClockEntryModel, root.DkPlusApi.DkPlusAPIModelsEmployeeEmployeeWork);
  }
}(this, function(ApiClient, DkCloudDataModelEmployeeEmployeeModel, DkCloudDataModelProjectProjectModel, DkCloudDataModelTimeClockEntryModel, DkPlusAPIModelsEmployeeEmployeeWork) {
  'use strict';

  /**
   * Employee service.
   * @module api/EmployeeApi
   * @version v1
   */

  /**
   * Constructs a new EmployeeApi. 
   * @alias module:api/EmployeeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the employeeCreateEmployee operation.
     * @callback module:api/EmployeeApi~employeeCreateEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelEmployeeEmployeeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an employee
     * @param {module:model/DkCloudDataModelEmployeeEmployeeModel} employee 
     * @param {module:api/EmployeeApi~employeeCreateEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelEmployeeEmployeeModel}
     */
    this.employeeCreateEmployee = function(employee, callback) {
      var postBody = employee;

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling employeeCreateEmployee");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelEmployeeEmployeeModel;

      return this.apiClient.callApi(
        '/api/v1/general/employee', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the employeeGetEmployee operation.
     * @callback module:api/EmployeeApi~employeeGetEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelEmployeeEmployeeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get an employee
     * @param {String} _number Employee number
     * @param {module:api/EmployeeApi~employeeGetEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelEmployeeEmployeeModel}
     */
    this.employeeGetEmployee = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling employeeGetEmployee");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelEmployeeEmployeeModel;

      return this.apiClient.callApi(
        '/api/v1/general/employee/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the employeeGetEmployeeTimeClock operation.
     * @callback module:api/EmployeeApi~employeeGetEmployeeTimeClockCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelTimeClockEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Time clock entries for an employee
     * @param {String} _number Employee number
     * @param {Number} page Page number (default=1)
     * @param {Number} count Number of objects on page (default=100)
     * @param {module:api/EmployeeApi~employeeGetEmployeeTimeClockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelTimeClockEntryModel>}
     */
    this.employeeGetEmployeeTimeClock = function(_number, page, count, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling employeeGetEmployeeTimeClock");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling employeeGetEmployeeTimeClock");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling employeeGetEmployeeTimeClock");
      }


      var pathParams = {
        'number': _number,
        'page': page,
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelTimeClockEntryModel];

      return this.apiClient.callApi(
        '/api/v1/general/employee/{number}/timeclock/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the employeeGetEmployees operation.
     * @callback module:api/EmployeeApi~employeeGetEmployeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelEmployeeEmployeeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Using this method you can get all employeeÂ´s from the system
     * @param {module:api/EmployeeApi~employeeGetEmployeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelEmployeeEmployeeModel>}
     */
    this.employeeGetEmployees = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelEmployeeEmployeeModel];

      return this.apiClient.callApi(
        '/api/v1/general/employee', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the employeeGetProjectSupervisor operation.
     * @callback module:api/EmployeeApi~employeeGetProjectSupervisorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects where employee is assigned as a supervior
     * @param {String} _number Employee number
     * @param {module:api/EmployeeApi~employeeGetProjectSupervisorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectProjectModel>}
     */
    this.employeeGetProjectSupervisor = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling employeeGetProjectSupervisor");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectProjectModel];

      return this.apiClient.callApi(
        '/api/v1/general/employee/{number}/supervisor', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the employeeGetProjectWorker operation.
     * @callback module:api/EmployeeApi~employeeGetProjectWorkerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects where employee is assigned as a worker
     * @param {String} _number Employee number
     * @param {module:api/EmployeeApi~employeeGetProjectWorkerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectProjectModel>}
     */
    this.employeeGetProjectWorker = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling employeeGetProjectWorker");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectProjectModel];

      return this.apiClient.callApi(
        '/api/v1/general/employee/{number}/worker', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the employeeUpdateEmployee operation.
     * @callback module:api/EmployeeApi~employeeUpdateEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelEmployeeEmployeeModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an employee
     * @param {String} _number Employee number
     * @param {module:model/DkCloudDataModelEmployeeEmployeeModel} employee Employee Object
     * @param {module:api/EmployeeApi~employeeUpdateEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelEmployeeEmployeeModel}
     */
    this.employeeUpdateEmployee = function(_number, employee, callback) {
      var postBody = employee;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling employeeUpdateEmployee");
      }

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling employeeUpdateEmployee");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelEmployeeEmployeeModel;

      return this.apiClient.callApi(
        '/api/v1/general/employee/{number}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the employeeWorkCreateEmployeeWork operation.
     * @callback module:api/EmployeeApi~employeeWorkCreateEmployeeWorkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Employee Work Journal Entry
     * @param {String} employee Employee Number
     * @param {Array.<module:model/DkPlusAPIModelsEmployeeEmployeeWork>} lines Journal Lines
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post Post Lines(Will be Locked and invoiced)
     * @param {module:api/EmployeeApi~employeeWorkCreateEmployeeWorkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.employeeWorkCreateEmployeeWork = function(employee, lines, opts, callback) {
      opts = opts || {};
      var postBody = lines;

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling employeeWorkCreateEmployeeWork");
      }

      // verify the required parameter 'lines' is set
      if (lines === undefined || lines === null) {
        throw new Error("Missing the required parameter 'lines' when calling employeeWorkCreateEmployeeWork");
      }


      var pathParams = {
        'employee': employee
      };
      var queryParams = {
        'post': opts['post'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/general/employee/{employee}/work', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
