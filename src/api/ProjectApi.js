/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelGeneralLedgerTransaction', 'model/DkCloudDataModelProjectPhaseModel', 'model/DkCloudDataModelProjectProjectModel', 'model/DkCloudDataModelProjectRequest', 'model/DkCloudDataModelProjectTaskModel', 'model/DkCloudDataModelSalesInvoiceModel', 'model/DkPlusAPIModelsEmployeeEmployeeWork'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelGeneralLedgerTransaction'), require('../model/DkCloudDataModelProjectPhaseModel'), require('../model/DkCloudDataModelProjectProjectModel'), require('../model/DkCloudDataModelProjectRequest'), require('../model/DkCloudDataModelProjectTaskModel'), require('../model/DkCloudDataModelSalesInvoiceModel'), require('../model/DkPlusAPIModelsEmployeeEmployeeWork'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.ProjectApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelGeneralLedgerTransaction, root.DkPlusApi.DkCloudDataModelProjectPhaseModel, root.DkPlusApi.DkCloudDataModelProjectProjectModel, root.DkPlusApi.DkCloudDataModelProjectRequest, root.DkPlusApi.DkCloudDataModelProjectTaskModel, root.DkPlusApi.DkCloudDataModelSalesInvoiceModel, root.DkPlusApi.DkPlusAPIModelsEmployeeEmployeeWork);
  }
}(this, function(ApiClient, DkCloudDataModelGeneralLedgerTransaction, DkCloudDataModelProjectPhaseModel, DkCloudDataModelProjectProjectModel, DkCloudDataModelProjectRequest, DkCloudDataModelProjectTaskModel, DkCloudDataModelSalesInvoiceModel, DkPlusAPIModelsEmployeeEmployeeWork) {
  'use strict';

  /**
   * Project service.
   * @module api/ProjectApi
   * @version v1
   */

  /**
   * Constructs a new ProjectApi. 
   * @alias module:api/ProjectApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the employeeWorkCreateEmployeeWork operation.
     * @callback module:api/ProjectApi~employeeWorkCreateEmployeeWorkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Employee Work Journal Entry
     * @param {String} employee Employee Number
     * @param {Array.<module:model/DkPlusAPIModelsEmployeeEmployeeWork>} lines Journal Lines
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.post Post Lines(Will be Locked and invoiced)
     * @param {module:api/ProjectApi~employeeWorkCreateEmployeeWorkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.employeeWorkCreateEmployeeWork = function(employee, lines, opts, callback) {
      opts = opts || {};
      var postBody = lines;

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling employeeWorkCreateEmployeeWork");
      }

      // verify the required parameter 'lines' is set
      if (lines === undefined || lines === null) {
        throw new Error("Missing the required parameter 'lines' when calling employeeWorkCreateEmployeeWork");
      }


      var pathParams = {
        'employee': employee
      };
      var queryParams = {
        'post': opts['post'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/general/employee/{employee}/work', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesCreatePhase operation.
     * @callback module:api/ProjectApi~phasesCreatePhaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Phase for the Project System
     * @param {module:model/DkCloudDataModelProjectPhaseModel} model Phase Model
     * @param {module:api/ProjectApi~phasesCreatePhaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.phasesCreatePhase = function(model, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling phasesCreatePhase");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/Phase', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesGetPhase operation.
     * @callback module:api/ProjectApi~phasesGetPhaseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectPhaseModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a phase
     * @param {String} _number Phase Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {module:api/ProjectApi~phasesGetPhaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectPhaseModel>}
     */
    this.phasesGetPhase = function(_number, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling phasesGetPhase");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectPhaseModel];

      return this.apiClient.callApi(
        '/api/v1/Project/Phase/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesGetPhases operation.
     * @callback module:api/ProjectApi~phasesGetPhasesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectPhaseModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project Phases
     * Note: On every project there is a list og Phases for that project. if that list is empty all Phases can be used.
     * @param {Number} page Page Number
     * @param {Number} count Objects per Page
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Date} opts.modifiedAfter Modified after
     * @param {String} opts.include Properties to include
     * @param {module:api/ProjectApi~phasesGetPhasesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectPhaseModel>}
     */
    this.phasesGetPhases = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling phasesGetPhases");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling phasesGetPhases");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedBefore': opts['modifiedBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectPhaseModel];

      return this.apiClient.callApi(
        '/api/v1/Project/Phase/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the phasesUpdatePhase operation.
     * @callback module:api/ProjectApi~phasesUpdatePhaseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Project System Phase
     * @param {String} _number Phase Number
     * @param {module:model/DkCloudDataModelProjectPhaseModel} model Phase Model
     * @param {module:api/ProjectApi~phasesUpdatePhaseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.phasesUpdatePhase = function(_number, model, callback) {
      var postBody = model;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling phasesUpdatePhase");
      }

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling phasesUpdatePhase");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/Phase/{number}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCreateProject operation.
     * @callback module:api/ProjectApi~projectCreateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelProjectProjectModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Method used to create a new Project(Job)
     * @param {module:model/DkCloudDataModelProjectProjectModel} model Project Model
     * @param {module:api/ProjectApi~projectCreateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelProjectProjectModel}
     */
    this.projectCreateProject = function(model, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling projectCreateProject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelProjectProjectModel;

      return this.apiClient.callApi(
        '/api/v1/project', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectGetModified operation.
     * @callback module:api/ProjectApi~projectGetModifiedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get modified Projects
     * @param {Date} modified Modified
     * @param {Number} page Page Number
     * @param {Number} count Projects per Page
     * @param {module:api/ProjectApi~projectGetModifiedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectProjectModel>}
     */
    this.projectGetModified = function(modified, page, count, callback) {
      var postBody = null;

      // verify the required parameter 'modified' is set
      if (modified === undefined || modified === null) {
        throw new Error("Missing the required parameter 'modified' when calling projectGetModified");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling projectGetModified");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling projectGetModified");
      }


      var pathParams = {
        'modified': modified,
        'page': page,
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectProjectModel];

      return this.apiClient.callApi(
        '/api/v1/project/modified/{modified}/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectGetPage operation.
     * @callback module:api/ProjectApi~projectGetPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Projects Paged
     * @param {Number} page Page Number
     * @param {Number} count Projects per Page
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedBefore 
     * @param {Date} opts.modifiedAfter 
     * @param {String} opts.customer 
     * @param {String} opts.group 
     * @param {String} opts.dim1 
     * @param {String} opts.dim2 
     * @param {String} opts.dim3 
     * @param {Number} opts.type 
     * @param {Number} opts.status 
     * @param {String} opts.include 
     * @param {module:api/ProjectApi~projectGetPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectProjectModel>}
     */
    this.projectGetPage = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling projectGetPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling projectGetPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedBefore': opts['modifiedBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'customer': opts['customer'],
        'group': opts['group'],
        'dim1': opts['dim1'],
        'dim2': opts['dim2'],
        'dim3': opts['dim3'],
        'type': opts['type'],
        'status': opts['status'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectProjectModel];

      return this.apiClient.callApi(
        '/api/v1/project/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectGetProject operation.
     * @callback module:api/ProjectApi~projectGetProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelProjectProjectModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project
     * @param {String} _number 
     * @param {module:api/ProjectApi~projectGetProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelProjectProjectModel}
     */
    this.projectGetProject = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling projectGetProject");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelProjectProjectModel;

      return this.apiClient.callApi(
        '/api/v1/project/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectGetProjectInvoices operation.
     * @callback module:api/ProjectApi~projectGetProjectInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesInvoiceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Invoices for Project
     * @param {String} _number 
     * @param {module:api/ProjectApi~projectGetProjectInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesInvoiceModel>}
     */
    this.projectGetProjectInvoices = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling projectGetProjectInvoices");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesInvoiceModel];

      return this.apiClient.callApi(
        '/api/v1/project/{number}/invoice', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectGetProjectRequests operation.
     * @callback module:api/ProjectApi~projectGetProjectRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project Requests
     * @param {String} _number project number
     * @param {Number} page 
     * @param {Number} size 
     * @param {module:api/ProjectApi~projectGetProjectRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectRequest>}
     */
    this.projectGetProjectRequests = function(_number, page, size, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling projectGetProjectRequests");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling projectGetProjectRequests");
      }

      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling projectGetProjectRequests");
      }


      var pathParams = {
        'number': _number,
        'page': page,
        'size': size
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectRequest];

      return this.apiClient.callApi(
        '/api/v1/project/{number}/requests/{page}/{size}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectGetProjects operation.
     * @callback module:api/ProjectApi~projectGetProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Projects
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedBefore 
     * @param {Date} opts.modifiedAfter 
     * @param {String} opts.customer 
     * @param {String} opts.group 
     * @param {String} opts.dim1 
     * @param {String} opts.dim2 
     * @param {String} opts.dim3 
     * @param {Number} opts.type 
     * @param {Number} opts.status 
     * @param {Number} opts.max 
     * @param {String} opts.include 
     * @param {module:api/ProjectApi~projectGetProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectProjectModel>}
     */
    this.projectGetProjects = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'modifiedBefore': opts['modifiedBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'customer': opts['customer'],
        'group': opts['group'],
        'dim1': opts['dim1'],
        'dim2': opts['dim2'],
        'dim3': opts['dim3'],
        'type': opts['type'],
        'status': opts['status'],
        'max': opts['max'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectProjectModel];

      return this.apiClient.callApi(
        '/api/v1/project', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRequestCreateProjectRequets operation.
     * @callback module:api/ProjectApi~projectRequestCreateProjectRequetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DkCloudDataModelProjectRequest} request 
     * @param {module:api/ProjectApi~projectRequestCreateProjectRequetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectRequest>}
     */
    this.projectRequestCreateProjectRequets = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling projectRequestCreateProjectRequets");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectRequest];

      return this.apiClient.callApi(
        '/api/v1/projectrequest', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRequestDeleteProjectRequets operation.
     * @callback module:api/ProjectApi~projectRequestDeleteProjectRequetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/ProjectApi~projectRequestDeleteProjectRequetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectRequest>}
     */
    this.projectRequestDeleteProjectRequets = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectRequestDeleteProjectRequets");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectRequest];

      return this.apiClient.callApi(
        '/api/v1/projectrequest/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRequestGetProjectRequets operation.
     * @callback module:api/ProjectApi~projectRequestGetProjectRequetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectRequest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project Requests
     * @param {Number} page Page Number
     * @param {Number} size Request Per Page
     * @param {Object} opts Optional parameters
     * @param {String} opts._number Request Number
     * @param {String} opts.project Project Number
     * @param {String} opts.parent Parent Request Number
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Date} opts.modifiedAfter Modified After
     * @param {String} opts.customer Customer Number
     * @param {String} opts.dim1 Dim 1 Number
     * @param {String} opts.dim2 Dim 2 Number
     * @param {String} opts.dim3 Dim 3 Number
     * @param {module:model/String} opts.type Request Type
     * @param {module:model/String} opts.status Request Status
     * @param {String} opts.include Properties to include
     * @param {module:api/ProjectApi~projectRequestGetProjectRequetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectRequest>}
     */
    this.projectRequestGetProjectRequets = function(page, size, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling projectRequestGetProjectRequets");
      }

      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling projectRequestGetProjectRequets");
      }


      var pathParams = {
        'page': page,
        'size': size
      };
      var queryParams = {
        'number': opts['_number'],
        'project': opts['project'],
        'parent': opts['parent'],
        'modifiedBefore': opts['modifiedBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'customer': opts['customer'],
        'dim1': opts['dim1'],
        'dim2': opts['dim2'],
        'dim3': opts['dim3'],
        'type': opts['type'],
        'status': opts['status'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectRequest];

      return this.apiClient.callApi(
        '/api/v1/projectrequest/{page}/{size}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRequestUpdateProjectRequets operation.
     * @callback module:api/ProjectApi~projectRequestUpdateProjectRequetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:model/DkCloudDataModelProjectRequest} request 
     * @param {module:api/ProjectApi~projectRequestUpdateProjectRequetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectRequestUpdateProjectRequets = function(id, request, callback) {
      var postBody = request;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectRequestUpdateProjectRequets");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling projectRequestUpdateProjectRequets");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projectrequest/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTransactionGetProjectTransactionPage operation.
     * @callback module:api/ProjectApi~projectTransactionGetProjectTransactionPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelGeneralLedgerTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project Transactions
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Transactions per Page (default=100)
     * @param {Object} opts Optional parameters
     * @param {String} opts.project Project Number
     * @param {String} opts.account General Ledger Account Number
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {Date} opts.modifiedAfter Modified After
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.voucher Voucher
     * @param {String} opts.reference Referenec
     * @param {Number} opts.recordid Record Id After
     * @param {module:model/String} opts.origin Origin
     * @param {String} opts.include Fields to include
     * @param {String} opts.sort Field to Sort
     * @param {module:model/String} opts.sorttype Sort Direction
     * @param {module:api/ProjectApi~projectTransactionGetProjectTransactionPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelGeneralLedgerTransaction>}
     */
    this.projectTransactionGetProjectTransactionPage = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling projectTransactionGetProjectTransactionPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling projectTransactionGetProjectTransactionPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'project': opts['project'],
        'account': opts['account'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'modifiedBefore': opts['modifiedBefore'],
        'dim1': opts['dim1'],
        'voucher': opts['voucher'],
        'reference': opts['reference'],
        'recordid': opts['recordid'],
        'origin': opts['origin'],
        'include': opts['include'],
        'sort': opts['sort'],
        'sorttype': opts['sorttype'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelGeneralLedgerTransaction];

      return this.apiClient.callApi(
        '/api/v1/project/transaction/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksCreateTask operation.
     * @callback module:api/ProjectApi~tasksCreateTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Task for the Project System
     * @param {module:model/DkCloudDataModelProjectTaskModel} model Task Model
     * @param {module:api/ProjectApi~tasksCreateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tasksCreateTask = function(model, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling tasksCreateTask");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/task', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksGetTask operation.
     * @callback module:api/ProjectApi~tasksGetTaskCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectTaskModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} _number 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {module:api/ProjectApi~tasksGetTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectTaskModel>}
     */
    this.tasksGetTask = function(_number, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling tasksGetTask");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectTaskModel];

      return this.apiClient.callApi(
        '/api/v1/Project/Tasks/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksGetTasks operation.
     * @callback module:api/ProjectApi~tasksGetTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectTaskModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project Tasks
     * Note: On every project there is a list og Tasks for that project. if that list is empty all tasks can be used.
     * @param {Number} page Page Number
     * @param {Number} count Objects per Page
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Date} opts.modifiedAfter Modified after
     * @param {String} opts.include Properties to include
     * @param {module:api/ProjectApi~tasksGetTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectTaskModel>}
     */
    this.tasksGetTasks = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling tasksGetTasks");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling tasksGetTasks");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedBefore': opts['modifiedBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectTaskModel];

      return this.apiClient.callApi(
        '/api/v1/Project/Tasks/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksUpdateTask operation.
     * @callback module:api/ProjectApi~tasksUpdateTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} _number 
     * @param {module:model/DkCloudDataModelProjectTaskModel} model 
     * @param {module:api/ProjectApi~tasksUpdateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tasksUpdateTask = function(_number, model, callback) {
      var postBody = model;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling tasksUpdateTask");
      }

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling tasksUpdateTask");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/projects/task/{number}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
