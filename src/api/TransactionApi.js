/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelCustomersTransactionModel', 'model/DkCloudDataModelGeneralLedgerTransaction', 'model/DkCloudDataModelProductsTransactionsModel', 'model/DkCloudDataModelVendorsTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelCustomersTransactionModel'), require('../model/DkCloudDataModelGeneralLedgerTransaction'), require('../model/DkCloudDataModelProductsTransactionsModel'), require('../model/DkCloudDataModelVendorsTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.TransactionApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelCustomersTransactionModel, root.DkPlusApi.DkCloudDataModelGeneralLedgerTransaction, root.DkPlusApi.DkCloudDataModelProductsTransactionsModel, root.DkPlusApi.DkCloudDataModelVendorsTransaction);
  }
}(this, function(ApiClient, DkCloudDataModelCustomersTransactionModel, DkCloudDataModelGeneralLedgerTransaction, DkCloudDataModelProductsTransactionsModel, DkCloudDataModelVendorsTransaction) {
  'use strict';

  /**
   * Transaction service.
   * @module api/TransactionApi
   * @version v1
   */

  /**
   * Constructs a new TransactionApi. 
   * @alias module:api/TransactionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customerTransactionGetCustomerTransactions operation.
     * @callback module:api/TransactionApi~customerTransactionGetCustomerTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelCustomersTransactionModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get General Ledger Transaction
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Transactions per Page (default=100)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedAfter Transaction modified after
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {Date} opts.dueAfter Due After
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.voucher Voucher
     * @param {String} opts.reference Reference
     * @param {Number} opts.recordid Id Greater Than
     * @param {String} opts.include fields to include
     * @param {String} opts.customer Customer Number
     * @param {module:api/TransactionApi~customerTransactionGetCustomerTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelCustomersTransactionModel>}
     */
    this.customerTransactionGetCustomerTransactions = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling customerTransactionGetCustomerTransactions");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling customerTransactionGetCustomerTransactions");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedAfter': opts['modifiedAfter'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'dueAfter': opts['dueAfter'],
        'dim1': opts['dim1'],
        'voucher': opts['voucher'],
        'reference': opts['reference'],
        'recordid': opts['recordid'],
        'include': opts['include'],
        'customer': opts['customer'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelCustomersTransactionModel];

      return this.apiClient.callApi(
        '/api/v1/customer/transaction/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the generalLedgerTransactionGetGeneralTransactionPage operation.
     * @callback module:api/TransactionApi~generalLedgerTransactionGetGeneralTransactionPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelGeneralLedgerTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get General Ledger Transaction
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Transactions per Page (default=100)
     * @param {Object} opts Optional parameters
     * @param {String} opts.account General Ledger Account Number
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {Date} opts.modifiedAfter Modified After
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Date} opts.dueAfter Due After
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.voucher Voucher
     * @param {String} opts.reference Reference
     * @param {Number} opts.recordid Id Greter Than
     * @param {String} opts.include Fields to include
     * @param {String} opts.sort Field to sort by
     * @param {module:model/String} opts.sorttype Sort Direction
     * @param {module:api/TransactionApi~generalLedgerTransactionGetGeneralTransactionPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelGeneralLedgerTransaction>}
     */
    this.generalLedgerTransactionGetGeneralTransactionPage = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling generalLedgerTransactionGetGeneralTransactionPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling generalLedgerTransactionGetGeneralTransactionPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'account': opts['account'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'modifiedBefore': opts['modifiedBefore'],
        'dueAfter': opts['dueAfter'],
        'dim1': opts['dim1'],
        'voucher': opts['voucher'],
        'reference': opts['reference'],
        'recordid': opts['recordid'],
        'include': opts['include'],
        'sort': opts['sort'],
        'sorttype': opts['sorttype'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelGeneralLedgerTransaction];

      return this.apiClient.callApi(
        '/api/v1/generalledger/transaction/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productTransactionGetInventoryTransactionsPage operation.
     * @callback module:api/TransactionApi~productTransactionGetInventoryTransactionsPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsTransactionsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} page Page Number
     * @param {Number} count Objects to return
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedAfter Modified After
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.itemcode Item Code
     * @param {String} opts.warehouse Wharehouse
     * @param {String} opts.currency Currency Code
     * @param {String} opts.reference Reference
     * @param {String} opts.include Fields to include
     * @param {module:api/TransactionApi~productTransactionGetInventoryTransactionsPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsTransactionsModel>}
     */
    this.productTransactionGetInventoryTransactionsPage = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling productTransactionGetInventoryTransactionsPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling productTransactionGetInventoryTransactionsPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedAfter': opts['modifiedAfter'],
        'modifiedBefore': opts['modifiedBefore'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'dim1': opts['dim1'],
        'itemcode': opts['itemcode'],
        'warehouse': opts['warehouse'],
        'Currency': opts['currency'],
        'reference': opts['reference'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsTransactionsModel];

      return this.apiClient.callApi(
        '/api/v1/product/transaction/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectTransactionGetProjectTransactionPage operation.
     * @callback module:api/TransactionApi~projectTransactionGetProjectTransactionPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelGeneralLedgerTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project Transactions
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Transactions per Page (default=100)
     * @param {Object} opts Optional parameters
     * @param {String} opts.project Project Number
     * @param {String} opts.account General Ledger Account Number
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {Date} opts.modifiedAfter Modified After
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.voucher Voucher
     * @param {String} opts.reference Referenec
     * @param {Number} opts.recordid Record Id After
     * @param {module:model/String} opts.origin Origin
     * @param {String} opts.include Fields to include
     * @param {String} opts.sort Field to Sort
     * @param {module:model/String} opts.sorttype Sort Direction
     * @param {module:api/TransactionApi~projectTransactionGetProjectTransactionPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelGeneralLedgerTransaction>}
     */
    this.projectTransactionGetProjectTransactionPage = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling projectTransactionGetProjectTransactionPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling projectTransactionGetProjectTransactionPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'project': opts['project'],
        'account': opts['account'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'modifiedBefore': opts['modifiedBefore'],
        'dim1': opts['dim1'],
        'voucher': opts['voucher'],
        'reference': opts['reference'],
        'recordid': opts['recordid'],
        'origin': opts['origin'],
        'include': opts['include'],
        'sort': opts['sort'],
        'sorttype': opts['sorttype'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelGeneralLedgerTransaction];

      return this.apiClient.callApi(
        '/api/v1/project/transaction/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorTransactionGetVendorTransactions operation.
     * @callback module:api/TransactionApi~vendorTransactionGetVendorTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelVendorsTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Transactions per Page (default=100)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedAfter Transaction modified after
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {Date} opts.dueAfter Due After
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.voucher Voucher
     * @param {String} opts.reference Reference
     * @param {Number} opts.recordid 
     * @param {module:api/TransactionApi~vendorTransactionGetVendorTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelVendorsTransaction>}
     */
    this.vendorTransactionGetVendorTransactions = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling vendorTransactionGetVendorTransactions");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling vendorTransactionGetVendorTransactions");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedAfter': opts['modifiedAfter'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'dueAfter': opts['dueAfter'],
        'dim1': opts['dim1'],
        'voucher': opts['voucher'],
        'reference': opts['reference'],
        'recordid': opts['recordid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelVendorsTransaction];

      return this.apiClient.callApi(
        '/api/v1/vendor/transaction/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
