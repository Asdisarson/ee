/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelCustomersCustomerGroupModel', 'model/DkCloudDataModelCustomersCustomerModel', 'model/DkCloudDataModelCustomersTransactionModel', 'model/DkCloudDataModelGeneralCreditCard', 'model/DkCloudDataModelProductsTransactionsModel', 'model/DkCloudDataModelProjectProjectModel', 'model/DkCloudDataModelSalesInvoiceModel', 'model/DkCloudDataModelSalesQuoteHead', 'model/DkCloudDataModelSalesSalesOrderModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelCustomersCustomerGroupModel'), require('../model/DkCloudDataModelCustomersCustomerModel'), require('../model/DkCloudDataModelCustomersTransactionModel'), require('../model/DkCloudDataModelGeneralCreditCard'), require('../model/DkCloudDataModelProductsTransactionsModel'), require('../model/DkCloudDataModelProjectProjectModel'), require('../model/DkCloudDataModelSalesInvoiceModel'), require('../model/DkCloudDataModelSalesQuoteHead'), require('../model/DkCloudDataModelSalesSalesOrderModel'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.CustomerApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelCustomersCustomerGroupModel, root.DkPlusApi.DkCloudDataModelCustomersCustomerModel, root.DkPlusApi.DkCloudDataModelCustomersTransactionModel, root.DkPlusApi.DkCloudDataModelGeneralCreditCard, root.DkPlusApi.DkCloudDataModelProductsTransactionsModel, root.DkPlusApi.DkCloudDataModelProjectProjectModel, root.DkPlusApi.DkCloudDataModelSalesInvoiceModel, root.DkPlusApi.DkCloudDataModelSalesQuoteHead, root.DkPlusApi.DkCloudDataModelSalesSalesOrderModel);
  }
}(this, function(ApiClient, DkCloudDataModelCustomersCustomerGroupModel, DkCloudDataModelCustomersCustomerModel, DkCloudDataModelCustomersTransactionModel, DkCloudDataModelGeneralCreditCard, DkCloudDataModelProductsTransactionsModel, DkCloudDataModelProjectProjectModel, DkCloudDataModelSalesInvoiceModel, DkCloudDataModelSalesQuoteHead, DkCloudDataModelSalesSalesOrderModel) {
  'use strict';

  /**
   * Customer service.
   * @module api/CustomerApi
   * @version v1
   */

  /**
   * Constructs a new CustomerApi. 
   * @alias module:api/CustomerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customerCallerIdByPhone operation.
     * @callback module:api/CustomerApi~customerCallerIdByPhoneCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Phone Caller id by phone number
     * @param {String} _number Phone Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Display format
     * @param {module:api/CustomerApi~customerCallerIdByPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.customerCallerIdByPhone = function(_number, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling customerCallerIdByPhone");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/Customer/Phone/{number}/display', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCreateCustomer operation.
     * @callback module:api/CustomerApi~customerCreateCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Customer
     * @param {module:model/DkCloudDataModelCustomersCustomerModel} obj Customer Model
     * @param {module:api/CustomerApi~customerCreateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerCreateCustomer = function(obj, callback) {
      var postBody = obj;

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling customerCreateCustomer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Customer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerDeleteCustomer operation.
     * @callback module:api/CustomerApi~customerDeleteCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Customer
     * @param {String} customer Customer Number
     * @param {module:api/CustomerApi~customerDeleteCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerDeleteCustomer = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerDeleteCustomer");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetAttachment operation.
     * @callback module:api/CustomerApi~customerGetAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a document assigned to a Customer
     * @param {String} customer Customer Number
     * @param {Number} id Document Id
     * @param {module:api/CustomerApi~customerGetAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.customerGetAttachment = function(customer, id, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetAttachment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling customerGetAttachment");
      }


      var pathParams = {
        'customer': customer,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/customer/{customer}/attachment/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomerById operation.
     * @callback module:api/CustomerApi~customerGetCustomerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelCustomersCustomerModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Customer
     * @param {String} customer Customer Number
     * @param {module:api/CustomerApi~customerGetCustomerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelCustomersCustomerModel}
     */
    this.customerGetCustomerById = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetCustomerById");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelCustomersCustomerModel;

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomerCard operation.
     * @callback module:api/CustomerApi~customerGetCustomerCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelGeneralCreditCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customer Card Information
     * @param {String} customer 
     * @param {module:api/CustomerApi~customerGetCustomerCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelGeneralCreditCard}
     */
    this.customerGetCustomerCard = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetCustomerCard");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelGeneralCreditCard;

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}/card', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomerCount operation.
     * @callback module:api/CustomerApi~customerGetCustomerCountCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the count of customer that have changed by the supplied conditions
     * @param {Object} opts Optional parameters
     * @param {String} opts.group 
     * @param {String} opts.zipcode 
     * @param {String} opts.country 
     * @param {String} opts.salesperson 
     * @param {String} opts.paymentterm 
     * @param {String} opts.paymentmode 
     * @param {Boolean} opts.novat 
     * @param {Boolean} opts.blocked 
     * @param {String} opts.attribute 
     * @param {String} opts.attributecomment 
     * @param {String} opts.attributeoption 
     * @param {String} opts.memo 
     * @param {Boolean} opts.deleted 
     * @param {Date} opts.modifiedBefore 
     * @param {Date} opts.modifiedAfter 
     * @param {module:api/CustomerApi~customerGetCustomerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.customerGetCustomerCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'group': opts['group'],
        'zipcode': opts['zipcode'],
        'country': opts['country'],
        'salesperson': opts['salesperson'],
        'paymentterm': opts['paymentterm'],
        'paymentmode': opts['paymentmode'],
        'novat': opts['novat'],
        'blocked': opts['blocked'],
        'attribute': opts['attribute'],
        'attributecomment': opts['attributecomment'],
        'attributeoption': opts['attributeoption'],
        'memo': opts['memo'],
        'deleted': opts['deleted'],
        'modifiedBefore': opts['modifiedBefore'],
        'modifiedAfter': opts['modifiedAfter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/api/v1/Customer/info/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomerInvoices operation.
     * @callback module:api/CustomerApi~customerGetCustomerInvoicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesInvoiceModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Invoices for a Customer
     * @param {String} customer Customer Number
     * @param {module:api/CustomerApi~customerGetCustomerInvoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesInvoiceModel>}
     */
    this.customerGetCustomerInvoices = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetCustomerInvoices");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesInvoiceModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}/invoice', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomerOrders operation.
     * @callback module:api/CustomerApi~customerGetCustomerOrdersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesSalesOrderModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Orders for a Customer
     * @param {String} customer Customer Number
     * @param {module:api/CustomerApi~customerGetCustomerOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesSalesOrderModel>}
     */
    this.customerGetCustomerOrders = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetCustomerOrders");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesSalesOrderModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}/order', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomerQuote operation.
     * @callback module:api/CustomerApi~customerGetCustomerQuoteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesQuoteHead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Quotes for a Customer
     * @param {String} customer Customer Number
     * @param {module:api/CustomerApi~customerGetCustomerQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesQuoteHead>}
     */
    this.customerGetCustomerQuote = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetCustomerQuote");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesQuoteHead];

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}/quote', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomerTransactions operation.
     * @callback module:api/CustomerApi~customerGetCustomerTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsTransactionsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transactions for a Customer
     * @param {String} customer Customer Number
     * @param {module:api/CustomerApi~customerGetCustomerTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsTransactionsModel>}
     */
    this.customerGetCustomerTransactions = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetCustomerTransactions");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsTransactionsModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}/transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomers operation.
     * @callback module:api/CustomerApi~customerGetCustomersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelCustomersCustomerModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customers
     * @param {Boolean} includeObjects Include Objects
     * @param {Object} opts Optional parameters
     * @param {String} opts.include Field to include
     * @param {module:api/CustomerApi~customerGetCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelCustomersCustomerModel>}
     */
    this.customerGetCustomers = function(includeObjects, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'includeObjects' is set
      if (includeObjects === undefined || includeObjects === null) {
        throw new Error("Missing the required parameter 'includeObjects' when calling customerGetCustomers");
      }


      var pathParams = {
        'includeObjects': includeObjects
      };
      var queryParams = {
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelCustomersCustomerModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/{includeObjects}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCustomersPaged operation.
     * @callback module:api/CustomerApi~customerGetCustomersPagedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelCustomersCustomerModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customers base on Filter
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Customers per page (default=100)
     * @param {Object} opts Optional parameters
     * @param {String} opts.group Group
     * @param {String} opts.zipcode Zip Code
     * @param {String} opts.country Country
     * @param {String} opts.salesperson Sales Person
     * @param {String} opts.paymentterm Payment Term
     * @param {String} opts.paymentmode Payment Mode
     * @param {Boolean} opts.novat No VAT
     * @param {Boolean} opts.blocked Blocked
     * @param {String} opts.attribute Attribute
     * @param {String} opts.attributecomment Attribute Comment
     * @param {String} opts.attributeoption Attribute Option
     * @param {String} opts.memo Search memo for string
     * @param {Boolean} opts.deleted Customer Deleted
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Date} opts.modifiedAfter Modified After
     * @param {String} opts.include Fields to Include
     * @param {String} opts.email Email
     * @param {module:api/CustomerApi~customerGetCustomersPagedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelCustomersCustomerModel>}
     */
    this.customerGetCustomersPaged = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling customerGetCustomersPaged");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling customerGetCustomersPaged");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'group': opts['group'],
        'zipcode': opts['zipcode'],
        'country': opts['country'],
        'salesperson': opts['salesperson'],
        'paymentterm': opts['paymentterm'],
        'paymentmode': opts['paymentmode'],
        'novat': opts['novat'],
        'blocked': opts['blocked'],
        'attribute': opts['attribute'],
        'attributecomment': opts['attributecomment'],
        'attributeoption': opts['attributeoption'],
        'memo': opts['memo'],
        'deleted': opts['deleted'],
        'modifiedBefore': opts['modifiedBefore'],
        'modifiedAfter': opts['modifiedAfter'],
        'include': opts['include'],
        'email': opts['email'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelCustomersCustomerModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetCutomerProjects operation.
     * @callback module:api/CustomerApi~customerGetCutomerProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProjectProjectModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Projects for a Customer
     * @param {String} customer Customer Number
     * @param {module:api/CustomerApi~customerGetCutomerProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProjectProjectModel>}
     */
    this.customerGetCutomerProjects = function(customer, callback) {
      var postBody = null;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerGetCutomerProjects");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProjectProjectModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}/project', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetGroup operation.
     * @callback module:api/CustomerApi~customerGetGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelCustomersCustomerModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Customers by Groups
     * @param {String} id Group Number
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Groups per Page (default=100)
     * @param {module:api/CustomerApi~customerGetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelCustomersCustomerModel>}
     */
    this.customerGetGroup = function(id, page, count, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling customerGetGroup");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling customerGetGroup");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling customerGetGroup");
      }


      var pathParams = {
        'id': id,
        'page': page,
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelCustomersCustomerModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/group/{id}/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGetSearch operation.
     * @callback module:api/CustomerApi~customerGetSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelCustomersCustomerModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Customers
     * @param {String} value Search Value
     * @param {Number} max Return Maximum Count
     * @param {module:api/CustomerApi~customerGetSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelCustomersCustomerModel>}
     */
    this.customerGetSearch = function(value, max, callback) {
      var postBody = null;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling customerGetSearch");
      }

      // verify the required parameter 'max' is set
      if (max === undefined || max === null) {
        throw new Error("Missing the required parameter 'max' when calling customerGetSearch");
      }


      var pathParams = {
        'value': value,
        'max': max
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelCustomersCustomerModel];

      return this.apiClient.callApi(
        '/api/v1/Customer/search/{value}/{max}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGroupGet operation.
     * @callback module:api/CustomerApi~customerGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelCustomersCustomerGroupModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer groups
     * @param {module:api/CustomerApi~customerGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelCustomersCustomerGroupModel>}
     */
    this.customerGroupGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelCustomersCustomerGroupModel];

      return this.apiClient.callApi(
        '/api/v1/customergroup', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerSearchByPhone operation.
     * @callback module:api/CustomerApi~customerSearchByPhoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelCustomersCustomerModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup customer by phone number  this looks into Phone,PhoneLocal,PhoneMobile on customer,contacts and Recivers
     * @param {String} _number Phone Number
     * @param {module:api/CustomerApi~customerSearchByPhoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelCustomersCustomerModel}
     */
    this.customerSearchByPhone = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling customerSearchByPhone");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelCustomersCustomerModel;

      return this.apiClient.callApi(
        '/api/v1/Customer/Phone/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerTransactionGetCustomerTransactions operation.
     * @callback module:api/CustomerApi~customerTransactionGetCustomerTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelCustomersTransactionModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get General Ledger Transaction
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Transactions per Page (default=100)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedAfter Transaction modified after
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {Date} opts.dueAfter Due After
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.voucher Voucher
     * @param {String} opts.reference Reference
     * @param {Number} opts.recordid Id Greater Than
     * @param {String} opts.include fields to include
     * @param {String} opts.customer Customer Number
     * @param {module:api/CustomerApi~customerTransactionGetCustomerTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelCustomersTransactionModel>}
     */
    this.customerTransactionGetCustomerTransactions = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling customerTransactionGetCustomerTransactions");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling customerTransactionGetCustomerTransactions");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedAfter': opts['modifiedAfter'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'dueAfter': opts['dueAfter'],
        'dim1': opts['dim1'],
        'voucher': opts['voucher'],
        'reference': opts['reference'],
        'recordid': opts['recordid'],
        'include': opts['include'],
        'customer': opts['customer'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelCustomersTransactionModel];

      return this.apiClient.callApi(
        '/api/v1/customer/transaction/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerUpdateCustomer operation.
     * @callback module:api/CustomerApi~customerUpdateCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Customer
     * @param {String} customer Customer Number
     * @param {module:model/DkCloudDataModelCustomersCustomerModel} obj Customer Model
     * @param {module:api/CustomerApi~customerUpdateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerUpdateCustomer = function(customer, obj, callback) {
      var postBody = obj;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerUpdateCustomer");
      }

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling customerUpdateCustomer");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customerUpdateCustomerCard operation.
     * @callback module:api/CustomerApi~customerUpdateCustomerCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} customer 
     * @param {module:model/DkCloudDataModelGeneralCreditCard} card 
     * @param {module:api/CustomerApi~customerUpdateCustomerCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.customerUpdateCustomerCard = function(customer, card, callback) {
      var postBody = card;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling customerUpdateCustomerCard");
      }

      // verify the required parameter 'card' is set
      if (card === undefined || card === null) {
        throw new Error("Missing the required parameter 'card' when calling customerUpdateCustomerCard");
      }


      var pathParams = {
        'customer': customer
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Customer/{customer}/card', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
