/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelSalesSalesOrderModel', 'model/DkPlusAPIModelsOrderHead', 'model/DkPlusAPIModelsStatusValueModel', 'model/DkPlusMailModelMailInfo', 'model/VLinkDkSoftwareDkSOAPTOrder'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelSalesSalesOrderModel'), require('../model/DkPlusAPIModelsOrderHead'), require('../model/DkPlusAPIModelsStatusValueModel'), require('../model/DkPlusMailModelMailInfo'), require('../model/VLinkDkSoftwareDkSOAPTOrder'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.SalesOrderApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelSalesSalesOrderModel, root.DkPlusApi.DkPlusAPIModelsOrderHead, root.DkPlusApi.DkPlusAPIModelsStatusValueModel, root.DkPlusApi.DkPlusMailModelMailInfo, root.DkPlusApi.VLinkDkSoftwareDkSOAPTOrder);
  }
}(this, function(ApiClient, DkCloudDataModelSalesSalesOrderModel, DkPlusAPIModelsOrderHead, DkPlusAPIModelsStatusValueModel, DkPlusMailModelMailInfo, VLinkDkSoftwareDkSOAPTOrder) {
  'use strict';

  /**
   * SalesOrder service.
   * @module api/SalesOrderApi
   * @version v1
   */

  /**
   * Constructs a new SalesOrderApi. 
   * @alias module:api/SalesOrderApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the salesOrderCreateOrder operation.
     * @callback module:api/SalesOrderApi~salesOrderCreateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkPlusAPIModelsStatusValueModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Sales Order
     * @param {module:model/DkPlusAPIModelsOrderHead} value Order Model
     * @param {module:api/SalesOrderApi~salesOrderCreateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkPlusAPIModelsStatusValueModel}
     */
    this.salesOrderCreateOrder = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling salesOrderCreateOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkPlusAPIModelsStatusValueModel;

      return this.apiClient.callApi(
        '/api/v1/sales/order', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderDelete operation.
     * @callback module:api/SalesOrderApi~salesOrderDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Sales Order
     * @param {Number} id Order Id
     * @param {module:api/SalesOrderApi~salesOrderDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.salesOrderDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/sales/order/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderGetByReference operation.
     * @callback module:api/SalesOrderApi~salesOrderGetByReferenceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesSalesOrderModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sales Order by Reference
     * @param {String} reference Order Reference
     * @param {module:api/SalesOrderApi~salesOrderGetByReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesSalesOrderModel>}
     */
    this.salesOrderGetByReference = function(reference, callback) {
      var postBody = null;

      // verify the required parameter 'reference' is set
      if (reference === undefined || reference === null) {
        throw new Error("Missing the required parameter 'reference' when calling salesOrderGetByReference");
      }


      var pathParams = {
        'reference': reference
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesSalesOrderModel];

      return this.apiClient.callApi(
        '/api/v1/sales/order/reference/{reference}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderGetHtml operation.
     * @callback module:api/SalesOrderApi~salesOrderGetHtmlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sales Order as HTML
     * @param {Number} _number Order Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.custom Customer Report Name
     * @param {module:api/SalesOrderApi~salesOrderGetHtmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.salesOrderGetHtml = function(_number, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling salesOrderGetHtml");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
        'custom': opts['custom'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/sales/order/{number}/html', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderGetOrder operation.
     * @callback module:api/SalesOrderApi~salesOrderGetOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelSalesSalesOrderModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sales Order
     * @param {Number} id Order Id
     * @param {module:api/SalesOrderApi~salesOrderGetOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelSalesSalesOrderModel}
     */
    this.salesOrderGetOrder = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderGetOrder");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelSalesSalesOrderModel;

      return this.apiClient.callApi(
        '/api/v1/sales/order/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderGetOrderFromFilter operation.
     * @callback module:api/SalesOrderApi~salesOrderGetOrderFromFilterCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesSalesOrderModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Orders by Filter
     * @param {Date} modified Modified After
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.status Order Status
     * @param {module:model/String} opts.deliveryStatus Order Delivery status
     * @param {module:api/SalesOrderApi~salesOrderGetOrderFromFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesSalesOrderModel>}
     */
    this.salesOrderGetOrderFromFilter = function(modified, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'modified' is set
      if (modified === undefined || modified === null) {
        throw new Error("Missing the required parameter 'modified' when calling salesOrderGetOrderFromFilter");
      }


      var pathParams = {
      };
      var queryParams = {
        'modified': modified,
        'Status': opts['status'],
        'DeliveryStatus': opts['deliveryStatus'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesSalesOrderModel];

      return this.apiClient.callApi(
        '/api/v1/sales/order', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderGetPDF operation.
     * @callback module:api/SalesOrderApi~salesOrderGetPDFCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sales Order as PDF
     * @param {Number} _number Order Number
     * @param {Object} opts Optional parameters
     * @param {String} opts.custom Customer Report Name
     * @param {module:api/SalesOrderApi~salesOrderGetPDFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.salesOrderGetPDF = function(_number, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling salesOrderGetPDF");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
        'custom': opts['custom'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/sales/order/{number}/pdf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderSendEmail operation.
     * @callback module:api/SalesOrderApi~salesOrderSendEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Sales Order to Email
     * @param {Number} _number Order Number
     * @param {module:model/DkPlusMailModelMailInfo} message Message Model
     * @param {Object} opts Optional parameters
     * @param {String} opts.custom Customer Report Name
     * @param {module:api/SalesOrderApi~salesOrderSendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.salesOrderSendEmail = function(_number, message, opts, callback) {
      opts = opts || {};
      var postBody = message;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling salesOrderSendEmail");
      }

      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling salesOrderSendEmail");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
        'custom': opts['custom'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/sales/order/{number}/email', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesOrderUpdateOrder operation.
     * @callback module:api/SalesOrderApi~salesOrderUpdateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VLinkDkSoftwareDkSOAPTOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sales Order
     * @param {Number} id Order Id
     * @param {module:model/DkCloudDataModelSalesSalesOrderModel} value Order Model
     * @param {module:api/SalesOrderApi~salesOrderUpdateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VLinkDkSoftwareDkSOAPTOrder}
     */
    this.salesOrderUpdateOrder = function(id, value, callback) {
      var postBody = value;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling salesOrderUpdateOrder");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling salesOrderUpdateOrder");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = VLinkDkSoftwareDkSOAPTOrder;

      return this.apiClient.callApi(
        '/api/v1/sales/order/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
