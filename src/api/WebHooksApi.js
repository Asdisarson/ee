/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelCompanyWebHookSubscription'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelCompanyWebHookSubscription'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.WebHooksApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelCompanyWebHookSubscription);
  }
}(this, function(ApiClient, DkCloudDataModelCompanyWebHookSubscription) {
  'use strict';

  /**
   * WebHooks service.
   * @module api/WebHooksApi
   * @version v1
   */

  /**
   * Constructs a new WebHooksApi. 
   * @alias module:api/WebHooksApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webHooksCreateWebHookTest operation.
     * @callback module:api/WebHooksApi~webHooksCreateWebHookTestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Do a webhook test by posting to the supplied endpoint
     * @param {module:model/DkCloudDataModelCompanyWebHookSubscription} value Subscription Model
     * @param {module:api/WebHooksApi~webHooksCreateWebHookTestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webHooksCreateWebHookTest = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling webHooksCreateWebHookTest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/admin/webhook/action/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webHooksCreateWebhook operation.
     * @callback module:api/WebHooksApi~webHooksCreateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelCompanyWebHookSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a hook with defined options
     * @param {module:model/DkCloudDataModelCompanyWebHookSubscription} value Subscription Model
     * @param {module:api/WebHooksApi~webHooksCreateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelCompanyWebHookSubscription}
     */
    this.webHooksCreateWebhook = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling webHooksCreateWebhook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelCompanyWebHookSubscription;

      return this.apiClient.callApi(
        '/api/v1/admin/webhook', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webHooksDeleteWebHook operation.
     * @callback module:api/WebHooksApi~webHooksDeleteWebHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/WebHooksApi~webHooksDeleteWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webHooksDeleteWebHook = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webHooksDeleteWebHook");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/admin/webhook/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webHooksGetHookById operation.
     * @callback module:api/WebHooksApi~webHooksGetHookByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelCompanyWebHookSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get WebHook by Id
     * @param {String} id Subscription Id
     * @param {module:api/WebHooksApi~webHooksGetHookByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelCompanyWebHookSubscription}
     */
    this.webHooksGetHookById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webHooksGetHookById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelCompanyWebHookSubscription;

      return this.apiClient.callApi(
        '/api/v1/admin/webhook/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webHooksGetWebHooks operation.
     * @callback module:api/WebHooksApi~webHooksGetWebHooksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Webhooks for the company
     * @param {module:api/WebHooksApi~webHooksGetWebHooksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webHooksGetWebHooks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/admin/webhook', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webHooksUpdateWebHook operation.
     * @callback module:api/WebHooksApi~webHooksUpdateWebHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update webhook settings
     * @param {String} id 
     * @param {module:model/DkCloudDataModelCompanyWebHookSubscription} value 
     * @param {module:api/WebHooksApi~webHooksUpdateWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webHooksUpdateWebHook = function(id, value, callback) {
      var postBody = value;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webHooksUpdateWebHook");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling webHooksUpdateWebHook");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/admin/webhook/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
