/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelPurchaseHeadModel', 'model/DkCloudDataModelPurchaseLineModel', 'model/DkPlusAPIModelsPurchaseHead'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelPurchaseHeadModel'), require('../model/DkCloudDataModelPurchaseLineModel'), require('../model/DkPlusAPIModelsPurchaseHead'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.PurchaseApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelPurchaseHeadModel, root.DkPlusApi.DkCloudDataModelPurchaseLineModel, root.DkPlusApi.DkPlusAPIModelsPurchaseHead);
  }
}(this, function(ApiClient, DkCloudDataModelPurchaseHeadModel, DkCloudDataModelPurchaseLineModel, DkPlusAPIModelsPurchaseHead) {
  'use strict';

  /**
   * Purchase service.
   * @module api/PurchaseApi
   * @version v1
   */

  /**
   * Constructs a new PurchaseApi. 
   * @alias module:api/PurchaseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the purchaseDelete operation.
     * @callback module:api/PurchaseApi~purchaseDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Purchase Order
     * @param {Number} id Order Id
     * @param {module:api/PurchaseApi~purchaseDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.purchaseDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling purchaseDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/purchase/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseDeleteLine operation.
     * @callback module:api/PurchaseApi~purchaseDeleteLineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Purchase Order Line
     * @param {Number} id Order Id
     * @param {Number} seq Line Sequence Number
     * @param {module:api/PurchaseApi~purchaseDeleteLineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.purchaseDeleteLine = function(id, seq, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling purchaseDeleteLine");
      }

      // verify the required parameter 'seq' is set
      if (seq === undefined || seq === null) {
        throw new Error("Missing the required parameter 'seq' when calling purchaseDeleteLine");
      }


      var pathParams = {
        'id': id,
        'seq': seq
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/purchase/{id}/line/{seq}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseGet operation.
     * @callback module:api/PurchaseApi~purchaseGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelPurchaseHeadModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Purchase Orders
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modified Modified
     * @param {module:api/PurchaseApi~purchaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelPurchaseHeadModel>}
     */
    this.purchaseGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'modified': opts['modified'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelPurchaseHeadModel];

      return this.apiClient.callApi(
        '/api/v1/purchase', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseGetById operation.
     * @callback module:api/PurchaseApi~purchaseGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelPurchaseHeadModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Purchase Order
     * @param {Number} id Order Id
     * @param {module:api/PurchaseApi~purchaseGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelPurchaseHeadModel}
     */
    this.purchaseGetById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling purchaseGetById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelPurchaseHeadModel;

      return this.apiClient.callApi(
        '/api/v1/purchase/id/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseGetByNumber operation.
     * @callback module:api/PurchaseApi~purchaseGetByNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelPurchaseHeadModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Purchase Order By Number
     * @param {String} _number Purchase Order Number
     * @param {module:api/PurchaseApi~purchaseGetByNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelPurchaseHeadModel}
     */
    this.purchaseGetByNumber = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling purchaseGetByNumber");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelPurchaseHeadModel;

      return this.apiClient.callApi(
        '/api/v1/purchase/number/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseGetByReference operation.
     * @callback module:api/PurchaseApi~purchaseGetByReferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelPurchaseHeadModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Purchase Order By Reference
     * @param {String} _number Reference Number
     * @param {module:api/PurchaseApi~purchaseGetByReferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelPurchaseHeadModel}
     */
    this.purchaseGetByReference = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling purchaseGetByReference");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelPurchaseHeadModel;

      return this.apiClient.callApi(
        '/api/v1/purchase/reference/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchasePatch operation.
     * @callback module:api/PurchaseApi~purchasePatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Purchase Order
     * @param {Number} id Order Id
     * @param {module:model/DkPlusAPIModelsPurchaseHead} order Order Model
     * @param {module:api/PurchaseApi~purchasePatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.purchasePatch = function(id, order, callback) {
      var postBody = order;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling purchasePatch");
      }

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling purchasePatch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/purchase/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchasePatchLine operation.
     * @callback module:api/PurchaseApi~purchasePatchLineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Purchase Order Line
     * @param {Number} id Order Id
     * @param {Number} seq Line Sequence Number
     * @param {module:model/DkCloudDataModelPurchaseLineModel} line Line Model
     * @param {module:api/PurchaseApi~purchasePatchLineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.purchasePatchLine = function(id, seq, line, callback) {
      var postBody = line;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling purchasePatchLine");
      }

      // verify the required parameter 'seq' is set
      if (seq === undefined || seq === null) {
        throw new Error("Missing the required parameter 'seq' when calling purchasePatchLine");
      }

      // verify the required parameter 'line' is set
      if (line === undefined || line === null) {
        throw new Error("Missing the required parameter 'line' when calling purchasePatchLine");
      }


      var pathParams = {
        'id': id,
        'seq': seq
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/purchase/{id}/line/{seq}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchasePost operation.
     * @callback module:api/PurchaseApi~purchasePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Purchase Order
     * @param {Array.<module:model/DkPlusAPIModelsPurchaseHead>} orders Order Model
     * @param {module:api/PurchaseApi~purchasePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.purchasePost = function(orders, callback) {
      var postBody = orders;

      // verify the required parameter 'orders' is set
      if (orders === undefined || orders === null) {
        throw new Error("Missing the required parameter 'orders' when calling purchasePost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/purchase', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
