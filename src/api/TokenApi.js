/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelUserTokenModel', 'model/DkCloudDataModelUserTokenRequestLogging', 'model/DkPlusAPIModelsCompanyAccessModel', 'model/DkPlusAPIModelsCreateTokenCredentialModel', 'model/DkPlusMailModelMailInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelUserTokenModel'), require('../model/DkCloudDataModelUserTokenRequestLogging'), require('../model/DkPlusAPIModelsCompanyAccessModel'), require('../model/DkPlusAPIModelsCreateTokenCredentialModel'), require('../model/DkPlusMailModelMailInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.TokenApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelUserTokenModel, root.DkPlusApi.DkCloudDataModelUserTokenRequestLogging, root.DkPlusApi.DkPlusAPIModelsCompanyAccessModel, root.DkPlusApi.DkPlusAPIModelsCreateTokenCredentialModel, root.DkPlusApi.DkPlusMailModelMailInfo);
  }
}(this, function(ApiClient, DkCloudDataModelUserTokenModel, DkCloudDataModelUserTokenRequestLogging, DkPlusAPIModelsCompanyAccessModel, DkPlusAPIModelsCreateTokenCredentialModel, DkPlusMailModelMailInfo) {
  'use strict';

  /**
   * Token service.
   * @module api/TokenApi
   * @version v1
   */

  /**
   * Constructs a new TokenApi. 
   * @alias module:api/TokenApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the tokenCreateToken operation.
     * @callback module:api/TokenApi~tokenCreateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelUserTokenModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Token
     * @param {module:model/DkPlusAPIModelsCreateTokenCredentialModel} value Create Token Credentials
     * @param {module:api/TokenApi~tokenCreateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelUserTokenModel}
     */
    this.tokenCreateToken = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling tokenCreateToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelUserTokenModel;

      return this.apiClient.callApi(
        '/api/v1/Token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenDelete operation.
     * @callback module:api/TokenApi~tokenDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Token
     * @param {String} id Token Id
     * @param {module:api/TokenApi~tokenDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tokenDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tokenDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Token/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenGetMyCompaniesByToken operation.
     * @callback module:api/TokenApi~tokenGetMyCompaniesByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkPlusAPIModelsCompanyAccessModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Companies that user has access to
     * @param {module:api/TokenApi~tokenGetMyCompaniesByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkPlusAPIModelsCompanyAccessModel}
     */
    this.tokenGetMyCompaniesByToken = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkPlusAPIModelsCompanyAccessModel;

      return this.apiClient.callApi(
        '/api/v1/Token/companies', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenGetMyTokens operation.
     * @callback module:api/TokenApi~tokenGetMyTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelUserTokenModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tokens
     * @param {module:api/TokenApi~tokenGetMyTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelUserTokenModel}
     */
    this.tokenGetMyTokens = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelUserTokenModel;

      return this.apiClient.callApi(
        '/api/v1/Token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenGetPDF operation.
     * @callback module:api/TokenApi~tokenGetPDFCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Token Report
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {module:api/TokenApi~tokenGetPDFCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.tokenGetPDF = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/token/report/usage/pdf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenGetTokenByID operation.
     * @callback module:api/TokenApi~tokenGetTokenByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelUserTokenModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Token
     * @param {String} id Token Id
     * @param {module:api/TokenApi~tokenGetTokenByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelUserTokenModel}
     */
    this.tokenGetTokenByID = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tokenGetTokenByID");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelUserTokenModel;

      return this.apiClient.callApi(
        '/api/v1/Token/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenGetTokenLogs operation.
     * @callback module:api/TokenApi~tokenGetTokenLogsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelUserTokenRequestLogging>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Request logs for the authorized token
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {Number} opts.statuscode 
     * @param {String} opts.method 
     * @param {String} opts.ip 
     * @param {module:api/TokenApi~tokenGetTokenLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelUserTokenRequestLogging>}
     */
    this.tokenGetTokenLogs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'statuscode': opts['statuscode'],
        'method': opts['method'],
        'ip': opts['ip'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelUserTokenRequestLogging];

      return this.apiClient.callApi(
        '/api/v1/token/report/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenGetUserInfo operation.
     * @callback module:api/TokenApi~tokenGetUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Token Employee
     * @param {String} userID User Id
     * @param {String} companyID Company Id
     * @param {module:api/TokenApi~tokenGetUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.tokenGetUserInfo = function(userID, companyID, callback) {
      var postBody = null;

      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling tokenGetUserInfo");
      }

      // verify the required parameter 'companyID' is set
      if (companyID === undefined || companyID === null) {
        throw new Error("Missing the required parameter 'companyID' when calling tokenGetUserInfo");
      }


      var pathParams = {
        'userID': userID,
        'companyID': companyID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/Token/{userID}/{companyID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenSendEmail operation.
     * @callback module:api/TokenApi~tokenSendEmailCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Token Report to Email
     * @param {module:model/DkPlusMailModelMailInfo} message 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from 
     * @param {Date} opts.to 
     * @param {module:api/TokenApi~tokenSendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.tokenSendEmail = function(message, opts, callback) {
      opts = opts || {};
      var postBody = message;

      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling tokenSendEmail");
      }


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/token/report/usage/email', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenUpdateToken operation.
     * @callback module:api/TokenApi~tokenUpdateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelUserTokenModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Token
     * @param {String} id Token Id
     * @param {module:model/DkPlusAPIModelsCreateTokenCredentialModel} info Info Model
     * @param {module:api/TokenApi~tokenUpdateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelUserTokenModel}
     */
    this.tokenUpdateToken = function(id, info, callback) {
      var postBody = info;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tokenUpdateToken");
      }

      // verify the required parameter 'info' is set
      if (info === undefined || info === null) {
        throw new Error("Missing the required parameter 'info' when calling tokenUpdateToken");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelUserTokenModel;

      return this.apiClient.callApi(
        '/api/v1/Token/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
