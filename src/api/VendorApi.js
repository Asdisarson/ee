/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelVendorsTransaction', 'model/DkCloudDataModelVendorsVendorModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelVendorsTransaction'), require('../model/DkCloudDataModelVendorsVendorModel'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.VendorApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelVendorsTransaction, root.DkPlusApi.DkCloudDataModelVendorsVendorModel);
  }
}(this, function(ApiClient, DkCloudDataModelVendorsTransaction, DkCloudDataModelVendorsVendorModel) {
  'use strict';

  /**
   * Vendor service.
   * @module api/VendorApi
   * @version v1
   */

  /**
   * Constructs a new VendorApi. 
   * @alias module:api/VendorApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the vendorCreateVendor operation.
     * @callback module:api/VendorApi~vendorCreateVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Vendor
     * @param {module:model/DkCloudDataModelVendorsVendorModel} obj Vendor Model
     * @param {module:api/VendorApi~vendorCreateVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.vendorCreateVendor = function(obj, callback) {
      var postBody = obj;

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling vendorCreateVendor");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Vendor', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorGetVendorByID operation.
     * @callback module:api/VendorApi~vendorGetVendorByIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelVendorsVendorModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Vendor
     * @param {String} id Vendor Number
     * @param {module:api/VendorApi~vendorGetVendorByIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelVendorsVendorModel}
     */
    this.vendorGetVendorByID = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling vendorGetVendorByID");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelVendorsVendorModel;

      return this.apiClient.callApi(
        '/api/v1/Vendor/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorGetVendors operation.
     * @callback module:api/VendorApi~vendorGetVendorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelVendorsVendorModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Vendors
     * @param {Object} opts Optional parameters
     * @param {String} opts.zipCode 
     * @param {Date} opts.modifiedAfter 
     * @param {Date} opts.modifiedBefore 
     * @param {String} opts.group 
     * @param {module:api/VendorApi~vendorGetVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelVendorsVendorModel>}
     */
    this.vendorGetVendors = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'zipCode': opts['zipCode'],
        'modifiedAfter': opts['modifiedAfter'],
        'modifiedBefore': opts['modifiedBefore'],
        'group': opts['group'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelVendorsVendorModel];

      return this.apiClient.callApi(
        '/api/v1/Vendor', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorGetVendorsPage operation.
     * @callback module:api/VendorApi~vendorGetVendorsPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelVendorsVendorModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Vendors Pages
     * @param {Number} page Page Number
     * @param {Number} count Objects on page
     * @param {module:api/VendorApi~vendorGetVendorsPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelVendorsVendorModel>}
     */
    this.vendorGetVendorsPage = function(page, count, callback) {
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling vendorGetVendorsPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling vendorGetVendorsPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelVendorsVendorModel];

      return this.apiClient.callApi(
        '/api/v1/Vendor/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorSearchVendors operation.
     * @callback module:api/VendorApi~vendorSearchVendorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelVendorsVendorModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Vendors
     * @param {String} value Value to Search For
     * @param {Number} max Max to return
     * @param {module:api/VendorApi~vendorSearchVendorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelVendorsVendorModel>}
     */
    this.vendorSearchVendors = function(value, max, callback) {
      var postBody = null;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling vendorSearchVendors");
      }

      // verify the required parameter 'max' is set
      if (max === undefined || max === null) {
        throw new Error("Missing the required parameter 'max' when calling vendorSearchVendors");
      }


      var pathParams = {
        'value': value,
        'max': max
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelVendorsVendorModel];

      return this.apiClient.callApi(
        '/api/v1/Vendor/search/{value}/{max}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorTransactionGetVendorTransactions operation.
     * @callback module:api/VendorApi~vendorTransactionGetVendorTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelVendorsTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} page Page Number (default=1)
     * @param {Number} count Transactions per Page (default=100)
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedAfter Transaction modified after
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {Date} opts.dueAfter Due After
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.voucher Voucher
     * @param {String} opts.reference Reference
     * @param {Number} opts.recordid 
     * @param {module:api/VendorApi~vendorTransactionGetVendorTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelVendorsTransaction>}
     */
    this.vendorTransactionGetVendorTransactions = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling vendorTransactionGetVendorTransactions");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling vendorTransactionGetVendorTransactions");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedAfter': opts['modifiedAfter'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'dueAfter': opts['dueAfter'],
        'dim1': opts['dim1'],
        'voucher': opts['voucher'],
        'reference': opts['reference'],
        'recordid': opts['recordid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelVendorsTransaction];

      return this.apiClient.callApi(
        '/api/v1/vendor/transaction/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorTransactionGetVendorTransactionsForVendor operation.
     * @callback module:api/VendorApi~vendorTransactionGetVendorTransactionsForVendorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelVendorsTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transactions for supplied Vendor
     * @param {String} vendor Vendor Number
     * @param {Number} page Page Number
     * @param {Number} count Objects on Page
     * @param {module:api/VendorApi~vendorTransactionGetVendorTransactionsForVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelVendorsTransaction>}
     */
    this.vendorTransactionGetVendorTransactionsForVendor = function(vendor, page, count, callback) {
      var postBody = null;

      // verify the required parameter 'vendor' is set
      if (vendor === undefined || vendor === null) {
        throw new Error("Missing the required parameter 'vendor' when calling vendorTransactionGetVendorTransactionsForVendor");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling vendorTransactionGetVendorTransactionsForVendor");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling vendorTransactionGetVendorTransactionsForVendor");
      }


      var pathParams = {
        'vendor': vendor,
        'page': page,
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelVendorsTransaction];

      return this.apiClient.callApi(
        '/api/v1/vendor/{vendor}/transaction/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the vendorUpdateVendor operation.
     * @callback module:api/VendorApi~vendorUpdateVendorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Vendor
     * @param {String} _number Vendor Number
     * @param {module:model/DkCloudDataModelVendorsVendorModel} obj Vendor Model
     * @param {module:api/VendorApi~vendorUpdateVendorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.vendorUpdateVendor = function(_number, obj, callback) {
      var postBody = obj;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling vendorUpdateVendor");
      }

      // verify the required parameter 'obj' is set
      if (obj === undefined || obj === null) {
        throw new Error("Missing the required parameter 'obj' when calling vendorUpdateVendor");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/Vendor/{number}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
