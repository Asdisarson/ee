/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelSalesSalesPersonModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelSalesSalesPersonModel'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.SalesPersonApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelSalesSalesPersonModel);
  }
}(this, function(ApiClient, DkCloudDataModelSalesSalesPersonModel) {
  'use strict';

  /**
   * SalesPerson service.
   * @module api/SalesPersonApi
   * @version v1
   */

  /**
   * Constructs a new SalesPersonApi. 
   * @alias module:api/SalesPersonApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the salesPersonCreateSalesPerson operation.
     * @callback module:api/SalesPersonApi~salesPersonCreateSalesPersonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Sales Person
     * @param {module:model/DkCloudDataModelSalesSalesPersonModel} value Sales Person Model
     * @param {module:api/SalesPersonApi~salesPersonCreateSalesPersonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.salesPersonCreateSalesPerson = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling salesPersonCreateSalesPerson");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/sales/person', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesPersonGetSalesPerson operation.
     * @callback module:api/SalesPersonApi~salesPersonGetSalesPersonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelSalesSalesPersonModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sales Person
     * @param {String} _number 
     * @param {module:api/SalesPersonApi~salesPersonGetSalesPersonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelSalesSalesPersonModel}
     */
    this.salesPersonGetSalesPerson = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling salesPersonGetSalesPerson");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelSalesSalesPersonModel;

      return this.apiClient.callApi(
        '/api/v1/sales/person/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesPersonGetSalesPersons operation.
     * @callback module:api/SalesPersonApi~salesPersonGetSalesPersonsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesSalesPersonModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sales Persons Paged
     * @param {Number} page Page Number
     * @param {Number} count Sales Persons per Page
     * @param {module:api/SalesPersonApi~salesPersonGetSalesPersonsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesSalesPersonModel>}
     */
    this.salesPersonGetSalesPersons = function(page, count, callback) {
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling salesPersonGetSalesPersons");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling salesPersonGetSalesPersons");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesSalesPersonModel];

      return this.apiClient.callApi(
        '/api/v1/sales/person/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesPersonGetSalesPersonsPage operation.
     * @callback module:api/SalesPersonApi~salesPersonGetSalesPersonsPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelSalesSalesPersonModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sales Persons Paged
     * @param {Number} page Page Number
     * @param {Number} count Sales Persons per Page
     * @param {module:api/SalesPersonApi~salesPersonGetSalesPersonsPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelSalesSalesPersonModel>}
     */
    this.salesPersonGetSalesPersonsPage = function(page, count, callback) {
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling salesPersonGetSalesPersonsPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling salesPersonGetSalesPersonsPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelSalesSalesPersonModel];

      return this.apiClient.callApi(
        '/api/v1/sales/person/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesPersonRemoveSalesPerson operation.
     * @callback module:api/SalesPersonApi~salesPersonRemoveSalesPersonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Sales Person
     * @param {String} _number Sales Person Number
     * @param {module:api/SalesPersonApi~salesPersonRemoveSalesPersonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.salesPersonRemoveSalesPerson = function(_number, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling salesPersonRemoveSalesPerson");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/sales/person/{number}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the salesPersonUpdateSalesPerson operation.
     * @callback module:api/SalesPersonApi~salesPersonUpdateSalesPersonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Sales Person
     * @param {String} _number Sales Person Number
     * @param {module:model/DkCloudDataModelSalesSalesPersonModel} value Sales Person Model
     * @param {module:api/SalesPersonApi~salesPersonUpdateSalesPersonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.salesPersonUpdateSalesPerson = function(_number, value, callback) {
      var postBody = value;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling salesPersonUpdateSalesPerson");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling salesPersonUpdateSalesPerson");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/sales/person/{number}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
