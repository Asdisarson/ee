/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkPlusAPIModelsRecordDeletedInfo', 'model/DkPlusAPIModelsTableChangeResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkPlusAPIModelsRecordDeletedInfo'), require('../model/DkPlusAPIModelsTableChangeResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.TableApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkPlusAPIModelsRecordDeletedInfo, root.DkPlusApi.DkPlusAPIModelsTableChangeResponse);
  }
}(this, function(ApiClient, DkPlusAPIModelsRecordDeletedInfo, DkPlusAPIModelsTableChangeResponse) {
  'use strict';

  /**
   * Table service.
   * @module api/TableApi
   * @version v1
   */

  /**
   * Constructs a new TableApi. 
   * @alias module:api/TableApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the tableCreateRecord operation.
     * @callback module:api/TableApi~tableCreateRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Record In Table
     * @param {String} name Table Name
     * @param {Object} values Key Values
     * @param {module:api/TableApi~tableCreateRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tableCreateRecord = function(name, values, callback) {
      var postBody = values;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling tableCreateRecord");
      }

      // verify the required parameter 'values' is set
      if (values === undefined || values === null) {
        throw new Error("Missing the required parameter 'values' when calling tableCreateRecord");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/general/table/{name}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tableDeleteRecord operation.
     * @callback module:api/TableApi~tableDeleteRecordCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action deletes a record WARNING: Action performed at own risk.
     * @param {String} name Table Name
     * @param {String} value Lookup value
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Field Name
     * @param {module:api/TableApi~tableDeleteRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.tableDeleteRecord = function(name, value, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling tableDeleteRecord");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling tableDeleteRecord");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'value': value,
        'key': opts['key'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/general/table/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tableGetDeleted operation.
     * @callback module:api/TableApi~tableGetDeletedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkPlusAPIModelsRecordDeletedInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Deleted Records from Table
     * @param {String} name Table Name
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from Deleted After
     * @param {Number} opts.max Max returned objects
     * @param {module:api/TableApi~tableGetDeletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkPlusAPIModelsRecordDeletedInfo>}
     */
    this.tableGetDeleted = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling tableGetDeleted");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'from': opts['from'],
        'max': opts['max'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkPlusAPIModelsRecordDeletedInfo];

      return this.apiClient.callApi(
        '/api/v1/general/table/{name}/deleted', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tableGetRecordChangeCount operation.
     * @callback module:api/TableApi~tableGetRecordChangeCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkPlusAPIModelsTableChangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Record Change Count from Table
     * @param {String} name Table Name
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modified Modified After
     * @param {module:api/TableApi~tableGetRecordChangeCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkPlusAPIModelsTableChangeResponse}
     */
    this.tableGetRecordChangeCount = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling tableGetRecordChangeCount");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'modified': opts['modified'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkPlusAPIModelsTableChangeResponse;

      return this.apiClient.callApi(
        '/api/v1/general/table/{name}/changes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tableGetRecordsFromTable operation.
     * @callback module:api/TableApi~tableGetRecordsFromTableCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Records from a table
     * @param {String} name Table Name
     * @param {String} fields Fields to Return
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.output Output Type
     * @param {Date} opts.modified Modified
     * @param {Number} opts.count Recourd Cout
     * @param {String} opts.key 
     * @param {String} opts.value 
     * @param {module:api/TableApi~tableGetRecordsFromTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.tableGetRecordsFromTable = function(name, fields, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling tableGetRecordsFromTable");
      }

      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling tableGetRecordsFromTable");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'fields': fields,
        'output': opts['output'],
        'modified': opts['modified'],
        'count': opts['count'],
        'key': opts['key'],
        'value': opts['value'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/v1/general/table/{name}/records', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tableGetTableFields operation.
     * @callback module:api/TableApi~tableGetTableFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return List of Table Fields
     * @param {String} name Table Name
     * @param {module:api/TableApi~tableGetTableFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.tableGetTableFields = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling tableGetTableFields");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/api/v1/general/table/{name}/fields', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tableUpdateRecord operation.
     * @callback module:api/TableApi~tableUpdateRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Record In DK
     * ## Set Values    Warning: you need to make sure 100% what you are doing
     * @param {Object} values Values to Update
     * @param {String} name Table Nae
     * @param {String} key Index Keys
     * @param {module:api/TableApi~tableUpdateRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.tableUpdateRecord = function(values, name, key, callback) {
      var postBody = values;

      // verify the required parameter 'values' is set
      if (values === undefined || values === null) {
        throw new Error("Missing the required parameter 'values' when calling tableUpdateRecord");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling tableUpdateRecord");
      }

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling tableUpdateRecord");
      }


      var pathParams = {
        'name': name,
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/general/table/{name}/{key}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
