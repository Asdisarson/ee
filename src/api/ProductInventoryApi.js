/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkPlusAPIModelsProductInventoryInventorying', 'model/DkPlusAPIModelsProductInventoryJournal', 'model/DkPlusAPIModelsProductInventoryTransfer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkPlusAPIModelsProductInventoryInventorying'), require('../model/DkPlusAPIModelsProductInventoryJournal'), require('../model/DkPlusAPIModelsProductInventoryTransfer'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.ProductInventoryApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkPlusAPIModelsProductInventoryInventorying, root.DkPlusApi.DkPlusAPIModelsProductInventoryJournal, root.DkPlusApi.DkPlusAPIModelsProductInventoryTransfer);
  }
}(this, function(ApiClient, DkPlusAPIModelsProductInventoryInventorying, DkPlusAPIModelsProductInventoryJournal, DkPlusAPIModelsProductInventoryTransfer) {
  'use strict';

  /**
   * ProductInventory service.
   * @module api/ProductInventoryApi
   * @version v1
   */

  /**
   * Constructs a new ProductInventoryApi. 
   * @alias module:api/ProductInventoryApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the productInventoryCreateInventorying operation.
     * @callback module:api/ProductInventoryApi~productInventoryCreateInventoryingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product Inventorying
     * @param {module:model/DkPlusAPIModelsProductInventoryInventorying} value Inventorying Model
     * @param {module:api/ProductInventoryApi~productInventoryCreateInventoryingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.productInventoryCreateInventorying = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling productInventoryCreateInventorying");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/product/register/Inventorying', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productInventoryCreateJournal operation.
     * @callback module:api/ProductInventoryApi~productInventoryCreateJournalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Project Journal
     * @param {module:model/DkPlusAPIModelsProductInventoryJournal} value Journal Model
     * @param {module:api/ProductInventoryApi~productInventoryCreateJournalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.productInventoryCreateJournal = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling productInventoryCreateJournal");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/product/register/journal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productInventoryCreateTransfer operation.
     * @callback module:api/ProductInventoryApi~productInventoryCreateTransferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product Transfer
     * @param {Array.<module:model/DkPlusAPIModelsProductInventoryTransfer>} value Transfer Model
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.append Append to an exists journal
     * @param {Boolean} opts.post Process the journal
     * @param {String} opts.description Description for new journal
     * @param {module:api/ProductInventoryApi~productInventoryCreateTransferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.productInventoryCreateTransfer = function(value, opts, callback) {
      opts = opts || {};
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling productInventoryCreateTransfer");
      }


      var pathParams = {
      };
      var queryParams = {
        'append': opts['append'],
        'post': opts['post'],
        'description': opts['description'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/product/register/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
