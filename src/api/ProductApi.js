/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelProductsBarcodesModel', 'model/DkCloudDataModelProductsProductGroupModel', 'model/DkCloudDataModelProductsProductModel', 'model/DkCloudDataModelProductsTransactionsModel', 'model/DkPlusAPIModelsFile', 'model/DkPlusAPIModelsProductInventoryBarcode'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelProductsBarcodesModel'), require('../model/DkCloudDataModelProductsProductGroupModel'), require('../model/DkCloudDataModelProductsProductModel'), require('../model/DkCloudDataModelProductsTransactionsModel'), require('../model/DkPlusAPIModelsFile'), require('../model/DkPlusAPIModelsProductInventoryBarcode'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.ProductApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelProductsBarcodesModel, root.DkPlusApi.DkCloudDataModelProductsProductGroupModel, root.DkPlusApi.DkCloudDataModelProductsProductModel, root.DkPlusApi.DkCloudDataModelProductsTransactionsModel, root.DkPlusApi.DkPlusAPIModelsFile, root.DkPlusApi.DkPlusAPIModelsProductInventoryBarcode);
  }
}(this, function(ApiClient, DkCloudDataModelProductsBarcodesModel, DkCloudDataModelProductsProductGroupModel, DkCloudDataModelProductsProductModel, DkCloudDataModelProductsTransactionsModel, DkPlusAPIModelsFile, DkPlusAPIModelsProductInventoryBarcode) {
  'use strict';

  /**
   * Product service.
   * @module api/ProductApi
   * @version v1
   */

  /**
   * Constructs a new ProductApi. 
   * @alias module:api/ProductApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the barcodeCreateBarCode operation.
     * @callback module:api/ProductApi~barcodeCreateBarCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a product barcode
     * @param {module:model/DkPlusAPIModelsProductInventoryBarcode} model barcode model
     * @param {module:api/ProductApi~barcodeCreateBarCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.barcodeCreateBarCode = function(model, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling barcodeCreateBarCode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/barcode/api/v1/barcode', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the barcodeGetBarcode operation.
     * @callback module:api/ProductApi~barcodeGetBarcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelProductsProductModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a product from barcode
     * @param {String} id Barcode
     * @param {module:api/ProductApi~barcodeGetBarcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelProductsProductModel}
     */
    this.barcodeGetBarcode = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling barcodeGetBarcode");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelProductsProductModel;

      return this.apiClient.callApi(
        '/api/v1/barcode/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productCreateProduct operation.
     * @callback module:api/ProductApi~productCreateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelProductsProductModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product
     * @param {module:model/DkCloudDataModelProductsProductModel} value Product Create Model
     * @param {module:api/ProductApi~productCreateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelProductsProductModel}
     */
    this.productCreateProduct = function(value, callback) {
      var postBody = value;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling productCreateProduct");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelProductsProductModel;

      return this.apiClient.callApi(
        '/api/v1/product', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeleteProduct operation.
     * @callback module:api/ProductApi~productDeleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Product
     * @param {String} id Item Code
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBase64 Is Base64 Encoded
     * @param {module:api/ProductApi~productDeleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.productDeleteProduct = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productDeleteProduct");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'isBase64': opts['isBase64'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/product/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetModified operation.
     * @callback module:api/ProductApi~productGetModifiedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsProductModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Modified Products
     * ## Use Instead  api/v1/Product/Page' instead with ?modified=\"
     * @param {Date} modified Modified
     * @param {Number} page Page Number
     * @param {Number} count Product per Page
     * @param {Object} opts Optional parameters
     * @param {Date} opts.detailed Detailed
     * @param {Boolean} opts.inactive Inactive
     * @param {Boolean} opts.onweb Show on web
     * @param {String} opts.group Group
     * @param {String} opts.warehouse Warehouse
     * @param {String} opts.include 
     * @param {module:api/ProductApi~productGetModifiedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsProductModel>}
     */
    this.productGetModified = function(modified, page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'modified' is set
      if (modified === undefined || modified === null) {
        throw new Error("Missing the required parameter 'modified' when calling productGetModified");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling productGetModified");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling productGetModified");
      }


      var pathParams = {
        'modified': modified,
        'page': page,
        'count': count
      };
      var queryParams = {
        'detailed': opts['detailed'],
        'inactive': opts['inactive'],
        'onweb': opts['onweb'],
        'group': opts['group'],
        'warehouse': opts['warehouse'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsProductModel];

      return this.apiClient.callApi(
        '/api/v1/Product/modified/{modified}/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductAttachment operation.
     * @callback module:api/ProductApi~productGetProductAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Attachment
     * @param {String} itemcode Item Code
     * @param {Number} id Attachment Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBase64 Is Base64 Encoded
     * @param {module:api/ProductApi~productGetProductAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.productGetProductAttachment = function(itemcode, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'itemcode' is set
      if (itemcode === undefined || itemcode === null) {
        throw new Error("Missing the required parameter 'itemcode' when calling productGetProductAttachment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productGetProductAttachment");
      }


      var pathParams = {
        'itemcode': itemcode,
        'id': id
      };
      var queryParams = {
        'isBase64': opts['isBase64'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/product/{itemcode}/attachment/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductBarCodes operation.
     * @callback module:api/ProductApi~productGetProductBarCodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsBarcodesModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Barcodes
     * @param {String} id Item Code
     * @param {module:api/ProductApi~productGetProductBarCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsBarcodesModel>}
     */
    this.productGetProductBarCodes = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productGetProductBarCodes");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsBarcodesModel];

      return this.apiClient.callApi(
        '/api/v1/product/{id}/barcode', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductBarcode operation.
     * @callback module:api/ProductApi~productGetProductBarcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelProductsBarcodesModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Barcode for Product
     * @param {String} id Item Code
     * @param {String} barcode Barcode
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBase64 Is Base64 Encoded
     * @param {module:api/ProductApi~productGetProductBarcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelProductsBarcodesModel}
     */
    this.productGetProductBarcode = function(id, barcode, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productGetProductBarcode");
      }

      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling productGetProductBarcode");
      }


      var pathParams = {
        'id': id,
        'barcode': barcode
      };
      var queryParams = {
        'isBase64': opts['isBase64'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelProductsBarcodesModel;

      return this.apiClient.callApi(
        '/api/v1/product/{id}/barcode/{barcode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductById operation.
     * @callback module:api/ProductApi~productGetProductByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelProductsProductModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product
     * @param {String} id Item Code
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBase64 Is Base64 Encoded
     * @param {module:api/ProductApi~productGetProductByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelProductsProductModel}
     */
    this.productGetProductById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productGetProductById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'isBase64': opts['isBase64'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelProductsProductModel;

      return this.apiClient.callApi(
        '/api/v1/Product/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductCount operation.
     * @callback module:api/ProductApi~productGetProductCountCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product count based on criteria
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive 
     * @param {Boolean} opts.onweb 
     * @param {String} opts.group 
     * @param {String} opts.warehouse 
     * @param {Date} opts.modified 
     * @param {Date} opts.modifiedBefore 
     * @param {module:api/ProductApi~productGetProductCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.productGetProductCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'onweb': opts['onweb'],
        'group': opts['group'],
        'warehouse': opts['warehouse'],
        'modified': opts['modified'],
        'modifiedBefore': opts['modifiedBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/api/v1/Product/info/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductSearch operation.
     * @callback module:api/ProductApi~productGetProductSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsProductModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Product
     * @param {String} value Search string
     * @param {Number} max Maximum result
     * @param {module:api/ProductApi~productGetProductSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsProductModel>}
     */
    this.productGetProductSearch = function(value, max, callback) {
      var postBody = null;

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling productGetProductSearch");
      }

      // verify the required parameter 'max' is set
      if (max === undefined || max === null) {
        throw new Error("Missing the required parameter 'max' when calling productGetProductSearch");
      }


      var pathParams = {
        'value': value,
        'max': max
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsProductModel];

      return this.apiClient.callApi(
        '/api/v1/Product/search/{value}/{max}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductTransactions operation.
     * @callback module:api/ProductApi~productGetProductTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsTransactionsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Transactions
     * @param {String} id Item Code
     * @param {Number} page Page Number
     * @param {Number} count Products per Page
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBase64 Is Base64 Encoded
     * @param {module:api/ProductApi~productGetProductTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsTransactionsModel>}
     */
    this.productGetProductTransactions = function(id, page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productGetProductTransactions");
      }

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling productGetProductTransactions");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling productGetProductTransactions");
      }


      var pathParams = {
        'id': id,
        'page': page,
        'count': count
      };
      var queryParams = {
        'isBase64': opts['isBase64'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsTransactionsModel];

      return this.apiClient.callApi(
        '/api/v1/product/{id}/transaction/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProducts operation.
     * @callback module:api/ProductApi~productGetProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsProductModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Products
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive Inactive
     * @param {Boolean} opts.onweb Show on web
     * @param {String} opts.group Group
     * @param {String} opts.warehouse Warehouse
     * @param {Date} opts.modified Modified after
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {String} opts.include Fields to include
     * @param {module:api/ProductApi~productGetProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsProductModel>}
     */
    this.productGetProducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'onweb': opts['onweb'],
        'group': opts['group'],
        'warehouse': opts['warehouse'],
        'modified': opts['modified'],
        'modifiedBefore': opts['modifiedBefore'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsProductModel];

      return this.apiClient.callApi(
        '/api/v1/Product', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGetProductsPage operation.
     * @callback module:api/ProductApi~productGetProductsPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsProductModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Products Paged
     * @param {Number} page Page Numer
     * @param {Number} count Products per Page
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive Inactive
     * @param {Boolean} opts.onweb Show on web
     * @param {String} opts.group Group
     * @param {String} opts.warehouse Warehouse
     * @param {Date} opts.modified Modified after
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Boolean} opts.deleted Product Deleted
     * @param {String} opts.include Fields to include
     * @param {module:api/ProductApi~productGetProductsPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsProductModel>}
     */
    this.productGetProductsPage = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling productGetProductsPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling productGetProductsPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'onweb': opts['onweb'],
        'group': opts['group'],
        'warehouse': opts['warehouse'],
        'modified': opts['modified'],
        'modifiedBefore': opts['modifiedBefore'],
        'deleted': opts['deleted'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsProductModel];

      return this.apiClient.callApi(
        '/api/v1/Product/page/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productGroupGet operation.
     * @callback module:api/ProductApi~productGroupGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsProductGroupModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Groups
     * @param {module:api/ProductApi~productGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsProductGroupModel>}
     */
    this.productGroupGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsProductGroupModel];

      return this.apiClient.callApi(
        '/api/v1/productgroup', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productTransactionGetInventoryTransactionsPage operation.
     * @callback module:api/ProductApi~productTransactionGetInventoryTransactionsPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelProductsTransactionsModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} page Page Number
     * @param {Number} count Objects to return
     * @param {Object} opts Optional parameters
     * @param {Date} opts.modifiedAfter Modified After
     * @param {Date} opts.modifiedBefore Modified Before
     * @param {Date} opts.createdAfter Created After
     * @param {Date} opts.createdBefore Created Before
     * @param {String} opts.dim1 Dimmention
     * @param {String} opts.itemcode Item Code
     * @param {String} opts.warehouse Wharehouse
     * @param {String} opts.currency Currency Code
     * @param {String} opts.reference Reference
     * @param {String} opts.include Fields to include
     * @param {module:api/ProductApi~productTransactionGetInventoryTransactionsPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelProductsTransactionsModel>}
     */
    this.productTransactionGetInventoryTransactionsPage = function(page, count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling productTransactionGetInventoryTransactionsPage");
      }

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling productTransactionGetInventoryTransactionsPage");
      }


      var pathParams = {
        'page': page,
        'count': count
      };
      var queryParams = {
        'modifiedAfter': opts['modifiedAfter'],
        'modifiedBefore': opts['modifiedBefore'],
        'createdAfter': opts['createdAfter'],
        'createdBefore': opts['createdBefore'],
        'dim1': opts['dim1'],
        'itemcode': opts['itemcode'],
        'warehouse': opts['warehouse'],
        'Currency': opts['currency'],
        'reference': opts['reference'],
        'include': opts['include'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelProductsTransactionsModel];

      return this.apiClient.callApi(
        '/api/v1/product/transaction/{page}/{count}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productUpdateProduct operation.
     * @callback module:api/ProductApi~productUpdateProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelProductsProductModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Product
     * @param {String} itemcode Item Code
     * @param {module:model/DkCloudDataModelProductsProductModel} value Product Update Model
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBase64 Is Base64 Encoded
     * @param {module:api/ProductApi~productUpdateProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelProductsProductModel}
     */
    this.productUpdateProduct = function(itemcode, value, opts, callback) {
      opts = opts || {};
      var postBody = value;

      // verify the required parameter 'itemcode' is set
      if (itemcode === undefined || itemcode === null) {
        throw new Error("Missing the required parameter 'itemcode' when calling productUpdateProduct");
      }

      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling productUpdateProduct");
      }


      var pathParams = {
        'itemcode': itemcode
      };
      var queryParams = {
        'isBase64': opts['isBase64'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelProductsProductModel;

      return this.apiClient.callApi(
        '/api/v1/product/{itemcode}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the productUploadProductAttachment operation.
     * @callback module:api/ProductApi~productUploadProductAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file as an attachment to product
     * @param {String} itemcode Item Code
     * @param {module:model/DkPlusAPIModelsFile} fileModel Attachment Model
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isBase64 Item Code is Base64
     * @param {module:api/ProductApi~productUploadProductAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.productUploadProductAttachment = function(itemcode, fileModel, opts, callback) {
      opts = opts || {};
      var postBody = fileModel;

      // verify the required parameter 'itemcode' is set
      if (itemcode === undefined || itemcode === null) {
        throw new Error("Missing the required parameter 'itemcode' when calling productUploadProductAttachment");
      }

      // verify the required parameter 'fileModel' is set
      if (fileModel === undefined || fileModel === null) {
        throw new Error("Missing the required parameter 'fileModel' when calling productUploadProductAttachment");
      }


      var pathParams = {
        'itemcode': itemcode
      };
      var queryParams = {
        'isBase64': opts['isBase64'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/product/{itemcode}/attachment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
