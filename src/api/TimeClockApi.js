/*
 * dkPlus API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DkCloudDataModelSettingsTimeClockSettingModel', 'model/DkCloudDataModelTimeClockEntryModel', 'model/DkPlusAPIModelsTimeClockRegisterInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DkCloudDataModelSettingsTimeClockSettingModel'), require('../model/DkCloudDataModelTimeClockEntryModel'), require('../model/DkPlusAPIModelsTimeClockRegisterInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.DkPlusApi) {
      root.DkPlusApi = {};
    }
    root.DkPlusApi.TimeClockApi = factory(root.DkPlusApi.ApiClient, root.DkPlusApi.DkCloudDataModelSettingsTimeClockSettingModel, root.DkPlusApi.DkCloudDataModelTimeClockEntryModel, root.DkPlusApi.DkPlusAPIModelsTimeClockRegisterInfo);
  }
}(this, function(ApiClient, DkCloudDataModelSettingsTimeClockSettingModel, DkCloudDataModelTimeClockEntryModel, DkPlusAPIModelsTimeClockRegisterInfo) {
  'use strict';

  /**
   * TimeClock service.
   * @module api/TimeClockApi
   * @version v1
   */

  /**
   * Constructs a new TimeClockApi. 
   * @alias module:api/TimeClockApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the timeClockDkPosRegister operation.
     * @callback module:api/TimeClockApi~timeClockDkPosRegisterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} employee 
     * @param {String} company 
     * @param {String} license 
     * @param {module:model/DkPlusAPIModelsTimeClockRegisterInfo} info 
     * @param {module:api/TimeClockApi~timeClockDkPosRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.timeClockDkPosRegister = function(employee, company, license, info, callback) {
      var postBody = info;

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling timeClockDkPosRegister");
      }

      // verify the required parameter 'company' is set
      if (company === undefined || company === null) {
        throw new Error("Missing the required parameter 'company' when calling timeClockDkPosRegister");
      }

      // verify the required parameter 'license' is set
      if (license === undefined || license === null) {
        throw new Error("Missing the required parameter 'license' when calling timeClockDkPosRegister");
      }

      // verify the required parameter 'info' is set
      if (info === undefined || info === null) {
        throw new Error("Missing the required parameter 'info' when calling timeClockDkPosRegister");
      }


      var pathParams = {
        'employee': employee
      };
      var queryParams = {
        'company': company,
        'License': license,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/dkposregister/{employee}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockGetConfig operation.
     * @callback module:api/TimeClockApi~timeClockGetConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} host 
     * @param {module:api/TimeClockApi~timeClockGetConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.timeClockGetConfig = function(host, callback) {
      var postBody = null;

      // verify the required parameter 'host' is set
      if (host === undefined || host === null) {
        throw new Error("Missing the required parameter 'host' when calling timeClockGetConfig");
      }


      var pathParams = {
      };
      var queryParams = {
        'host': host,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/web/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockGetEmployee operation.
     * @callback module:api/TimeClockApi~timeClockGetEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} phone 
     * @param {module:api/TimeClockApi~timeClockGetEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.timeClockGetEmployee = function(phone, callback) {
      var postBody = null;

      // verify the required parameter 'phone' is set
      if (phone === undefined || phone === null) {
        throw new Error("Missing the required parameter 'phone' when calling timeClockGetEmployee");
      }


      var pathParams = {
      };
      var queryParams = {
        'phone': phone,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/Employee', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockGetIn operation.
     * @callback module:api/TimeClockApi~timeClockGetInCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelTimeClockEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TimeClockApi~timeClockGetInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelTimeClockEntryModel>}
     */
    this.timeClockGetIn = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelTimeClockEntryModel];

      return this.apiClient.callApi(
        '/api/v1/TimeClock/in', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockGetOut operation.
     * @callback module:api/TimeClockApi~timeClockGetOutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelTimeClockEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/TimeClockApi~timeClockGetOutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelTimeClockEntryModel>}
     */
    this.timeClockGetOut = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelTimeClockEntryModel];

      return this.apiClient.callApi(
        '/api/v1/TimeClock/out', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockGetProject operation.
     * @callback module:api/TimeClockApi~timeClockGetProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} _number 
     * @param {String} company 
     * @param {module:api/TimeClockApi~timeClockGetProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.timeClockGetProject = function(_number, company, callback) {
      var postBody = null;

      // verify the required parameter '_number' is set
      if (_number === undefined || _number === null) {
        throw new Error("Missing the required parameter '_number' when calling timeClockGetProject");
      }

      // verify the required parameter 'company' is set
      if (company === undefined || company === null) {
        throw new Error("Missing the required parameter 'company' when calling timeClockGetProject");
      }


      var pathParams = {
        'number': _number
      };
      var queryParams = {
        'company': company,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/project/{number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockGetTimeClockEnrties operation.
     * @callback module:api/TimeClockApi~timeClockGetTimeClockEnrtiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DkCloudDataModelTimeClockEntryModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Time Clock Entries
     * @param {Object} opts Optional parameters
     * @param {Date} opts.from Stamped in after
     * @param {Date} opts.to Stamped out before
     * @param {String} opts.employee Employee Number
     * @param {String} opts.dim1 
     * @param {String} opts.dim2 
     * @param {String} opts.dim3 
     * @param {String} opts.project 
     * @param {String} opts.phase 
     * @param {String} opts.task 
     * @param {module:api/TimeClockApi~timeClockGetTimeClockEnrtiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DkCloudDataModelTimeClockEntryModel>}
     */
    this.timeClockGetTimeClockEnrties = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'employee': opts['employee'],
        'dim1': opts['dim1'],
        'dim2': opts['dim2'],
        'dim3': opts['dim3'],
        'project': opts['project'],
        'phase': opts['phase'],
        'task': opts['task'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DkCloudDataModelTimeClockEntryModel];

      return this.apiClient.callApi(
        '/api/v1/TimeClock/entries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockGetTimeClockSettings operation.
     * @callback module:api/TimeClockApi~timeClockGetTimeClockSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DkCloudDataModelSettingsTimeClockSettingModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TimeClock Settings for company
     * @param {module:api/TimeClockApi~timeClockGetTimeClockSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DkCloudDataModelSettingsTimeClockSettingModel}
     */
    this.timeClockGetTimeClockSettings = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DkCloudDataModelSettingsTimeClockSettingModel;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockQuit operation.
     * @callback module:api/TimeClockApi~timeClockQuitCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} company 
     * @param {String} employee 
     * @param {module:api/TimeClockApi~timeClockQuitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.timeClockQuit = function(company, employee, callback) {
      var postBody = null;

      // verify the required parameter 'company' is set
      if (company === undefined || company === null) {
        throw new Error("Missing the required parameter 'company' when calling timeClockQuit");
      }

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling timeClockQuit");
      }


      var pathParams = {
      };
      var queryParams = {
        'company': company,
        'employee': employee,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/quit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockRegister operation.
     * @callback module:api/TimeClockApi~timeClockRegisterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} employee 
     * @param {Object} opts Optional parameters
     * @param {String} opts.company 
     * @param {String} opts.project 
     * @param {module:api/TimeClockApi~timeClockRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.timeClockRegister = function(employee, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling timeClockRegister");
      }


      var pathParams = {
        'employee': employee
      };
      var queryParams = {
        'company': opts['company'],
        'project': opts['project'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/register/{employee}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeClockTimeClockStamp operation.
     * @callback module:api/TimeClockApi~timeClockTimeClockStampCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stamp Employee
     * @param {String} employee 
     * @param {Object} opts Optional parameters
     * @param {String} opts.project 
     * @param {String} opts.type 
     * @param {module:api/TimeClockApi~timeClockTimeClockStampCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.timeClockTimeClockStamp = function(employee, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling timeClockTimeClockStamp");
      }


      var pathParams = {
        'employee': employee
      };
      var queryParams = {
        'project': opts['project'],
        'type': opts['type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/TimeClock/stamp/{employee}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
